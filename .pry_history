edit .
exit
edit .
exit
Plane.find 3
plane = _
plane.maintenance_interval
plane.maintenance_intervals
exit
plane = Plane.find 3
plane.maintenance_intervals.current_intervals
reload!
Plane.find(3).maintenance_intervals.current_intervals
Plane.find(3).maintenance_intervals.current_intervals - Plane.find(3).current_maintenance_interval
Plane.find(3).maintenance_intervals.current_intervals - [Plane.find(3).current_maintenance_interval]
exit
edit .
show-routes 
exit
MaintenanceInterval.last
MaintenanceInterval.last.plane.maintenance_intervals
MaintenanceInterval.last.plane.maintenance_intervals.last
MaintenanceInterval.last.plane.maintenance_intervals.current_intervals
exit
edit .
exit
edit .
exit
mfl = MaterFlightLog.new
mfl = MasterFlightLog.new
mfl = _
mfl.valid?
mfl.messages?
mfl.messages
mfl.errors
mfl.errors.messages
load_factories
FactoryGirl.build(:log_flight_params)
mfl.errors.messages;5~exit
exit
load_factories
exit
load_factories
FactoryGirl.build(:log_flight_params)
load_factories
HashWithIndifferentAccess.new
exit
load_factories
FactoryGirl.build(:log_flight_params)
FactoryGirl.build(:log_flight_params)[:submit_check]
FactoryGirl.build(:log_flight_params)['submit_check'
]
FactoryGirl.build(:log_flight_params)['submit_check']
OpenStruct.new{fucker: 1}
OpenStruct.new(fucker: 1)
k = _
k['fucker']
JSON.parse({'fucker' => '1' } )
JSON.parse( {'fucker' => '1' }.to_s )
JSON.parse( "{'fucker' => '1' }" )
clear
exit
load_factories
FactoryGirl.build(:log_flight_params)['submit_check']
exit
load_factories
FactoryGirl.build(:log_flight_params)['submit_check']
FactoryGirl.build(:log_flight_params)[:submit_check]
FactoryGirl.build(:log_flight_params).with_indifferent_access
f = FactoryGirl.build(:log_flight_params).with_indifferent_access
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
fg['submit_check']
fg[:submit_check]
exit
load_factories
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
fg.delete(:course_lesson_tracking)
MaterFlightLog.new fg
MasterFlightLog.new fg
exit
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
load_factories
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
fg.delete(:course_lesson_tracking)
MasterFlightLog.new fg
MasterFlightLog.new fg[:master_flight_log]
fg[:master_flight_log].delete(:course_lesson_tracking)
MasterFlightLog.new fg[:master_flight_log]
k = _
k.valid?
k.pilot
mfl.errors
mfl.messages
k.errors
cd k
show-method independent
MasterFlightLog.first
clear
exit
MasterFlightLog.first
mfl = _
mfl.reservation
mfl.independent_master_log
mfl.independent
mfl.independent.first
MasterFlightLog.independent
exit
MaintenanceInterval
reload
reload!
MaintenanceInterval
MaintenanceInterval.where(plane_id: 4)
MaintenanceInterval.where(plane_id: 4).count
MaintenanceInterval.where(plane_id: 4).order(:start_time)
MaintenanceInterval.where(plane_id: 4).order(:start_time).order(:end_time)
reload!
MaintenanceInterval.where(plane_id: 4).first.get_overlapping_intervals
MaintenanceInterval.where(plane_id: 4).first.get_overlapping_intervals.count
MaintenanceInterval.where(plane_id: 4).first.resolve_overlapping_intervals
exit
MaintenanceInterval.where(plane_id: 4).first.resolve_overlapping_intervals
reload
reload!
MaintenanceInterval.where(plane_id: 4).first.resolve_overlapping_intervals
MaintenanceInterval.where(plane_id: 4)
MaintenanceInterval.where(plane_id: 4).count
exit
SchoolInstance.current_time
set_school
SchoolInstance.current_time
exit
load_factories
CoursesSection::ClassLessonTracking
FactoryGirl.build(:class_lesson_tracking)
clt = _
clt.valid?
clt.save!
clt
clt.pilot_id
clt.pilot
clt.student
clt.student_id
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
FactoryGirl.reload!
FactoryGirl.reload
fg = FactoryGirl.build(:log_flight_params).with_indifferent_access
OpenStruct.new fg
k = _
k.master_flight_log
k.master_flight_log.pilot_user_id
clear
clt
clt.instructor_id
associated_with MasterFlightLog
MasterFlightLog.first.plane_id
NotImplementedError
NotImplementedError.new self.class.name, 'Nope'
NotImplementedError self.class.name, 'Nope'
fail NotImplementedError self.class.name, 'Nope'
fail NotImplementedError.new(self.class.name, 'Nope')
NotImplementedError.new(self.class.name)
NotImplementedError.new('fucker')
MasterFlightLog.first
MasterFlightLog.first.start_time
MasterFlightLog.first.date_completed
MasterFlightLog.first.date_time
MasterFlightLog.first.date_completed
MasterFlightLog.first.date_started
MasterFlightLog.first.date_checked_out
MasterFlightLog.first.class_lesson_tracking
MasterFlightLog.where('class_lesson_tracking IS NOT ?', nil).fist
MasterFlightLog.where('class_lesson_tracking IS NOT ?', nil).first
MasterFlightLog.where('class_lesson_tracking_id IS NOT ?', nil).first
MasterFlightLog.where('course_lesson_tracking_id IS NOT ?', nil).first
MasterFlightLog.column_names
MasterFlightLog.column_names.sort
associated_with MasterFlightLog.last
MasterFlightLog.last.class_lesson_tracking
MasterFlightLog.last.date_completed
exit
a = "/index!WCIndex.action"
case a
  where /\/index/
case a
when /\/index/
  true
else
  false
end
exit
Vendor
Item
BillingItem
BillingItems
Billing::Item
Maintenance::Customer
Maintenance::Customer.table_name
exit
AirworthinessDirective.where(ad_type: 6).first
AirworthinessDirective.find 1466
k = _
k.versions
AirworthinessDirective.find 1466
aw = _
CoursesSection::ClassLessonTracking.last
clt = _
clt.class_class_id
clt.class_id
MasterFlightLog
associated_with MasterFlightLog
clear
MaseterFlightLog.first
MasterFlightLog
associated_with MasterFlightLog
MaseterFlightLog.first.instructor_id
MasterFlightLog.first.instructor_id
MasterFlightLog.first.instructor
clear
CoursesSection::ClassLessonTracking.last
BillingSection
BillingSection.find
Billing.find 230666
k = _
k.invoice
Billing.last
@school_instance = SchoolInstance.find 7
Billing.by_school(@school_instance.id).newer_first.non_approved_cancelations
Billing.by_school(@school_instance.id).newer_first.non_approved_cancelations.count
Billing.by_school(@school_instance.id).newer_first.non_approved_cancelations.invoice_not_paid
Billing.by_school(@school_instance.id).newer_first.non_approved_cancelations.invoice_not_paid.count
@school_instacne
@school_instance
@billings_list = Billing.by_school(@school_instance.id).newer_first.non_approved_cancelations
@billings_list.invoice_not_paid
k.master_flight_log
k.view_status_icon
k.master_flight_log
k.master_flight_log.checked_in
k.master_flight_log.flight
k.master_flight_log.flight_type
k.master_flight_log.flight_type_id
FlightType.where(name: 'Training'
)
ServicedAircraft
ServicedPlane.fist
ServicedPlane.first
Maintenance::ServicedPlane.first
Squawk
Plane.count
Maintenance::ServicedPlane.count
" ".trim
" ".strip
nil.strip
Maintenance::ServicedPlane.count
SchoolInstance.first.subdomain
SchoolInstance.all.collect(&:subdomain)
clear
CourseSection
Maintenance::ServicedPlane
SchoolInstance.find(7).serviced_plane
SchoolInstance.find(7).serviced_planes
Maintenance::ServicedPlane.all_for_school(7)
Maintenance::ServicedPlane.last
Maintenance::ServicedPlane.where(school_instance_id: 7).group_by(:owner_name)
Maintenance::ServicedPlane.where(school_instance_id: 7).grouped_by(:owner_name)
Maintenance::ServicedPlane.where(school_instance_id: 7).group(:owner_name)
Maintenance::ServicedPlane.where(school_instance_id: 7).group(:owner_name).first
Maintenance::ServicedPlane.where(school_instance_id: 7).group(:owner_name)
Maintenance::ServicedPlane.where(school_instance_id: 7).first
Maintenance::ServicedPlane.where(school_instance_id: 7).first.organization
Maintenance::ServicedPlane.where(school_instance_id: 7).first.customer
SchoolInstance.find(7).organizations
SchoolInstance.find(7).organizations.collect(&:serviced_planes)
exit
BackgroundWorker::Maintenance::Checklists::ScheduleRecurringWorker.new
bw = _
bw.perform 1
Maintenance::Checklist.column_names.sort
exit
clear
MasterFlightLog.find 173100
mfl = _
MasterFlightLog.where(reservation_id: nil)
MasterFlightLog.where(reservation_id: nil).count
MasterFlightLog.where(reservation_id: nil).where(school_instance_id: 7)
MasterFlightLog.where(reservation_id: nil).where(school_instance_id: 7).count
MasterFlightLog.where(reservation_id: nil).where(school_instance_id: 7).last
mfl = _
exit
MasterFlightLog.last
mfl = _
pp mfl
mfl
MasterFlightLog.where(reservation_id: nil).each do |mfl|
  mfl.bill!
end
exit!
MasterFlightLog.where(reservation_id: nil).each do |mfl|
  mfl.bill!
end
MasterFlightLog
associated_with MasterFlightLog
MasterFlightLog.first.billing_id
Date.today?
Date.today
'03/21/1983'
Date.parse _
k = _
MasterFlightLog.where('created_at >= ?', _).limit(1)
MasterFlightLog.where('created_at >= ?', _).limit(1).first
MasterFlightLog.where('created_at >= ?', DateTime.parse('03/21/1983')).limit(1).first
MasterFlightLog.where('created_at >= ?', DateTime.new('03/21/1983')).limit(1).first
DateTime.now
DateTime.parse '03/21/1983'
k = _
MasterFlightLog.where('created_at >= ?', k)
MasterFlightLog.where('created_at >= ?', k).first
MasterFlightLog.first.created_at
MasterFlightLog.first
exit
MasterFlightLog.first
MasterFlightLog.where('created_at >= ?', DateTime.new('03/21/1983')).limit(1).first
MasterFlightLog.where('created_at >= ?', DateTime.parse('03/21/1983')).limit(1).first
MasterFlightLog.where('created_at >= ?', DateTime.parse('03/21/1983')).limit(1).first.created_at
MasterFlightLog.where('created_at >= ?', Date.parse('03/21/1983')).limit(1).first.created_at
exit
SchoolInstance.first.subdomain
clear
exit
PlaneSquawk
Maintenance::PlaneSquawk
WorkOrder
Maintenance::WorkOrder
exit
WorkOrder
exit
MasterFlightLog.where('created_at >= ?', Date.parse('09/04/2015'))
mlf = _.first
mlf.school_instance_id
clear
SchoolInstance.current_time
SchoolInstance.current_school
exit
BillingSection::Invoice.last
exit
MasterFlightLog.first
MasterFlightLog.first.plane
MasterFlightLog.first.plane_id
clear
MasterFlightLog.find.total_time
MasterFlightLog.first.total_time
MasterFlightLog.first
MasterFlightLog.first.total_flight_time
MasterFlightLog.first.total_flight_time.to_f
CourseSection
MasterFlightLog.first.class_lesson_tracking
CoursesSection::ClassLessonTracking.last
clt = _
clt.master_flight_log
clt.total_flight_time
clt.total_flight_time = 1
clt.total_flight_time
show-method clt.total_flight_time
clear
CoursesSection::ClassLessonTracking.last
clt = _
clt.valid?
clt.save!
clt.lesson
clt.lesson.stage_id
clear
clt
clt.attributes = {class_id: 4}
clt
mfl
MasterFlightLog.last
mfl = _
fml.lesson_id
mfl.lesson_id
mfl.lesson
clt.lesson_id
clt.course
clt.class
CoursesSection::ClassLessonTracking.find 26402
clt = _
mfl.total_time
mfl.total_flight_time
mfl.total_flight_time.to_f
clt
clt.class_session
clt.class_session_id
mfl.total_flight_time
clear
xit
exit
Maintenance::Interval.first
MaintenanceInterval.first
mi = _
mi.versions
mi.end_time = DateTime.now
mi.saveq
mi.save
mi.reload
mi.versions
exit
PaperTrail::Version.first.htmldiff
MaintenanceInterval.first
MaintenanceInterval.first.versions
MaintenanceInterval.last.versions
MaintenanceInterval.last.versions.htmldif
MaintenanceInterval.last.versions.htmldiff
MaintenanceInterval.last.versions.first.htmldiff
MaintenanceInterval.last.versions.first
Date.today
Maintenance::Checklist.first
Date.today.beginning_of_day
User.where{(name =~ 'Ernie%')}
User.where{(name =~ 'Ernie%')}.first
Profile.where{(name =~ 'Ernie%')}.first
UserProfile.where{(name =~ 'Ernie%')}.first
User.first
User.where{(username =~ 'Ernie%')}.first
User.where{(username =~ 'fucker%')}.first
User.where{(username =~ 'admincsa%')}.first
Maintenance::Checklist.where{( due_on = Date.today)}
Maintenance::Checklist.where{( due_on = Date.today) | (completed_on >= Date.today.beginning_of_day) }
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) }
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) | ture}
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) | ( due_on = Date.today)}
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) | ( due_on = Date.today)}.first
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) | ( due_on = DateTime.today)}.first
Maintenance::Checklist.where{(completed_on >= Date.today.beginning_of_day) | ( due_on >= Date.today)}.first
Maintenance::Checklist.where{(completed_at >= Date.today.beginning_of_day) | ( due_on >= Date.today)}.first
Maintenance::Checklist.first
Maintenance::Checklist.first.due_date
Maintenance::Checklist.where{(completed_at >= Date.today.beginning_of_day) | ( due_date = Date.today)}.first
Maintenance::Checklist.where{(completed_at >= Date.today.beginning_of_day) | ( due_date >= Date.today)}.first
Maintenance::Checklist.where{(completed_at >= Date.today.beginning_of_day) | ( due_date == Date.today)}.first
User.all_instructors_for_scheduler
User.first.scheduler_preference.instructors
exit
Invoice.first.billing
BillingSection::Invoice
BillingSection::Invoice.first.billing
BillingSection::Invoice.first.billing_id
BillingSection::Invoice.first.billing
Billing.first.invoice
BillingSection::Invoice.first.billing
BillingSection::Invoice.all.each do |i|
  return i unless i.billing
end
BillingSection::Invoice.all.each do |i|
  raise i unless i.billing
end
BillingSection::Invoice.all.each do |i|
  raise i.inspect unless i.billing
end
BillingSection::Invoice.find(35)
bi = _
bi.crew_flight?
bi.to_hash
JSON.parse(bi.to_json)
load_factories
FactoryGirl.build(:invoice_no_billing
)
k = _
k.crew_flight?
exit
load_factories
FactoryGirl.build(:invoice_no_billing)
b = _
b.crew_flight?
BillingSection::Invoice.first
BillingSection::Invoice.first.billing
BillingSection::Invoice.first.billing.crew_flight?
Billing
Billing.all.each do |b|
  raise b.inspect if b.crew_flight?
end
clear
exit
Maintenance::Checklist.first
Maintenance::Checklist.first.scheduler
failing.checklist_items
failing.checklist_items.count
failing.checklist_items.first
fi = _
fi.passing?
exit
clear
exit
BackgroundWorker::Maintenance::Checklists::ScheduleGenerator
BackgroundWorker::Maintenance::Checklists::ScheduleGenerator.new
Maintenance::Checklist
BackgroundWorker::Maintenance::Checklists::ScheduleGenerator.new.first.scheduler_id
Maintenance::Checklist.first.scheduler_id
Maintenance::Checklist.column_names.sort
Tracked
Money.new(90)
Money.new(90.00)
m = _
m.to_f
Money.new(90000)
m.to_f
Money.from_amount(30)
Money.from_amount(30, "USD")
cd Money
ls
to_money(600)
self.new.to_money(600)
new(6000)
default'%&$$#:%^(6000)
default'%&$$#:%^(6000'
exit
new(6000).cents
self.new(6000).cents
exit
Money.us_dollar(100)
Money.us_dollar(100).cents
load_factories
FactoryGirl.create(:reservation)
r = _
r z FactoryGirl.create(:reservation)
r = FactoryGirl.create(:reservation)
r = FactoryGirl.create(:plane)
r = FactoryGirl.build(:plane)
r = FactoryGirl.build(:plane)exit
exit
load_factories
r = FactoryGirl.build(:plane)exit
r = FactoryGirl.build(:plane)
exit
load_factories
r = FactoryGirl.build(:plane)
Plane.new
plane = _
plane.valid?
FactoryGirl.build(:plane)
exit!
FactoryGirl.build(:plane)
load_factories
FactoryGirl.build(:plane)
Plane.new
p = _
p.valid?
set_school
p = Plane.new
p.valid?
p.errors
exit
Reservation
Reservation.first.
flight_type
load_factories
FactoryGirl.build(:flight_type)
k = _
k.valid?
k = _
clear
exit
BillingSectionInvoicesHelper
exit
load_factories
lc = FactoryGirl.build(:lab_collective)
lc.last_updated_by
lc = FactoryGirl.build(:stage)
clear
exit
User.find 12660
User.last.id
MasterFlightLog.new
mfl = _
mfl.pre_flight_tenths = 1
mfl.pre_flight_minutes
mfl.pre_flight_minutes = 60
mfl.pre_flight_tenths
mfl.pre_flight_minutes = 6
mfl.pre_flight_tenths
exit!
MasterFlightLog.new
mfl = _
mfl.pre_flight_tenths = 1
mfl.pre_flight_minutes
exit
mfl = MasterFlightLog.new
mfl.pre_flight_minutes = 6
mfl.pre_flight_tenths
mfl.pre_flight_tenths= 1
mfl.pre_flight_minutes
mfl.pre_flight_tenths
exit
mfl = MasterFlightLog.new
mfl.pre_flight_hours=1
mfl.pre_flight_minutes
mfl.pre_flight_hours
reload!
mfl.pre_flight_hours
mfl = MasterFlightLog.new
mfl.pre_flight_hours
exit
{"school_instance_id"=>"7", "date_checked_out"=>"09/01/2015", "date_completed"=>"09/01/2015", "pilot_user_id"=>"10921", "plane_id"=>"", "instructor_user_id"=>"", "course_lesson_tracking"=>{"class_id"=>"", "stage_id"=>"", "lesson_id"=>""}, "begin_hobbs_time"=>"", "end_hobbs_time"=>"", "begin_tach_time"=>"", "end_tach_time"=>"", "total_flight_time"=>"", "ground_lesson_time"=>"1.1", "pre_flight_tenths"=>"1.4", "post_flight_tenths"=>"1.4", "notes"=>"", "admin_notes"=>"", "actual_instrument_time"=>"", "dual_given_received_time"=>"", "day_flight_time"=>"", "night_flight_time"=>"", "cross_country_time"=>"", "complex_time"=>"", "single_engine_time"=>"", "sel_pic_time"=>"", "multi_engine_time"=>"", "mel_pic_time"=>"", "rotocraft_time"=>"", "rotorcraft_pic"=>"", "me_rotorcraft_time"=>"", "me_rotorcraft_pic"=>"", "turbine_time"=>"", "simulator_time"=>"", "simulated_instrument_time"=>"", "oil_added_qts"=>"0", "fuel_added_gallons"=>""}
clear
MasterFlightLog
MasterFlightLog.new
mfl = _
mfl.independent_flight_log
mfl.column_names
MasterFlightLog.column_names
MasterFlightLog.column_names.sort
mfl.save
mfl.erros
mfl.errors
params
params[:master_flight_log]
params[:master_flight_log][:pre_flight_tenths]
mfl.pre_flight_tenths = params[:master_flight_log][:pre_flight_tenths]
exit!
mfl
mfl.pre_flight_tenths
params[:master_flight_log][:pre_flight_tenths]
mfl.pre_flight_minuents
mfl.pre_flight_minutes
mfl.pre_flight_tenths = params[:master_flight_log][:pre_flight_tenths]
mfl.pre_flight_minutes
exit!
exit
mfl = MasterFlightLog.new(pre_flight_tenths: 1.4, post_flight_tenths: 1.6)
mfl.pre_flight_tenths
mfl.pre_flight_minutes
exit!
mfl = MasterFlightLog.new(pre_flight_tenths: 1.4, post_flight_tenths: 1.6)
mf.pre_flight_minutes
mfl.pre_flight_minutes
mfl.post_flight_minutes
mfl.post_flight_tenths
mfl.pre_flight_tenths
mfl
mfl.user
mfl.user_id
mfl.pilot
mfl.pilot_id
mfl.pilot_user_id
MasterFlightLog.new(pilot_user_id: 4).pilot_user_id
MasterFlightLog.column_names.each do |k|
  puts ":{k}"
end
MasterFlightLog.column_names.collect{|k| ":#{k}" }
MasterFlightLog.column_names.collect{|k| ":#{k}" }.join(',')
MasterFlightLog.column_names.collect{|k| ":#{k}" }.join(', ')
exit!
exit!
mfl.errors
mfl.valid?
mfl.errors
params[:master_flight_log][:pre_flight_tenths]
mfl.pre_flight_tenths = params[:master_flight_log][:pre_flight_tenths]
mfl.errors
mfl.valid?
mfl.errors
mfl.pre_flight_minunits
mfl.pre_flight_tenths = 1.4
mfl.pre_flight_minutes
mfl.pre_flight_tenths = "1.4"
mfl.pre_flight_minutes
mfl.pre_flight_tenths = "1.4"
mfl.pre_flight_tenths = "1.4".to_f
mfl.pre_flight_minutes
"".to_f
exit!
mfl.valid?
mfl.errors
load_factories
mfl = MasterFlightLog.new(FactoryGirl.build(:log_flight_no_class))
mfl = MasterFlightLog.new(FactoryGirl.build(:log_flight_no_class)[:master_flight_log])
mfl.changed
mfl = MasterFlightLog.new(FactoryGirl.build(:log_flight_no_class)['master_flight_log'])
mfl.changed
mfl.pre_flight_minutes
mfl.valid?
mfl.errors
mfl.pre_flight_minutes
mfl.valid?
mfl.errors
mfl.independent = true
mfl.valid?
mfl.errors
mfl.pre_flight_minutes is_a? Integer
mfl.pre_flight_minutes is_a?(Integer)
mfl.pre_flight_minutes.is_a?(Integer)
mfl.errors
mfl.reload
mfl
mfl.valid?
mfl.errors
mfl.validate
mfl.validate!
mfl.pre_flight_minutes = mfl.pre_flight_minutes
mfl.post_flight_minutes = mfl.post_flight_minutes
mfl.validate!
mfl.valid?
exit
mfl.pilot_user_id
mfl.pilot
mfl.pilot = @pilot
Pilot.find(1099)
::User.find(1099)
::User.count
Pilot.last
User.last
u = _
u.course_classes
CoursesSection::CourseClass.lsat
CoursesSection::CourseClass.last
CoursesSection::CourseClass.last.pilot
exit
FlightType.find 3
FlightType.all
exit
FlightType.all
params[:reservation][:flight_type_id]
params[:reservation]
@training_flight
exit!
load_factories
FactoryGirl.build(:lesson)
l = _
l.save!
l.last_updated_by
User.find(l.last_updated_by)
FlightType.find 3
FlightType.find 4
FlightType.find 1
FlightType.find 2
exit
Plane.find 121
p = _
p.school_instance_id
set_school(16)
clear
Role.eneric_instructor_roles
Role.generic_instructor_roles
Role.generic_instructor_roles.first.users
Role.generic_instructor_roles.first.joins(users: school_instance_id: 16)
Role.generic_instructor_roles.first.joins(users: { school_instance_id: 16})
Role.generic_instructor_roles.join(users: { school_instance_id: 16})
Role.generic_instructor_roles.joins(users: { school_instance_id: 16})
Role.generic_instructor_roles.joins(users: { school_instance_id: 16}).first
User.where(school_instance_id: 16).collect(:roles).uniq
User.where(school_instance_id: 16).collect(:roles)
User.where(school_instance_id: 16)
User.where(school_instance_id: 16).first
User.where(school_instance_id: 16).first.roles
User.where(school_instance_id: 16).all.collect(:roles).uniq
User.where(school_instance_id: 16).all
User.where(school_instance_id: 16).all.collect{|k| k.roles}
User.where(school_instance_id: 16).all.collect{|k| k.roles}.flatten.uniq
User.where(school_instance_id: 16).first.generic_instructors
User.all_instructors_for_scheduler(User.where(school_instance_id: 16).first, true, 16)
exit
MasterFlightLog.column_names
MasterFlightLog.column_names.sort
MasterFlightLog.first
DateTime.now.beginning_of_day
@user.errors
@profile_template.errors
@user.pilot_profile.validate_all
setup_fields_data(profile_template)
@pilot_profile.valid?
@pilot_profile.errors
@pilot_profile.profile_template_data
@pilot_profile.current_template
ProfileTemplateField
::ProfileTemplateField
@pilot_profile.profile_template_data.first
@pilot_profile.profile_template_data.first.profile_template_field
exit!
AdminSection::AdminPilotProfilesProfileTemplateField.first
field = _
field.profile_template_field
field.profile_template_field.field_label
@user.pilot_profile.validate_all
@pilot_profile.valid?
@pilot_profile.errors
exit
n
self.user.valid?
self.user.save(validate: false)
exit
not_completed
exit
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first.valid?
field.profile_template_field_id).first
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first.profile_template_field
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first.profile_template_field.field_label
self.profile_template_data.where(:profile_template_field_id => field.profile_template_field_id).first
field = _
field.profile_template_field
field.profile_template_field.field_label
exit
exit!
GradeCategoryDomain.first
GradeCategoryDomain.first.to_sql
GradeCategoryDomain.all.limit(1).first
GradeCategoryDomain.limit(1).first
GradeCategoryDomain.limit(1).first.to_sql
GradeCategoryDomain.limit(1).to_sql
GradeDomain.limit(1).to_sql
GradeDomain.by_abv('D').limit(1).to_sql
GradeDomain.by_abvr('D').limit(1).to_sql
GradeDomain.limit(1).to_sql
GradeDomain.limit(1)
GradeDomain.where('abbrev like ?', 'D').limit(1)
GradeDomain.where('abbrev like ?', 'M/D-SP').limit(1)
GradeDomain.where('abbrev like %?%', 'M/D-SP').limit(1)
GradeDomain.where('abbrev like ?', '%M/D-SP%').limit(1)
GradeDomain.where('abbrev like "%?%"', '%M/D-SP%').limit(1)
GradeDomain.where('abbrev like "%?%"', 'M/D-SP').limit(1)
GradeDomain.where('abbrev like "%?%"', 'M/D-SP').limit(1).to_sql
GradeDomain.where('abbrev like "?"', 'M/D-SP').limit(1).to_sql
GradeDomain.where('abbrev like "?"', 'M/D-SP').limit(1)
GradeDomain.where('abbrev like ?', 'M/D-SP').limit(1)
clear
@pilot_profile
exit!
field
field.profile_template_field
field.profile_template_field.name
field.profile_template_field.field_label
field.profile_template_field.field_label.titleize
exit!
@master_flight_log.pre_flight_tenths
@master_flight_log.pre_flight_tenths = params[:master_flight_log][:pre_flight_tenths]
@master_flight_log.pre_flight_minutes
exit!
exit
Timecop
load_factories
require 'timecop'
Timecop
Time.local.now
Time.local
Time.now
Timecop.new('2015-09-15 14:05:31 -0600')
Timecop.freeze(Date.new('2015-09-15 14:05:31 -0600'))
Date.parse('2015-09-15 14:05:31 -0600')
exit
Plane.find(1383)
p = _
p.sync_measuring_devices
p = Plane.find(1383)
p.reload
p.measuring_devices
p.skip_sync_measuring_devices_callback
cd p
sync_measuring_devices
cd ..
MeasuringDevice
cd p
self.name_measuring_device_billing
p.name_measuring_device_billing
column_names
self.class.column_names
self.class.column_names.sort
show-source name_measuring_device_billing
exit!
p = Plane.find(1383)
p. 797   def sync_measuring_devices$                       
exit
plane = Plane.find(1383)
plane.billing_devices
plane.measuring_devices
plane.sync_measuring_devices
plane.measuring_devices
plane.reload
plane.measuring_devices
plane.same_billing_service_device
cd plane
MeasuringDevice.create(plane_id: self.id, purpose: 'Service', skip_sync_plane_devices_callback: true,name: self.name_measuring_device_service, current_hours: self.current_tach_hours,
skip_purpose_validation: true)
self.reload
measuring_devices
billing_device
billing_measuring_device
service_measuring_device
plane.measuring_device
plane.measuring_devices
plane.measuring_device_s
plane.measuring_devices
measuring_devices
exit
Plane.find(1383)
p = _ 
p.service_device_hours
p.service_device_hours.to_i
p.service_device_hours.to_f
exit
Plane.find 1383
p = _
p.billing_device
p.billing_measuring_device
p.sync_billing_and_hobbs_tach_to_devices
p.service_measuring_device
exit
Plane.find 1383
p.service_measuring_device
Plane.find 1383
p = _
p.service_measuring_device
p.sync_billing_and_hobbs_tach_to_devices
p.current_tach_hours
p.sync_billing_and_hobbs_tach_to_devices
exit
p =Plane.find 1383
p.push_hobbs_tach_to_measuring_devices
p.skip_sync_measuring_devices_callback
reload
p.reload
p.push_hobbs_tach_to_measuring_devices
p.skip_sync_measuring_devices_callback
exit
p =Plane.find 1383
p.push_hobbs_tach_to_measuring_devices
exit
p =Plane.find 1383
p.push_hobbs_tach_to_measuring_devices
exit
p =Plane.find 1383
p.push_hobbs_tach_to_measuring_devices
clear
Plane.column_name
Plane.column_names
Plane.column_names.sort
MeasuringDevice
exit
load_factories
exit
FactoryGirl.create(:pilot)
exit
SchoolInstance.new
si = _
si.save
show-routes
clear
Maintenance::Checklist.last.completed_at
exit
exit
SchoolInstance.where(subdomain: 'libertysim')
si  = _
si.id
si.first.id
Maintenance::Checklist.where(school_instance_id: 45)
Maintenance::ChecklistItems
Maintenance::ChecklistItem
Maintenance::ProcedureHistory
Maintenance::ProcedureHistorie
Maintenance::ProcedureHistories
Maintenance::Procedureclear
clear
exit
'histories'.singluarize
'histories'.pluralize
'history'.pluralize
Maintenance::Checklist.first
Maintenance::Checklist.group_by(:school_instance_id)
Maintenance::Checklist.group(:school_instance_id)
Maintenance::Checklist.group(:school_instance_id).first
Maintenance::Checklist.all.group_by($:school_instance)
Maintenance::Checklist.all.group_by(&:school_instance)
k = _
k.first
k.keys
exit
MeasuringDevice.first
p = _
p = _.plane
Plane.find 207
plane = _
plane.measuring_devices
plane.measuring_devices_histories
plane.measuring_devices.first
associated_with _
_.measuring_device_histories
plane.measuring_devices.first.measuring_device_histories
exit!
Plane.find(207).measuring_devices.first.measuring_device_history
Plane.find(207).measuring_devices.first.measuring_device_histories
Plane.find(207).measuring_devices_histories
Plane.find(207).measuring_device_histories
Plane.find(207).measuring_devices_histories
exit
clear
Plane.find(207).measuring_device_histories
eixt
exit
Plane.find(207).measuring_devices.first
exit
MasuringDevice
MeasuringDevice.first
MeasuringDeviceHistory
MeasuringDevice
Plane.first.measuring_device_histories
MeasuringDeviceHistory.count
MeasuringDeviceHistory
MeasuringDevice
exit
MeasuringDeviceHistory
MeasuringDevice
exit
MeasuringDeviceHistory
MeasuringDevice.last.current_hours
MeasuringDevice.last.current_hours.to_f
MeasuringDevice.last.plane
exit
Plane.find(378)
plane = _
plane.billing_measuring_device
MeasuringDeviceHistory.lst
MeasuringDeviceHistory.last
MeasuringDeviceHistory.last.update_at
MeasuringDeviceHistory.last.updated_at
MeasuringDeviceHistory.last.updated_at.strftime("%A, %b %d")
MeasuringDeviceHistory.last.updated_at
exit
Plane
Plane.first.current_maintenance_interval
Plane.first.current_maintenance_interval_id
Time.local
Time.local.now
Time.now.local
Time.now
MaintenanceIntervalsHelper
MaintenanceInterval
2.hours.ago
2.hours.from_now
exit
Plane.find 15
plane = _
plane.maintenance_intervals
plane.maintenance_intervals.current_intervals
plane.maintenance_intervals.current_intervals.first
plane.current_maintenance_interval
exit!
plane.current_maintenance_interval
plane = Plane.find 15
plane.current_maintenance_interval
SchoolInstance
clear
AirworthinessDirective
AirworthinessDirective.last
k = _
k.tach_hrs_last_check
k.measuring_device
p = Plane.find(15)
p.airworthiness_directives
p.airworthiness_directives.first.completed?
p.airworthiness_directives.first
p.airworthiness_directives.first.column_names
p.airworthiness_directives.class.first.column_name
p.airworthiness_directives.class.first.column_names
p.airworthiness_directives.first.class.column_names
clear
exit
Maintenance::OverflightPrevention
AirworthinessDirective
AirworthinessDirective.column_names
reload!
AirworthinessDirective.column_names
exit
clear
AirworthinessDirective
Plane.first.current_billing_hours
Plane.first.column_names
Plane.column_names
clear
exit
Flight::CheckoutValidations
Flight::CheckoutValidations.validates_airworthiness_directives
Flight::CheckoutValidations.new.validates_airworthiness_directives
clear
exit
class SpecValidate < Flight::CheckoutValidations
end
class SpecValidate
  include Flight::CheckoutValidations
end
SpecValidate.new.validates_airworthiness_directives
checklists
expect(checklists).to be_empty
expect(checklists).to be_falsy
expect(checklists).to be_empty
exit
[{a: 1}] + [{b: 1}]
[{a: 1}] + [{b: 1}, {c:1}]
SchoolInstance.first
Date.yesterday
1.week.from_now
clear
Plane.first.airworthiness_directives.collect do |k| 
  k
end
k = double(end_time: Time.now)
load_factories
double
require 'rspec'
double
current_school.overflight_prevention
@school.overflight_prevention
exit!
SchoolInstance.current_sc
SchoolInstance.current_school
SchoolInstance.current_school.overflight_prevention
SchoolInstance.current_school.overflight_prevention.hours_before_interval
SchoolInstance.current_school.overflight_prevention.hours_before_interval.to_f
exit!
checklists
ad.date_check_due
current_school.overflight_prevention.hours_within_margin?(ad)
@school.overflight_prevention.hours_within_margin?(ad)
@school
school
SchoolInstance.current_school.overflight_prevention.hours_within_margin?(ad)
SchoolInstance.current_school
current_school.overflight_prevention.hours_within_margin?(ad)
SchoolInstance.current_school.overflight_prevention.hours_within_margin?(ad)
ad.days_before_check
ad.days_until_check
ad.days_until_check > SchoolInstance.current_school.overflight_prevention.date_within_margin?(ad)
ad.days_until_check > SchoolInstance.current_school.overflight_prevention.days_before_interval
SchoolInstance.current_school.overflight_prevention.days_within_margin?(ad)
SchoolInstance.current_school.overflight_prevention.date_within_margin?(ad)
exit!
SchoolInstance.current_school.overflight_prevention.hours_within_margin?(ad)
clear
ad.date_check_due?
ad.date_check_due
exit
ad.date_check_due
next
exit!
ad
ad.days_until_check
days_before_interval
next
exit
ad.days_until_check
days_before_interval
exit
ad.days_until_check
ad
show-stack
up
exit!
ad.flight_hrs_until_check
ad.flight_hrs_until_check.to_f
exit!
Dir['./**/*.rb'].each{|f| x = File.read(f); File.write(f, x.gsub(/[ \t]+$/,"")) }
files = Dir['./**/*.rb']; files.each{|f| x = File.read(f); File.write(f, x.gsub(/[ \t]+$/,"")) }
q
clear
set_school
set_school 7
Maintenance::OverflightPrevention.new(school_instance_id: 7)
k = _
k.save!
k.reload
exit
set_school 7
Maintenance::OverflightPrevention.create
k = _
k.reload
k.hours_before_interval.to_f
AirworthinessDirective.first
k = _
a = 'fucker'
a += 'eachit'
self
self.hours_before_interval
self.hours_before_interval.to_f
ad.flight_hrs_until_check
ad.flight_hrs_until_check.to_f
exit
days_before_interval
ad.days_until_check
ad.hours_until_check
exit
ad.completed?
(ad.flight_hrs_until_check)
exit
ad.completed?
ad.days_until_check
ad.due_date
ad.date_due
ad.date_check_due
exit
hours_check_due
hours_check_due.to_f
AirworthinessDirective
exit
exit
User.first
u = _
u.roles
Role.first
Role.first.users
Role.first.users.first
u = _
u.roles
u.role_names
u.roles
u.roles_names
exit
SchoolInstance.all.each do |s|
  Maintenance::OverflightPrevention.create
end
SchoolInstance.all.each do |s|
  Maintenance::OverflightPrevention.create(school_instance_id: s.id)
end
clear
AirworthinessDirective
clear
exit
{a: 1}.merge({b: 2})
{b: 1}.merge({b: 2})
exit
#
MasterFlightLog.last
mfl = _
mfl.pilot
mfl.instructor
mfl.instructors
mfl.instructor
mfl.checked_in?
exit
User.first.
role_names
User.first.role_name
User.first.role_names
exit
Maintenance::OverflightPrevention
checklists
exit!
validator.checklists
validator.checklist
next
exit
checklists
checklists.flatten
exit!
checklists
checklists.flatten
.first
exit!
@checklist
c
validator.checklist
c
MasterFlightLog.first
mfl = _
mfl.partial_checkin
checklists
mfl.partial_check_in
MasterFlightLog.where('partial_check_in IS NOT ?', nil)
MasterFlightLog.where('partial_check_in IS NOT ?', nil).first
MasterFlightLog.where('partial_check_in IS NOT ?', nil).first.partial_check_in
checklists.flatten.first[:passed]
exit
mfl.partial_check_in
mfl.partial_check_in?
exit
checklists
exit
checklists
n
c
checklists
expect(checklists).to be_nil
exit
checklists
checklists.last
checklists.last[:passed]
exit
SchoolInstance.column_names.sort
SchoolInstance.first.
allow_currency_limit
exit
MasterFlightLog.first.partial_checked_in?
MasterFlightLog.first.partial_check_in?
clear
exit
Date.today
Date.today - 1.day.from_now
(Date.today - 1.day.from_now)
(Date.today - 1.days.from_now)
Date.today - (1.days.from_now)
1.days.from_now
1.days.from_now - Date.today
1.days.from_now - DateTime.now
(1.days.from_now - DateTime.now).to_31^s
(1.days.from_now - DateTime.now).to_days
Date.today
Date.today - (Date.today + 1.day)
(Date.today - (Date.today + 1.day))
Date.today + 1.day
k = _
Date.today - k
k -Date.today 
(k - Date.today ).to_i
gdate
date
exit
plane.next_annual_due_date
exit
User.first.phone_number
User.first.phonenumber
UserProfile
MasterFlightLog
MasterFlightLog.flight_type
MasterFlightLog.first.flight_type
MasterFlightLog.last.flight_type
MasterFlightLog.last.flight_type.is_crew?
MasterFlightLog.last.flight_type_id
Reservation.first.pilot
Reservation.first.user
Reservation.find 318868
r = _
ru.user
r.user
exit
PlaneSqawk
PlaneSquawk
PlaneSqwack
ps = _.first
ps.should_be_downed
ps.active
ps.inactive
ps.plane_id
ps.plane
plane = _
plane.maintenance_program
plane.maintenance_program_name
plane.maintenance_program
plane.next_annual_due_date
MaintenanceInterval
MaintenanceInterval.first
mx = _
mx.genesis
mx.genesis = PlaneSqwack.first
mx.save!
mx.genesis
mx.genesis_type
mx.genesis.class.name
exit
MaintenanceInterval.first.plane
DateTime.now
Reservation
Reservation.find 298521
k = _
k.plane
k.plane.service_device_hours
k.plane.service_device_hours.to_f
k.plane.next_100hr_service_due
k.plane.next_100hr_service_due.to_f
k.plane
k.plane.school_instance
clear
DateTime.now
DateTime.now.end_of_day
exit
Plane
Plane.where(same_billing_service_device: true).first
Plane.where(same_billing_service_device: true).first.school_instance
Plane.where(same_billing_service_device: true).first.id
Plane.where(same_billing_service_device: true, school_instance_id: 5).count
Plane.where(same_billing_service_device: true, school_instance_id: 5).collect(&:id)
Plane.where(same_billing_service_device: true, school_instance_id: 5)
clear
exit
CourseClasses
CourseClasse
CourseClass
Course.first
Course.first.course_classe
Course.first.course_classes
User.first.course_classes
File.read('branches_list.txt')
clear
exit
load_factories
FactoryGirl.build(:user)
cd Plane
show-method with_tail_number
with_tail_number('1')
exit!
SquawkMaintenanceInterval.first
MaintenanceInterval.first
exit
SquawkMaintenanceInterval.build_interval
exit
SquawkMaintenanceInterval.build_interval
exit
Plane.first
plane = _
plane.create_current_squawk_maintenance_interval!(false)
exit
Plane.first.create_current_squawk_maintenance_interval!(false)
Plane.last.create_current_squawk_maintenance_interval!(false)
clear
Maintenance::Checklist.to_s
exit
Plane.find 1513
plane = _
plane.maintenance_intervals
plane.maintenance_intervals.count
plane.squawk_maintenance_intervals.count
plane.maintenance_intervals.delete_all
clear
plane.maintenance_intervals.delete_all
plane.maintenance_intervals.reload
plane.maintenance_intervals.delete_all
exit
{a: 1, b: 2}
h = _
h.has_key(:a)
h.keys
h.keys.include?(:a)
exit
SchoolInstance.all.each do |s|
  Maintenance::OverflightPrevention.create(school_instance_id: s.id)
end
clear
Plane.all.each do |p|
  p.sync_measuring_devices
end
clear
exit
PlaneSqwacks.first
PlaneSqwack.first
PlaneSqwack.first.deferral_days
PlaneSqwack.column_names
PlaneSqwack.column_names.sort
PlaneSquawkStatus.all
[1].include?(2)
MaintenanceInterval.column_names
SquawkMaintenanceInterval
SquawkMaintenanceInterval.first.plane
exit
Plane.find 3(5)
Plane.find(35).maintenance_intervals.delete_all
Plane.find(35).squawk_maintenance_intervals.delete_all
clear
Plane.find(110).maintenance_intervals.delete_all
Plane.find(110).squawk_maintenance_intervals.delete_all
PlaneSqwacks
PlaneSqwack
DateTime.now
ps
@plane_sqwack
@plane_sqwack.update_attributes(params[:plane_sqwack])
@plane_sqwack.errors
exit
PlaneSqwack.
table_name
PlaneSqwack.column_names
PlaneSqwack.column_names.sort
Plane.find(110).squawk_maintenance_intervals.delete_all
Plane.find(110).maintenance_intervals.delete_all
exit
BackgroundWorker::Maintenance::Intervals::ReleaseSquawkIntervalWorker.perform(1044)
BackgroundWorker::Maintenance::Intervals::ReleaseSquawkIntervalWorker.new.perform(1044)
exit
BackgroundWorker::Maintenance::Intervals::ReleaseSquawkIntervalWorker.new.perform(1044)
exit
BackgroundWorker::Maintenance::Intervals::ReleaseSquawkIntervalWorker.new.perform(1044)
plane
Plane.first.next_annual_due_date
exit
nil > 1
MeasuringDevice
MeasuringDevice.first.end_hours
exit
SchoolInstnace.first.overflight_prevention
SchoolInstance.first.overflight_prevention
MaintenanceIntervalsHelper
MaintenanceInterval
Maintenance::ChecklistSchedule
reload!
Maintenance::ChecklistSchedule.with_execution_time
Date.today
params = {"utf8"=>"✓",
  "authenticity_token"=>"IvKcFkioGtzGT5kqqhvdy+jtvCtYeTEFVTDj2uws9Rc=",
  "commit"=>"Update",
  "maintenance_interval"=>{"id"=>"6725",
    "plane_id"=>"1383",
    "type"=>"MaintenanceInterval",
    "start_time"=>"10/09/2015 9:50 AM",
    "end_time"=>"10/16/2015 11:00 AM",
  "interval_type"=>"maintenance"},
"id"=>"1383"}
params.keys.include?(:maintenance_interval)
Maintenance::Checklist.delete_all
clear
BackgroundWorker
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker
bw = _
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal
k = _
k.first.id
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.new.perform(253)
k.first
checklist = _
plane = checklist.plane
checklist.active?
checklist.scheduler.active?
checklist.scheduler
checklist.scheduler.daily?
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.count
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.each do |ck|
  ck
end
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.each do |checklist|
  puts MaintenanceInterval.where(genesis_id: checklist.id, genesis_type: checklist.class.name).first
end
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.each do |checklist|
  k = MaintenanceInterval.where(genesis_id: checklist.id, genesis_type: checklist.class.name).first
  puts "k is " + k.inspect
end
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.first
mx = _
mx.checklist
mx.scheduler.active?
MaintenanceInterval.delete(6729)
clear
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.each do |checklist|
  puts "ck: "+ ck.id
end
Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.each do |checklist|
  puts checklist
end
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_overdue_checklists!
exit
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_overdue_checklists!
::Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal
::Maintenance::Checklist.with_maintenance_start_times.due_on(Date.today).non_terminal.count
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.new.perform(254)
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.new.perform(253)
exit
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.new.perform(253)
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.new.perform(254)
ServicedPlane
Serviced
Maintenance::ServicedPlane
Plane
Plane.first.billing
Plane.first
plane = _
plane
plane.leases
plane.lease
exit
Plane.first
associated_with _
SchoolInstance
set_school
set_school(7)
SchoolInstance.current_school.planes.collect{|p| p.biling_orginazation}
exit
SchoolInstance.current_school.planes.collect{|p| p.biling_orginazation}
set_school(7)
SchoolInstance.current_school.planes.collect{|p| p.billing_orginazation}
SchoolInstance.current_school.planes.collect{|p| p.billing_organization }
reload!
SchoolInstance.current_school.planes.collect{|p| p.billing_organization }
exit
set_school(7)
SchoolInstance.current_school.planes.collect{|p| p.billing_organization }
Plane.first.owner_associate
Lease
associated_with Lease
Lease.first.owner.name
nil.merge([:fuck])
AirworthinessDirective
Plane.first.notification_emails
Plane.first
Plane.column.names.sort
Plane.column_names.sort
Plane.first
k = _
Plane.find 1518
plane = _
plane.duplicate_notification_emails!
exit
Plane.find(1518).duplicate_notification_emails!
Plane.find(15)
plane = _
plane.plane_type
plane.plane_type.plane
plane.plane_type.aircraft_template
Plane.find(1518).duplicate_notification_emails!
exit
Plane.find(1518).duplicate_notification_emails!
clear
MasterFlightLog
MasterFlightLog.column_names
MasterFlightLog.column_names.sort
MasterFlightLog.last
mfl.end_hobbs_time
MasterFlgihtLog.first
MasterFlightLog
MasterFlightLog.first
mfl = _
mfl.end_hobbs_time
mfl.end_hobbs_time.to_f
mfl = MasterFlgihtLog.find 246870
mfl = MasterFlightLog.find 246870
mfl.end_hobbs_time
mfl.end_hobbs_time.to_f
MasterFlightLog.first
MasterFlightLog.find 246872
mfl = _
MasterFlightLog.column_names.sort
clear
Plane.first.is_simulator?
exit
Plane.first.category_type
Plane.first.category
CategoryType
PlaneType
PlaneType.all
clear
Plane.find(1520).sync_measuring_devices
Plane.find(1520)
plane = _
plane.current_hobbs_hours = 0
plane.current_tach_hours = 0
plane.sync_measuring_devices
plane.current_hobbs_hours = 0.0
plane.current_tach_hours = 0.0
plane.sync_measuring_devices
plane
plane.category_type
DeviceLog
MeasuringDeviceLog
MasterFlightLog
MasterFlightLog.first.device_logs
MasterFlightLog.first.device_log
MasterFlightLog.first.plane_device_log_time
MasterFlightLog.first.plane_device_log_times
MasterFlightLog.first.plane_device_log_times.first
PlaneDeviceLogtime.first
PlaneDeviceLogTime.first
PlaneDeviceLogTime
set_school(7)
PlaneDeviceLogTime.first
device = _
device.plane
device.master_flight_log.plane
MeasuringDevice
PlaneDeviceLogTime.first
MeasuringDevice
MeasuringDevice.plane
1.is_a?(MeasuringDevice)
MeasuringDevice.first.plane
MeasuringDevice.first
MeasuringDevice.first.plane_id
Plane.find(MeasuringDevice.first.plane_id)
Customer
Maintenance::Customer.first
Maintenance::Customer
exit
LoggedTasks
LoggedTask
Maintenance::ServicedPlane.first
Maintenance::ServicedPlane.first.logged_tasks
Maintenance::ServicedPlane.first.logged_tasks.first
Plane.all.each do |p|
  Maintenance::ServicedPlane.self.create_for_plane!(p)
end
Plane.all.each do |p|
  Maintenance::ServicedPlane.create_for_plane!(p)
end
exit
Plane.all.each do |p|
  Maintenance::ServicedPlane.create_for_plane!(p)
end
clear
Maintenance::WorkOrder
Maintenance::WorkOrder.first.tail_number
Maintenance::WorkOrder.first
exit
WorkOrder.find 1
Maintenance::WorkOrder.find 1
ServicedPlane.find 1
Maintenance::ServicedPlane.find 1
exit
Maintenance::WorkOrder.find 1
wo = _
wo.plane_tail_number
wo.serviced_plane
Maintenance::ServicedPlane.find(1)
Maintenance::ServicedPlane.find(1).plane
Maintenance::ServicedPlane.find(1).plane_tail_number
Plane.where(tail_number: Maintenance::ServicedPlane.find(1).plane_tail_number)
exit
Maintenance::WorkOrder.find s
Maintenance::WorkOrder.find 2
wo = _
Maintenance::ServicedPlane.find 70
sp = _
Plane.where(tail_number: sp.plane_tail_number)
Maintenance::WorkOrder.find 3
Maintenance::WorkOrder.find(3).school_instance
Maintenance::WorkOrder.find([2, 3, 4, 5, 6, 7, 8]).collect(&:school_instance_id).uniq
SchoolInstance.find 38
SchoolInstance.find 22
SchoolInstance.find 8
Maintenance::WorkOrder.find([2, 3, 4, 5, 6, 7, 8]).where(school_instance_id: 8)
Maintenance::WorkOrder.find([2, 3, 4, 5, 6, 7, 8])
Maintenance::WorkOrder.where(id: [2, 3, 4, 5, 6, 7, 8]).where(school_instance_id: 8)
wo = _.first
wo.serviced_plane
Maintenance::ServicedPlane.find(wo.serviced_plane_id)
sp = _
exit
Reservation.where({start_time >= DateTime.now})
Reservation.where({(start_time >= DateTime.now) & (end_time >= DateTime.now)})
Reservation.where{(start_time >= DateTime.now) & (end_time >= DateTime.now)}
start_time = DateTime.now
Reservation.where{(start_time >= start_time) & (end_time >= DateTime.now)}
Reservation.where{(start_time >= start_time) & (end_time >= DateTime.now)}.to_sql
Reservation.where{(start_time >= DateTime.now) & (end_time >= DateTime.now)}.to_sql
Reservation.where({(start_time >= DateTime.now) & (end_time >= DateTime.now)}).to_sql
clear
exit
Plane.first.billing_organization_id
Plane.first.billing_organization
Plane.first
Plane.column_names
Plane.column_names.sort
exit
MasterFlightLog.find 246620
mfl = _
mfl.begin_hobbs_time
mfl.begin_hobbs_time.to_f
mfl.end_hobbs_time.to_f
MasterFlightLog.find 246607
mfl = _
MasterFlightLog.column_namess.sort
MasterFlightLog.column_names.sort
mfl.checked_in
Maintenance::Task
Maintenance::Task.first.work_order
exit
WorkOrder.coumn_names.sort
Maintenance::WorkOrder.coumn_names.sort
Maintenance::WorkOrder.column_names.sort
Plane.first
p = _
p.current_hobbs_hours
field = "begin_hobbs_time"
field =~ "hobbs"
field ~= "hobbs"
field =~ "hobbs"
field.match('hobbs')
field.match('hobbs') == true
p.current_tach_hours
Plane.column_names.sort
Plane.first.service_device
Plane.first.meters
Plane.first.device_meters
associated_with Plane
Plane.first.measuring_devices.first.class.column_names
clear
Plane.first
plane = _
plane.check_in
plane.check_in?
plane.current_aircraft_location
plane.reservation
plane.reservations
exit
Plane.first.reservations.checked_out
Plane.first.reservations.checked_out.first
Reservation
Reservation.column_names
Reservation.column_names.sort
Reservation.first.status
reload!
Plane.first.reservations.checked_out.first
Plane.first.reservations.checked_out.count
clear
exit
Plane.find 532
serviced_plane_id = 532
Reservation.for_plane(serviced_plane_id).checked_out.count
Maintenance::WorkOrder
clear
Plane.first
Plane.first.validate
Plane.first.validates
Plane.first.valid?
Maintenance::WorkOrder.first.aircraft_checked_in
Plane.find 532
plane = _
Reservation.aircraft_checked_out?(plane.id)
reload
exit
Reservation.aircraft_checked_out?(532)
clear
show-stack
up
exit
c
{a: 1}.merge({b: 2})
nil.empty?
nil.blank?
[].blank?
interval
exit!
[nil, 1, 2].compact
exit
PaymentAccount.all.collect{|pa| pa if pa.user.nil? }
PaymentAccount
clear
exit
SchoolInstance.all.collect{|k| [k.id, k.name]}
SchoolInstance.first
SchoolInstance.all.collect{|k| [k.id, k.school_name]}
SchoolInstance.find 22
SchoolInstance.find 7
clear
exit
Plane.column_names.sort
AirworthinessDirectivesHelper
clear
exit
AirworthinessDirective.last
exit
AirworthinessDirective.column_names
AirworthinessDirective.column_names.sort
AirworthinessDirective.last
AirworthinessDirective.last.plane
AirworthinessDirective.last.plane.cycles_since_start
ad = AirworthinessDirective.last; ad.current_airframe_cycles = plane.cycles_since_start
ad = AirworthinessDirective.last; ad.current_airframe_cycles = ad.plane.cycles_since_start
ad.save!
ad.save(validate: falsep
ad.save(validate: false)
clear
Plane.first
Plane.column_names.sort
@plane.valid?
c
exit
return true
c
exit!
exit
Reservation.aircraft_checked_out?(29)
Reservation.checked_out(29)
Reservation.for_plane_id(plane_id).checked_out
plane_id = 29
Reservation.for_plane_id(plane_id).checked_out
Reservation.for_plane_id(plane_id).checked_out.first.master_flight_log
mfl = _
mfl.end_tach_time = 3669.4
mfl.save!
self.dirty
self.changed
exit!
[1].include?(2
)
mlf = MasterFlightLog.fist
mlf = MasterFlightLog.first
mfl.contract_id = 1
mfl.dirty
mfl.changed
mfl.contract_id_change
mfl.contract_id_was
mfl.contract_id
WorkOrder
Maintenance::WorkOrder
exit
Maintenance::WorkOrder
Maintenance::WorkOrder.column_names
Maintenance::WorkOrder.column_names.sort
exit
MeasuringDeviceHistories.incomplete
MeasuringDeviceHistory.incoimplete
MeasuringDeviceHistory.incomplete
exit
Maintenance::WorkOrder.column_names.sort
AirworthinessDirective
AirworthinessDirective.column_names.sort
MeasuringDeviceHistoy
MeasuringDeviceHistory
exit
MeasuringDeviceHistory
MeasuringDeviceHistory.incomplete
Reservation.fist
Reservation.first
Reservation.first.pilot
Reservation.first
Reservation.first.master_flight_log
Reservation.first.pilot
Reservation.first.pilot_user
Reservation.first.user
Reservation.first.user.full_name
Reservation.first
Reservation.first.start_time
Maintenance::WorkOrder.column_names.sort
Maintenance::WorkOrder.first.customer_type
exit
Maintenance::WorkOrder.first.billing_type
cd Reservation
show-method checked_out
exit
show-method checked_out
Reservation.checked_out.to_sql
exit
show-method checked_out
cd Reservation
show-source checked_out
Reservation.checked_out.where(plane_id: 1623)
Reservation.checked_out.where(plane_id: 1623).to_sql
MeasuringDevice
MeasuringDeviceHistory
Maintenance
Maintenance::WorkOrder
Maintenance::WorkOrder.column_names.sort
Maintenance::WorkOrder.first
Maintenance::WorkOrder.first.history
Maintenance::WorkOrder.first.audit
Maintenance::WorkOrder.first.versions.last.whodunnit
Maintenance::WorkOrder.last.versions.whodunnit
Maintenance::WorkOrder.last.versions
Maintenance::WorkOrder.last.versions.whodunnit
Maintenance::WorkOrder.last.versions.last.whodunnit
versions
versions.last
versions.last.whodunnit
exit
device
c
current_user_id
exit
MeasuringDeviceHistories
MeasuringDeviceHistory
MeasuringDeviceHistory.column_names.sort
mdh.valid?
mdh.save!
exit
mdh.valid?
mdh.save!
exit
cd ..
Maintenance::WorkOrder.find 394
wo = _
wo.serviced_plane.school_instance
Plane.column_names.sort
Hclear
clear
Plane.first.plane_type
Plane.first.organization
Maintenance::WorkOrder
Plane.find 378
plane = _
plane.organization
plane.type
plane.plane_type
plane.category
plane.category_type
exit
Maintenance::WorkOrder.column_names.sort
MeteringDevice
MeasuringDevice
MeasuringDevice.first.plane
WorkOrder::
cd WorkOrder
cd Maintenance::WorkOrder
ll
STATUS_TYPES
::STATUS_TYPES
exit
Maintenance::WorkOrder::STATUS_TYPES
exit
MeasuringDeviceHistory.last
mdh = _
mdh.work_order
wo = _
wo.measuring_device_histories
wo.measuring_device_histories.count
wo.measuring_device_histories.last.measuring_device
wo.measuring_device_histories.last
Maintenance::WorkOrder.find 395
wo = _
wo.plane
wo.serviced_plane_id
wo.measuring_device_histories.last
k = _
k.previous_hours.to_f
k.previous_hours = 406.6
k.save
show-routes
exit
MeasuringDeviceHistory.find 883
mdh = _
mdh.updated_hours = nil
mdh.svae
mdh.save
exit
MeasuringDeviceHistory.find 883
mh = _
mh.save
mh.work_order
mh.work_order.measuring_device_histories
mh.work_order.measuring_device_histories.each do |h|
  h.save
end
clear
Maintenance::WorkOrder
Maintenance::WorkOrder.colum_names.sort
Maintenance::WorkOrder.column_names.sort
Maintenance::WorkOrder.find 396
wo = _
wo.valid?
exit
Maintenance::WorkOrder.find 396
wo = _
wo.valid?
exit
Maintenance::WorkOrder.find 396
wo = _
wo.valid?
exit
Maintenance::WorkOrder.find 396
wo = )
wo = Maintenance::WorkOrder.find 396
wo.valid?
wo.errors
exit
wo = Maintenance::WorkOrder.find 396
wo.valid?
{a: 1}.merge({a: 2})
{a: 2}.merge({a: 1})
associated_with Maintenance::WorkOrder
MeasuringDeviceHistory
associated_with MeasuringDeviceHistory
MeasuringDevice
Maintenance::WorkOrder
Maintenance::WorkOrder.first
wo = _
wo.name
wo.class.name
wo.class.name.underscore
AirworthinessDirective
exit
AirworthinessDirective.first
AirworthinessDirective.first.a_d_number
AirworthinessDirective.column_names.sort
MeasuringDevice.last
MeasuringDevice.last.measuring_device_histories
Plane.first.is_simulator?
AirworthinessDirective.first
ad = _
ad.plane
plane.current_cycles
AirworthinessDirective
AirworthinessDirective.column_names
AirworthinessDirective.column_names.sort
Plane.first.cycles_since_start
[false, true].all?
![false, true].all?
checks
checks.all?
!checks.all?
exit!
c
exit!
AirworthinessDirective.column_names.sort
exit
AirworthinessDirective.column_names.sort
nil.blank
nil.blank?
AirworthinessDirective.column_names.sort
self
self.date_last_check
self.changed?
self.date_last_check.changed?
exit
AirworthinessDirective.first
ad = _
ad.date_last_check = nil
ad.chaned?
ad.changed?
ad.changed
ad.date_last_check_changed?
AirworthinessDirective
AirworthinessDirective.sort
AirworthinessDirective.column_names.sort
Maintenance::OverflightPrevention
Maintenance::OverflightPrevention.table_name
exit
ad.days_until_check
exit
AirworthinessDirective
AirworthinessDirective.first.school_instance_id
exit
SchoolInstance.column_names
SchoolInstance.column_names.sort
exit
associated_with Plane
AirworthinessDirective.column_names.sort
20 * 0.1
(20 * 0.1).to_i
Plane.colum_names.sort
Plane.column_names.sort
Maintenance::OverflightPrevention
clear
exit
AirworthinessDirective
[[1],[2,3]].flatten
[[1],[2,3], nil].flatten
[[1],[2,3], nil].compact
[[1],[2,3], nil].flatten!
clear
c
exit
Plane.first
Plane.work_orders
Plane.first.work_orders
Maintenance::WorkOrder::STATUS_TYPES[3]
Maintenance::WorkOrder::STATUS_TYPES[3..-1]
Maintenance::WorkOrder
git branch
exit
User.first.roles
exit
Role.standard_roles
set_school
Role.standard_roles
Role.standard_roles.count
Role.standard_roles.uniq
Role.standard_roles.uniq.count
Role.standard_roles.sort
set_school(7)
Role.standard_roles.uniq.count
Role.standard_roles.uniq.sort
Role.standard_roles.uniq
exit
User.find 10055
user = _
user.roles
user.is?(:pilot)
Plane.find 1773
p = _
p.billing_organization
p.billing_organization_id
p.billing_organization
p.organization
bo = _
bo.planes
bo.planes.count
bo.serviced_planes.count
bo.serviced_planes
k = "- Director of Maintenance/Part 145 Accountable Manager
- Maintenance Supervisor
- Inspector
- Return to Service authority (Part 145)
- Airframe Mechanic
- Powerplant Mechanic
- Repairman
- Parts/Tool Manager
- Parts Technician
- Tools Technician
- MX Admin Aircraft Records
- Line Service
- Admin
- Back Office Admin"
k.split('- ')
k.split('- ').gsub('\n', '')
k.gsub('\n', '')
k.gsub('\n', '').split('- ')
k.gsub("\n", '').split('- ')
k.gsub("\n", '').split('- ').compact
exit
Role.maintenance_roles,
Role.maintenance_roles
Role.maintenance_roles.count
Role.maintenance_roles.count.uniq
Role.maintenance_roles.uniq
Role.maintenance_roles.uniq.count
Role.maintenance_roles.uniq.collect{|k| k.name }
exit
Role.maintenance_roles.uniq.collect{|k| k.name }
set_school(7)
Role.maintenance_roles.uniq.collect{|k| k.name }
Role.maintenance_roles.uniq.collect{|k| [k.name, k.id] }
Role.global_rols
Role.global_roles
reload!
Role.global_roles
Role.where('school_instance_id is null')
reload!
Role.global_roles
clear
Role
Role.system_roles
exit
load_factories
FactoryGirl.build :work_order 
set_school
FactoryGirl.build :work_order 
exit
Maintenance::RoleManagement
exit
Maintenance::RoleHierarchy
Maintenance::RoleHierarchy::ROLE
::Maintenance::RoleHierarchy::ROLE
exit
::Maintenance::RoleHierarchy::ROLE
exit
::Maintenance::RoleHierarchy::ROLE
::Maintenance::RoleHierarchy::MX_ROLE
::Maintenance::RoleHierarchy::MX_ROLES
Role.system_roles
Role.system_role
Role.maintenance_role
Role.standard_roles
::Maintenance::RoleHierarch.director_of_maintenance
::Maintenance::RoleHierarchy.director_of_maintenance
reload!
::Maintenance::RoleHierarchy.director_of_maintenance
reload!
::Maintenance::RoleHierarchy.director_of_maintenance
reload!
::Maintenance::RoleHierarchy.director_of_maintenance
reload!
::Maintenance::RoleHierarchy.director_of_maintenance
clear
User.first
u = _
u.roles
Role.first
Role.first.users
role = Role.first
user = role.users.first
add_role
Bool(add_role)
Boolean(add_role)
add_role?
!!add_role
!add_role
!"false"
exit
JSON.parse("true")
JSON.parse(add_remove: "true")
clear
add_role
exit!
add_role
exit
[nil, 1].compact
exit
Maintenance::Role::MX_ROLES.collect{|k| k[:name]}
Maintenance::RoleHierarchy::MX_ROLES.collect{|k| k[:name]}
r = _
r.each do |rn|
  Role.create!(name: rn)
end
Maintenance::RoleHierarchy.mx_roles
Role.first
role = _
role.subordinates
role.subordinates.first
exit
Role.first
role = _
role.subordinates.first
dmx = Role.where(name: "Director of Maintenance").first
dmx.subordinates
dmx.subordinates << Role.where(name: "Maintenance Supervisor").first
dmx.save
dmx.reload
dmx.subordinates
ms = dmx.subordinates.first
ms.superiors
dmx.subordinates << Maintenance::RoleHierarcy.director_of_maintenance_roles
dmx.subordinates << Maintenance::RoleHierarchy.director_of_maintenance_roles
dmx.subordinates = []
dmx.save
dmx.subordinates << Maintenance::RoleHierarchy.director_of_maintenance_roles
dmx.save
clear
dmx.subordinates = []
clear
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  role = Role.where(name: h[:name]).first
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  next unless h[:roles]
  role = Role.where(name: h[:name]).first
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  next unless h[:roles]
  put "role name #{h[:name]}"
  role = Role.where(name: h[:name]).first
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  next unless h[:roles]
  puts "role name #{h[:name]}"
  role = Role.where(name: h[:name]).first
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  next if h[:roles].nil?
  role = Role.where(name: h[:name]).first
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  puts "*"*100
  puts "Role: #{h[:name]}"
  next if h[:roles].nil?
  role = Role.where(name: h[:name]).first
  raise 'WHAT THE FUCK' unless role
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
  puts 'Done'
end
Maintenance::RoleHierarchy::MX_ROLES.each do |r|
  next if Role.where(name: r[:name]).first
  Role.create(name: r[:name])
end
Maintenance::RoleHierarchy::MX_ROLES.each do |h|
  puts "*"*100
  puts "Role: #{h[:name]}"
  next if h[:roles].nil?
  role = Role.where(name: h[:name]).first
  binding.pry
  role.subordinates = []
  role.subordinates = Maintenance::RoleHierarchy.send(h[:roles])
  puts 'Done'
end
role
next
role
c
role
c
role
c
exit!
exit
Maintenance::RoleHierarchy.create_and_setup_roles
exit
Role.first.superiors
Role.first.superiors.first
exit
Maintenance::RoleHierarchy.mx_roles
clear
Maintenance::RoleHierarchy.mx_roles.delete_all
clear
Rake::Task['maintenance:create_and_associate_roles'].invoke
[1] - [1,2]
Role.lsat
Role.last
Role.where(name: "Parts/Tool Manager")
role = _.first
role.superiors.count
role.superiors
exit
TrackedItemHistory
TrackedItemHistory.table_name
exit
TrackedItemHistory
TrackedItemHistory.first
TrackedItemHistory.new
set_school
TrackedItemHistory.new
ti = _
ti.save
ti.errors
TrackedItem
BillingSection::TrackedItem
Item
BillingSection::Item
BillingSection::Item.first
i = _
i.traceable
i.class.colum_names
i.class.column_names
i.class.column_names.sort
clear
BillingSection::Item
exit
ItemLocation
exit
ItemLocation.find 12
il = _
il.parent
il.parent.to_sql
il.children
il.children.to_sql
il = ItemLocation.find 11
il.children
exit
il = ItemLocation.find 11
il.parent
il.children
exit
il = ItemLocation.find 11
il.parent
il.parent_sql
il.chindlren
il.children
il.parent
exit
il = ItemLocation.find 11
il.parent
ItemLocation
ItemLocation.first
ItemLocation.first.location
clear
AdminLocation
AdminLocation.first.item_locations
ItemLocation.first
il = _
il.admin_location
exit
ItemLocation.first.admin_location
AdminLocation.first
AdminLocation.count
AdminLocation.count.last
AdminLocation.last
AdminLocation.find 2
AdminLocation.find 162
AdminLocation.find 2
al = _
al.item_locations
ItemLocation
AdminLocation.first.school_instance_id
ScholInstance.current_school
SchoolInstance.current_school
AdminLocation
ItemLocation.delete_all
SchoolInstance
ItemLocation.where(level_name: 'Sectoin').update_all(level_name: 'Section')
exit
set_school
AdminLocation.new
al = _
al.name = "fucker"
al.school_instance_id = 7
al.save!
al.name = "fuck"
al.save!
al.description = "fucker"
al.save!
exit
Parts::ItemHistory
clear
Parts::ItemHistories
Parts::ItemHistory
exit
Parts::ItemHistory
Parts::TrackedItem
exit
Parts::TrackedItem
Parts::TrackedItemExpiration
Parts::TrackedItem.table_name
Parts::TrackedItem
Parts::TrackedItemExpiration
Parts::Item
BillingSection::Item
Item
exit
Parts::ItemCategoriesHistory 
Parts::ItemCategoriesHistory.table_name
exit
Parts::ItemCategoriesHistory.table_name
Parts::ItemLocation
Parts::ItemLocation.table_name
Parts::ItemLocatoinLable
Parts::ItemLocatoinLabel
Parts::ItemLocationLabel.table_name
Parts::ItemTypeHistory
Parts::ItemTypesHistory.table_name
Parts::ItemsAssocInvoiceHistory.table_name
Parts::TrackedItem.table_name
clear
exit
Parts::ItemLocation
Parts::ItemLocation.table_name
exit
Parts::ItemLocation.table_name
Parts::ItemLocation.table_name_prefix
Parts.table_name_prefix
Parts::Item.table_name_prefix
Parts::Items.table_name_prefix
Parts::ItemHistory.table_name_prefix
Parts::ItemHistory.table_name
Maintenance::Checklist
Maintenance::Checklist.table_name_prefix
Maintenance::Checklist.table_name
Parts
Parts::ItemHistory.table_name
Parts::ItemHistory.table_name_prefix
exit
Parts::ItemHistory.table_name_prefix
Parts::ItemHistory.table_name
Parts
exit
Parts
show-source Parts
exit
Item::Tracked
Item::TrackedItem
Item::TrackedItem.table_name
exit
Item::TrackedItem.table_name
Item::TrackedItem
exit
Maintenance::WorkOrder
Maintenance::WorkOrder.find 391
wo = _
associated_with wo
wo.work_order_item
wo.work_order_items
exit
organization = BillingSection::Organization.where(
id: 520)
org = _.first
associated_with org
org.party
org.party.contracts.active
org.party.contracts.active.first
c = _
contract = org.party.contracts.active.first
associated_with contract
PartyRelationship
BillingSection::PartyRelationship
associated_with BillingSection::PartyRelationship
BillingSection::PartyRelationship.where(party_user: 13628)
BillingSection::PartyRelationship.where(party_user: 13628).count
BillingSection::PartyRelationship
BillingSection::PartyRelationship.first
BillingSection::PartyRelationship.first.party_user
BillingSection::PartyRelationship.first.party_user.user
exit
BillingSection::PartyRelationship.first.party_user.user
BillingSection::PartyRelationship.first.user
BillingSection::PartyRelationship.first.contracts
User.first.contracts
BillingSection::PartyRelationship
BillingSection::PartyRelationship.first
BillingSection::PartyRelationship.first.user
BillingSection::PartyRelationship.first.
contracts
BillingSectin::Contract
BillingSection::Contract
associated_with BillingSection::Contract
BillingSection::Contract.first.party
BillingSection::Contract.first.party.users
BillingSection::Contract.first.party
BillingSection::Contract.first.party.column_names
BillingSection::Contract.first.party.class.column_names
BillingSection::PartyRelationship
BillingSection::PartyRelationship.find 6562
pr = _
pr.user
pr.contract
associated_with pr
pr.contracts_assoc_relationships
exit
BillingSection::ContractsAssocRelationship
exit
BillingSection::ContractsAssocRelationship
BillingSection::ContractsAssocRelationship.first
BillingSection::ContractsAssocRelationship.first.users
exit
BillingSection::ContractsAssocRelationship.first.user
BillingSection::PartyRelationship
exit
User.first
User.find 11206
user = _
user.party_relationships,
end
user.party_relationships
user.party_relationships.contracts
user.party_relationships.collect(&:contracts)
user.party_relationships.collect(&:contracts).flatten
user.party_relationships
user.party_relationships.first
user.party_relationships.first.contracts
user.party_relationships.collect(&:contracts)
user.party_relationships
user.party_relationships.reload!
user.party_relationships.collect(&:contracts)
user.party_relationships
user.party_relationships.collect(&:party_organization)
user.party_relationships.collect(&:contracts)
user.party_relationships.collect(&:contracts).reload!
exit
User.find 11206
user = _
user.party_relationships.collect(&:contracts)
user.party_relationships.collect(&:contracts).flatten
user.contracts
user.contracts.first
exit
user.contracts.first
user = User.find 11206
user.contracts
user.contracts.first.organization
user.contracts.first
assoicated_with user.contracts.first
associated_with user.contracts.first
associated_with user.contracts.first.party
associated_with user.contracts.first.party.organization
user.contracts.first.party.organization
user = User.find(3682)
user.contracts
:wq
clear
exit
Inventory::MasterItem.first
mi = _
mi.items
mi.items.first
Inventory::Item
Inventory::Item.table_name
mi.parts.first
mi.parts.first.inspect
exit
Inventory::MasterItem.first
mi = _
mi.parts.first
mi.items.first
clear
exit
Inventory::MasterItems
Inventory::MasterItem
Inventory::MasterItem.column_names
Inventory::MasterItem.column_names.collect(&:to_sym)
"k".titleize
set_school
set_school(7)
Inventory::MasterItem
Inventory::MasterItem.first
clear
Inventory::MasterItem
Inventory::MasterItem.column_names
Inventory::MasterItem.column_names.collect(&:to_sym)
exit
Inventory::MasterItem
Inventory::MasterItem.ransack(name: 'F')
Inventory::MasterItem.ransack(name: 'F').results
Inventory::MasterItem.ransack(name: 'F').result
Inventory::MasterItem.ransack(name: 'F').to_sql
Inventory::MasterItem.ransack({name: 'F'})
Inventory::MasterItem.ransack({name: 'F'}).result
Inventory::MasterItem.search({name: 'F'})
Inventory::MasterItem.search({name: 'F'}).results
Inventory::MasterItem.search({name: 'F'}).result
Inventory::MasterItem.search({name: 'k'}).result
Inventory::MasterItem.search({name: 'k'}).result.to_sql
Inventory::MasterItem.search(id: 1).result.to_sql
Inventory::MasterItem.search(id: 1).result(distinct: true)
Inventory::MasterItem.search(id: 1).result(distinct: true).to_sql
Inventory::MasterItem.ransack({q: {id: 1}}).result(distinct: true)
Inventory::MasterItem.ransack({name_like: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_start: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_contains: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_i_cont: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_sart: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_start: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_cont: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_i_cont: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_cont: 'f'}).result(distinct: true)
Inventory::MasterItem.ransack({name_cont: 'c'}).result(distinct: true)
:fuck
:fuck + :_it
clear
"Item Number.cowncase
"Item Number".downcase
"Item Number".downcase.underscorde
"Item Number".downcase.underscore
"Item Number".downcase
clear
Inventory::MasterItem.ransack(params[:q])
Inventory::MasterItem.ransack({name_cont: 'fucker'})
Inventory::MasterItem.ransack({name_cont: 'fucker'}).conditions
Inventory::MasterItem.ransack({name_cont: 'fucker'}).to_sql
Inventory::MasterItem.ransack({name_cont: 'fucker'}).result.to_sql
Inventory::MasterItem.all.to_array.to_csv
Inventory::MasterItem.all.to_csv
Inventory::MasterItem.all.csv
require 'csv'
Inventory::MasterItem.all.to_csv
Inventory::MasterItem.column_names
clear
Item
BillingSection::Item
BillingSection::Item.column_names
exit
BillingSection::Item
BillingSection::Item.find 13839
k = _
show-source _
k.items
BillingSection::TrackedItem.count
Maintenance::TrackedItem
Maintenance::TrackedItem.count
item
next
obj.item.traceable
c
tracked_item
tracked_item.valid?
tracked_item.messages
tracked_item.errors.messages
item[:id]
c
set_school(7)
ItemLocation.for_school(SchoolInstance.current_school.id)
ItemLocation.for_school(SchoolInstance.current_school.id).first
k = _
k.get_lowest_level_location
k.get_lowest_level_locations
reload!
k.get_lowest_level_locations
exit
set_school(7)
ItemLocation.for_school(SchoolInstance.current_school.id).first
i = _
i.get_lowest_level_locations
reolad!
reolad
reload!
i.get_lowest_level_locations
exit
ItemLocation.for_school(SchoolInstance.current_school.id).lowest_level_locations$
ItemLocation.for_school(SchoolInstance.current_school.id).lowest_level_locations
set_school(7)
ItemLocation.for_school(SchoolInstance.current_school.id).lowest_level_locations
set_school(4)
set_school(3)
set_school(7)
set_school(49)
set_school(47)
set_school(41)
SchoolInstance.where('school_name like ?', 'Liberty')
SchoolInstance.where('school_name like %?%', 'Liberty')
SchoolInstance.where('school_name like %?%', 'Liberty').first
SchoolInstance.where('school_name like ?', '%Liberty%').first
set_school(43)
ItemLocation.for_school(SchoolInstance.current_school.id).lowest_level_locations
ItemLocation.for_school(SchoolInstance.current_school.id)
AdminLocation
AdminLocation.first
AdminLocation.first.children
item
item[:item_location_label_id]
ItemLocation.find 7
tracked_item
tracked_item.save!
c
tracked_item.valid?
tracked_item
tracked_item.save!
tracked_itemex
exit!
rails server
tracked_item.inspect
tracked_item.valid?
c
tracked_item
tracked_item.valid?
tracked_item.save!
tracked_itemc
c
tracked_item.valid?
tracked_item.save!
tracked_item.item_location_id
c
tracked_item.valid?
c
BillingSection::TraceableItem
Maintenance::TrackedItem.count
Maintenance::TrackedItem.first
Maintenance::TrackedItem.first.item
BillingSection::PurchaseOrder
BillingSection::Order
Maintenance::PurchaseOrder
Maintenance::PurchaseOrder.last.items
Maintenance::PurchaseOrder.last.items.first
Maintenance::PurchaseOrder.last.items.first.item
tracked_item
tracked_item.item
item[:id]
exit!
BillingSection::Item.last
BillingSection::Item.last.item
show-source BillingSection::Item
exit
BillingSection::Item.last
associated_with _
BillingSection::Item.last.items
Maintenance::PurchaseOrder.last
Maintenance::PurchaseOrder.last.reciept
BillingSection::Receipt
Maintenance::Receipt
Maintenance::Receipt.last
Maintenance::Receipt.last.item
Maintenance::Receipt.last.item.item
Maintenance::Receipt.last.item.items
Maintenance::Receipt.last.item
Maintenance::Receipt.last
Maintenance::Receipt.last.item
Maintenance::TrackedItem.first.item
exit
Maintenance::TrackedItem
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.maintenance_receipt
Maintenance::TrackedItem.last.maintenance_receipt.to_sql
Maintenance::TrackedItem.last.maintenance_receipt
Maintenance::TrackedItem.last.maintenance_receipt = Maintenance::Receipt.last
Maintenance::TrackedItem.last.maintenance_receipt = ::Maintenance::Receipt.last
Maintenance::TrackedItem.last.maintenance_receipt = ::Maintenance::Receipt.lastexit
exit
tracked_item
tracked_item.maintenance_receipt
c
Maintenance::PurchaseOrder
associated_with Maintenance::PurchaseOrder
associated_with Maintenance::Receipt
Maintenance::TrackedItem
associated_with Maintenance::TrackedItem
associated_with Maintenance::TrackedItem.last
associated_with Maintenance::TrackedItem.last.item
Maintenance::TrackedItem.last.item
Reservation.first
show-source Reservation.first.build_perf_data_rotocraft
PerfDataRotocraft
PerfDataRotocraft.count
PerfDataRotocraft.last
PerfDataRotocraft.all.collect(&:max_enroute_elev).uniq
PlaneSquawk
PlaneSqwack
exit
SchoolInstance.find 49
SchoolInstance.find 44
SchoolInstance.find 47
exit
User.count
exit
SchoolInstance.count
exit
SchoolInstance.count
Reservation.status_types.rassoc(status)
Reservation.status_types.rassoc('l')
show-source Reservation.status_types.rassoc
show-source Reservation.status_types.rassoc('canceled')
Reservation.status_types.rassoc('canceled')
Reservation.status_types.rassoc('canceled_no_penality')
Reservation.status_types
Reservation.first.status
Reservation.where('status NOT IN [4,3,1]')
Reservation.where('status NOT IN [4,3,1]').first
Reservation.where('status NOT IN (4,3,1)').first
Reservation.first.includes(:class_section)
Reservation.first.include(:class_section)
Reservation.first.id
Reservaton.where(id: 18).include(:class_section)
Reservation.where(id: 18).include(:class_section)
Reservation.where(id: 18).includes(:class_section)
Reservation.where(id: 18).includes(:class_section).first
associated_with Reservation
Reservation.where(id: 18).includes(course: [:class_section]).first
Reservation.where(id: 18).includes(:course).first
Reservation.where(id: 18).includes(course: [:class_section]).first
Reservation.where(id: 18).includes(course: [:class_section]).first.course
Reservation.where(id: 363732).includes(:course)
Reservation.where(id: 363732).includes(:course).first.course
associated_with Reservation.where(id: 363732).includes(:course).first.course
associated_with Reservation.where(id: 363732).includes(:course).first.course.course_classes,
associated_with Reservation.where(id: 363732).includes(:course).first.course.course_classes
associated_with Reservation.where(id: 363732).includes(:class_session)
Reservation.where(id: 363732).includes(:class_session)
Reservation.where(id: 363732).includes(:class_session).class_session
Reservation.where(id: 363732).includes(:class_session).first/class_session
Reservation.where(id: 363732).includes(:class_session).first.class_session
exit
Maintenance::Task
show-source Maintenance::Task
reload
reload!
Maintenance::Task.first.prop?
show-source Maintenance::Task
clear
Maintenance::TrackedItem
item
item.object
item.object.tracked_item
c
item.object.item
item.object.item.tracked_item
c
item.object
item.object.item
item.object.item.trackable?
item.object.item.traceable
c
reload!
BillingSection::Item.find 13839
reload!; BillingSection::Item.find 13839
i = _
i.tracked_item
i.tracked_items
item.object.item.tracked_items
item.object.item.tracked_items.on_hand
c
Maintenance::Receipt
Maintenance::Receipt.count
Maintenance::Receipt.last
Maintenance::Receipt.first
Maintenance::Receipt.last
exit
set_school
exit
AdminSection::SchoolRolePreference
AdminSection::SchoolRolePreference.first
clear
AdminSection::SchoolRolePreference.first
AdminSection::SchoolRolePreference.for_current_school
set_school
AdminSection::SchoolRolePreference.for_current_school
AdminSection::SchoolRolePreference.for_current_school.count
AdminSection::SchoolRolePreference.for_current_school.first
rp = _
rp.role_groups
rp.role_groups.first
reload!; AdminSection::SchoolRolePreference.first.role_groups
reload!; AdminSection::SchoolRolePreference.first.role_groups.first
AdminSection::RoleGroup.first
AdminSection::RoleGroup
AdminSection::RoleGroups
exit
reload!; AdminSection::SchoolRolePreference.first.role_groups.first
reload!; AdminSection::SchoolRolePreference.first.roles
reload!; AdminSection::SchoolRolePreference.first.role_ids
AdminSection::SchoolRolePreference.first.role_ids
AdminSection::SchoolRolePreference.find(115).role_ids
AdminSection::SchoolRolePreference.find(115)
rp = _
rp.role_ids
Role.first
Role.last
Role.standard_roles
Role.standard_roles.first
rp.role_ids = [Role.first.id]
SchoolInstance.current_school = SchoolInstance.find(AdminSection::SchoolRolePreference.find(115))
SchoolInstance.current_school = SchoolInstance.find(AdminSection::SchoolRolePreference.find(115).school_instance_id)
clear
rp.role_ids = [Role.first.id]
rp.role_ids 
clear
Role.count
Role
Role.standard_roles
Role.standard_roles.collect(&:name)
Role.where(name: %w{pilot admin}.collect(&:id))
Role.where(name: %w{pilot admin}).collect(&:id)
Role.where(name: %w{pilot admin})
Role.standard_roles.where(name: %w{pilot admin})
Role.where(name: %w{pilot admin}).standard_roles
clear
SchoolInstance.vacation_schedule_management
set_school
SchoolInstance.current_school
sc = _
sc.vacation_schedule_management
reload!
SchoolInstance.current_school
sc = _
sc.vacation_schedule_management
exit
SchoolInstance.current_school
set_school
sc = _
sc.vacation_schedule_management
sc.vacation_schedule_management.roles
Abiliy
Ability.new
Ability.new(User.find(657))
a = _
a.can?(:edit, TeachingSchedule)
User.first.roles
exit
Ability.new(User.find(657))
a.can?(:edit, TeachingSchedule)
a =Ability.new(User.find(657))
a.can?(:edit, TeachingSchedule)
(user.roles && user.school_instance.teaching_schedule_management.roles)
user = User.find(657)
(user.roles && user.school_instance.teaching_schedule_management.roles)
user.roles
(user.roles & user.school_instance.teaching_schedule_management.roles)
user.roles
user.role_ids
user.role_ids = [11, 99, 100]
user.save!
user.roles
user
user.role_ids = [1, 11, 99, 100]
user.save!
cleaer
clear
OpenStruct.new(roles: [])
os = _
os.roles
exit
AdminSection::SchoolRolePreference.first
Ability.new(User.find(657))
a = _
a.can?(:edit, TeachingSchedule)
user = User.find 657
user.school_instance.teaching_schedule_management.
roles
user.school_instance.teaching_schedule_management.
roles
exit
clear
[].blank?
@task
@task.items
associated_with @task
@task.work_order_items
exit
Maintenance::WorkOrderItem.first
wo = _
wo.picked
wo.picked = true
wo.picked_changed?
wo.picked_was
wo.picked_changed?
wo.picked
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.item
Maintenance::WorkOrderItem.last.item.item
associated_with Maintenance::WorkOrderItem.last.item
associated_with Maintenance::WorkOrderItem.last.item.items
Maintenance::WorkOrderItem.last.item.items
Maintenance::Receipt
Maintenance::Receipt.last
associated_with Maintenance::Receipt.last
Maintenance::Receipt.last.tracked_items
associated_with Maintenance::Receipt.last.tracked_items
associated_with Maintenance::Receipt.last.tracked_items.maintenance_receipt
associated_with Maintenance::Receipt.last.tracked_items.first.maintenance_receipt
Maintenance::WorkOrder
Maintenance::WorkOrder.last
associated_with Maintenance::WorkOrder.last
associated_with Maintenance::WorkOrder.last.work_order_items
Maintenance::Task.find 1169
mt = _
mt.tracked_items
associated_with mt
mt.work_order_items
mt.work_order_items.tracked_items
mt.work_order_items.first
mt.work_order_items.first.tracked_items
associated_with mt.work_order_items.first
associated_with mt.work_order_items.first.item
mt.work_order_items.first.item.tracked_items
mt.work_order_items.first.item.tracked_items.on_hand
self
self.item
self.item.tracked_item
self.item.tracked_items
self.item.tracked_items.on_hand
item.tracked_items.on_hand
c
mt.work_order_items.first.item.tracked_items.on_hand.where(serial_number: 'pla')
mt.work_order_items.first.item.tracked_items.on_hand.first
tracked
serial_number
params
c
params
params[:maintenance_task]
params[:maintenance_task][:work_order_items_attributes]
c
associated_with mt.work_order_items.first.item.tracked_items.on_hand.first
mti mt.work_order_items.first.item.tracked_items.on_hand.first
mti = mt.work_order_items.first.item.tracked_items.on_hand.first
mti.maintenance_receipt
mti.maintenance_receipt.used
item.object
associated_with item.object
associated_with item.object.receipts
item.object.receipts
item.object.serial_number
c
item
item.object
associated_with item.object
associated_with item.object.item
item.object.item
item.object.item.serial_number
item.object
''.empty?
c
item
item.object
''.empty?Maintenance::WorkOrderItem id: 1121
Maintenance::WorkOrderItem id: 1121
c
Maintenance::WorkOrderItem.find 1121
woi = )
woi = Maintenance::WorkOrderItem.find 1121
associated_with woi
woi.item
associated_with woi.item
woi
woi.item
woi.item.tracked_item
woi.item.tracked_items
woi.item
woi
associated_with woi
associated_with woi.column_names
associated_with woi.class.column_names
woi.class.column_names
associated_with woi
woi.maintenance_item_type
woi
show-source woi
woi
show-class woi
  c
  clear
clear
woi
@work_order
@work_order.items
associated_with @work_order
@work_order.work_order_items
@work_order.work_order_items.uniq
@work_order.work_order_items.uniqe
@work_order.work_order_items.que
@work_order.work_order_items.unique
@work_order.work_order_items.uniq
@work_order.work_order_items.count
@work_order.work_order_items.collect(&:id)
@work_order.work_order_items.last
woi = _
c
woi.table_name
woi.class.table_name
exit
Maintenance::WorkOrderItem.find(1121)
woi = _
woi.tracked_item
woi.tracked_item_id
woi.tracked_item.to_sql
woi.tracked_item
woi.reload!
woi = Maintenance::WorkOrderItem.find(1121)
woi.tracked_item
woi.serial_number = "47478"
woi.save!
woi.serial_number = "47479"
woi.save!
woi.reload
woi.tracked_item
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "4"
woi.save!
woi.save!show-source woi
show-source woi
clear
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "4"
woi.save!
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "4"
woi.save!
show-source woi
exit
show-source Maintenance::WorkOrderItem
woi = Maintenance::WorkOrderItem.find(1121)
show-source woi
exit
woi = Maintenance::WorkOrderItem.find(1121)
show-source woi
woi.save!
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "4"; woi.save!
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "4"; woi.save!
exit
woi = Maintenance::WorkOrderItem.find(1121)
show-source woi
woi.serial_number = "4"; woi.save!
woi.serial_number = "47479"; woi.save!
exit
woi = Maintenance::WorkOrderItem.find(1121)
woi.serial_number = "47479"; woi.save!
woi.serial_number = "47478"; woi.save!
woi.serial_number = "47479"; woi.save!
woi.serial_number = ""; woi.save!
woi.serial_number = "47479"; woi.save!
woi.tracked_item = woi.item.tracked_items.on_hand.where(serial_number: serial_number).first$
woi.tracked_item = woi.item.tracked_items.on_hand.where(serial_number: serial_number).first
woi.tracked_item = woi.item.tracked_items.on_hand.where(serial_number: woi.serial_number).first
woi.save!
woi.save(validate:false)
woi.reload
woi.tracked_item
exit
associated_with plane
plane.maintenance_program
c
lan
lne
lae
plane
plane = double(Plane)
plane
sq
next
plane
exit!
load_factories
Lorem
plane
plane.valid?
plane.save!
exit!
xit
exit
clear
exit
clear
Maintenance::Task.find 1168
mt = _
associated_with mt
mt.work_order_items
mt.work_order_items.last
woi = _
associated_with woi
woi.tracked_item
woi.tracked_items
mt.items
associated_with mt
mt.work_order
mt.work_order.tracked_items
clear
sn_items = item.object.item.tracked_items.
on_hand
sn_items.picked
associated_with sn_items.first
associated_with sn_items.first.maintenance_receipt
sn_items.first.maintenance_receipt.picked
c
params
params[:work_order_items]
params[:work_order_items_attributes]
params["work_order_items_attributes"]
params["maintenance_task"]["work_order_items_attributes"]
params["maintenance_task"]["work_order_items_attributes"][9]
params["maintenance_task"]["work_order_items_attributes"]
params["maintenance_task"]["work_order_items_attributes"]["0"]
params["maintenance_task"]["work_order_items_attributes"]["9"]
params["maintenance_task"]["work_order_items_attributes"]["9"]["picked"]
c
params
c
params
c
Maintenance::WorkOrderItem.find(1119)
woi = _
woi.picked?
woi.tracked_items
woi.item.tracked_items
associated_with woi
woi.tracked_item
woi.item
woi.item.tracked_items
woi.item.tracked_items.frist
woi.item.tracked_items.first
ti = _
ti.maintenance_receipt
ti.maintenance_receipt.picked
associated_with ti.maintenance_receipt
associated_with ti.maintenance_receipt.work_order_items
associated_with ti.maintenance_receipt.work_order_items.work_order
associated_with ti.maintenance_receipt.work_order_items
ti.maintenance_receipt.work_order_items
ti.maintenance_receipt
Maintenance::WorkOrder.first.maintenance_receipts
ti.maintenance_receipt
ti.maintenance_receipt.used
ti.maintenance_receipt.picked
ti.maintenance_receipt.picked?
ti.maintenance_receipt.used?
ti.maintenance_receipt
Maintenance::Receipt.where(used: true)
Maintenance::Receipt.where(used: true).cunt
Maintenance::Receipt.where(used: true).count
Maintenance::Receipt.where(used: true).first
Maintenance::Receipt.where(used: true).first.item
Maintenance::Receipt.where(used: true)
nil.empty?
nil.blank?
exit
SchoolInstance
SchoolInstance.find 7
SchoolInstance.column_name.sort
SchoolInstance.column_names.sort
k = [1,2,3,4]
k.shift
k
clear
exit
Ability
Ability.new(User.find(21255))
a = _
a.can?(:view, AdminSection::SystemToolsController)
a.can?(:manage, AdminSection::SystemToolsController)
reload!; Ability.new(User.find(21255))
reload!; a = Ability.new(User.find(21255))
a.can?(:view, AdminSection::SystemToolsController)
exit
a.can?(:view, AdminSection::SystemToolsController)
reload!; a = Ability.new(User.find(21255)); a.can?(:view, AdminSection::SystemToolsController)
exit
reload!; a = Ability.new(User.find(21255)); a.can?(:view, AdminSection::SystemToolsController)
exit
reload!; a = Ability.new(User.find(21255)); a.can?(:view, :system_tools)
reload!; a = Ability.new(User.find(21255)); a.can?(:show, :system_tools)
reload!; a = Ability.new(User.find(21255)); a.can?(:manage, :system_tools)
a.can?(:manage, SchoolInstance)
a.user.roles
user = User.find(21255)
u = _
u.roles
exit
user = User.find(21255)
Ability.new(user)
Ability.new(user).can?(:manage, SchoolInstance)
Ability.new(user).can?(:view, VacationSchedule)
Ability.new(user).can?(:view, :system_tools)
Ability.new(user).can?(:manage, SchoolInstance.first)
exit
user = User.find(21255)
Ability.new(user).can?(:manage, :system_tools)
exit
user = User.find(21255)
Ability.new(user).can?(:manage, :system_tools)
exit
"http://csa.myflighttrain.ld:3000".gsub('\/\/\w*\.', 'ffx')
"http://csa.myflighttrain.ld:3000".gsub('\w*\.', 'ffx')
"http://csa.myflighttrain.ld:3000".gsub(/\/\/\w*\./, 'ffx')
clear
User.where(last_name: "Horstman")
User.where(last_name: "Horstman").first
User
clear
exit
Role
Role.global_roles
Role.global_roles.collect(&:name)
Role.global_roles.collect(&:name).sort
CoursesSection::ClassLessonTracking.column_names.sort
exit
CoursesSection::ClassLessonTracking.first
associated_with CoursesSection::ClassLessonTracking.first
CoursesSection::ClassLessonTracking.first.instructor
CoursesSection::ClassLessonTracking.last.instructor
CoursesSection::ClassLessonTracking.last.student
clear
exit
BillingSection::Item
BillingSection::Item.column_names.sort
BillingSection::Item.table_name
exit
BillingSection::Item.column_names.sort
clear
Maintenance::WorkOrderItem.last
woi = _
woi.item
woi.item.part_number
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.lsat
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.last
Role.where(name: 'student')
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.last
SchoolInstance.schedule_and_dispatch_management
SchoolInstance.last.schedule_and_dispatch_management
clear
Ability.new(User.first)
a = _
a.can?(:manage, Reservation)
a.user
clear
exit
SchoolInstance.each do |si|
  EmailSetting.create(school_instance_id: si.id)
end
SchoolInstance.all.each do |si|
  EmailSetting.create(school_instance_id: si.id)
end
clear
EmailSetting.create(school_instance_id: si.id)excex
exit
Enrollment
Enrollments
CoursesSection::CourseClass.find(848)
cc = _
associated_with cc
cc.student_assoc_classes
cc
cc.students
CoursesSection::StudentAssocClass
PlaneType
PlaneType.first
PlaneType.for_current_school
PlaneType.first
CoursesSection::StudentAssocClass
CoursesSection::StudentAssocClass.table_name
exit
CoursesSection::StudentAssocClass
exit
CoursesSection::StudentAssocClass.find 4878
CoursesSection::CourseClass
CoursesSection::CourseClass.table_name
exit
CoursesSection::CourseClass.by_school(school_id).curren
CoursesSection::CourseClass.by_school(school_id).current
set_school
CoursesSection::CourseClass.by_school(school_id).current
CoursesSection::CourseClass.by_school(7).current
CoursesSection::CourseClass.by_school(7).current.first
cc = _
cc.active_students
cc = CoursesSection::CourseClass.by_school(7).current.last
cc.active_students
student = _.first
stage = student.get_active_stage(cc.course.id)
current_lesson = student.next_new_lesson(cc.course.id, stage.id)
associated_with current_lesson
associated_with stage
associated_with stage.course
associated_with stage.course.course_classes
stage.course.course_classes
course
stage.course
cc
associated_with cc
associated_with cc.active_enrollments
cc.active_enrollments
cc.active_students
cc.active_enrollments.count
cc.active_students.count
cc
cc.aircraft_type
c
cc
associated_with cc
associated_with cc.active_enrollment
associated_with cc.active_enrollments
cc.active_enrollments
cc.active_enrollments.for_student(8216)
cc.active_enrollments.where(student_id: 8216)
cc.active_enrollments.where(student_id: 8216).first
cc.plane_type_rules
lesson
clear
cc.plane_type_rules
cc.active_enrollments.where(student_id: 8216).first
cc.active_enrollments.where(student_id: 8216).first.lesson
cc.active_enrollments.where(student_id: 8216)
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
exit
Roles.global_roles
Role.global_roles
Role.global_roles.where(name: %w{admin dispatch_admin instructor})
Role.global_roles.where(name: %w{admin dispatch_admin instructor}).count
roles = Role.global_roles.where(name: %w{admin dispatch_admin instructor})
role_ids = roles.collect(&:id)
AdminSection::SchoolRolePreference.where("school_instance_id != 79").each do |srp|
  srp.role_ids = role_ids
  srp.save!
end
roles = Role.global_roles.where(name: %w{admin dispatch_admin instructor})
role_ids = roles.collect(&:id)
AdminSection::SchoolRolePreference.where("school_instance_id != 79").each do |srp|
  SchoolInstance.current_school = SchoolInstance.find(srp.school_instance_id)
  srp.role_ids = role_ids
  srp.save!
end
clear
ll
exit
​[11:34] 
[MyFlightTrain] Trip Marshall added comment with attachment: "Here is he 2nd screen mentioned aboive": As a user, I should be able ot see what aircraft is assigned to a lesson for the purposes of debugging autosked.
​[11:35] 
clear
CoursesSection::Lesson.find 21099
l = _
associated_with l
l.plane_type_rules
show-source PlaneTypeRule
clear
l.plane_type_rules
l
CoursesSection::Lesson.find 21099
l = _
associated_with l
clear
Rails.env.downcase
exit
class CreateVersions < ActiveRecord::Migration
  # Class names of MySQL adapters.
  # - `MysqlAdapter` - Used by gems: `mysql`, `activerecord-jdbcmysql-adapter`.
  # - `Mysql2Adapter` - Used by `mysql2` gem.
  MYSQL_ADAPTERS = [
    "ActiveRecord::ConnectionAdapters::MysqlAdapter",
    "ActiveRecord::ConnectionAdapters::Mysql2Adapter"
  ]
  # The largest text column available in all supported RDBMS is
  # 1024^3 - 1 bytes, roughly one gibibyte.  We specify a size
  # so that MySQL will use `longtext` instead of `text`.  Otherwise,
  # when serializing very large objects, `text` might not be big enough.
  TEXT_BYTES = 1_073_741_823
  def change
    create_table :versions do |t|
      t.string   :item_type, :null => false
      t.integer  :item_id,   :null => false
      t.string   :event,     :null => false
      t.string   :whodunnit
      t.text     :object,    :limit => TEXT_BYTES
      # Known issue in MySQL: fractional second precision
      # -------------------------------------------------
      #
      # MySQL timestamp columns do not support fractional seconds unless
      # defined with "fractional seconds precision". MySQL users should manually
      # add fractional seconds precision to this migration, specifically, to
      # the `created_at` column.
      # (https://dev.mysql.com/doc/refman/5.6/en/fractional-seconds.html)
      #
      # MySQL users should also upgrade to rails 4.2, which is the first
      # version of ActiveRecord with support for fractional seconds in MySQL.
      # (https://github.com/rails/rails/pull/14359)
      #
      t.datetime :created_at
    end
    add_index :versions, [:item_type, :item_id]
  end
end
CreateVersions.new.change
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new("12/30/2015", 23)
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
ae
ae.aircraft_type
next
c.aircraft_type
n
current_lesson.plane_type_rules.collect(&:plane_type).uniq
c
ae.aircraft_type
c.aircraft_type
c
next
c
exit!
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
type
student
c
aircraft_type_for_student_and_course(student, c)
type
c
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
exit
clear
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
plane_types
exit!
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 23)
planes.count
c
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
planes
planes.count
c
planes.count
c
planes.count
c
planes.count
c
exit!
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
info
student_id
c
info
c
info
c
info
c
info
c
exit!
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
clear
exit
BackgroundWorker::Scheduling::AutoSchedulingWorker.new.perform("12/30/2015", 79)
exit
Date::DAYNAMES
Date::DAYNAMES[1].downcase.to_sym
Time.now
Time.now.to_s
clear
exit
AdminSection::SchoolRolePreference
AdminSection::SchoolRolePreference.table_name
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES[2..4]
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.find{|p| p[:purpose] == 'checkin_management'}
AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.find{|p| p[:purpose] == 'checkin_management'}[:name]
exit
school_id = 8
SchoolInstance.find(school_id).reservation_request_queues.where(:auto_queue => true).first
q = _
q.reservation_request
q.reservation_requests
CoursesSection::CourseClass.by_school(school_id).current
CoursesSection::CourseClass.by_school(school_id)
CoursesSection::CourseClass.by_school(school_id).active
CoursesSection::CourseClass.by_school(school_id)
CoursesSection::CourseClass.by_school(school_id).where('start_date <= ? && end_date >= ?', Date.now, Date.now)
CoursesSection::CourseClass.by_school(school_id).where('start_date <= ? && end_date >= ?', Date.current, Date.current)
CoursesSection::CourseClass.by_school(school_id).where(inactive: falsep
  CoursesSection::CourseClass.by_school(school_id).where(inactive: false)
CoursesSection::CourseClass.by_school(school_id).where(inactive: false)
exit
school_id = 8
CoursesSection::CourseClass.by_school(school_id).active
CoursesSection::CourseClass.by_school(school_id).current
CoursesSection::CourseClass.by_school(school_id).where('end_date >= ?', DateTime.now)
CoursesSection::CourseClass.by_school(school_id).where('end_date >= ?', Time.now)
CoursesSection::CourseClass.by_school(school_id).where('end_date <= ?', Date.current)
CoursesSection::CourseClass.by_school(school_id).where('end_date >= ?', Date.current)
CoursesSection::CourseClass.by_school(school_id).order_by(:end_date)
CoursesSection::CourseClass.by_school(school_id).order_by('end_date ASC')
CoursesSection::CourseClass.by_school(school_id).order('end_date ASC')
CoursesSection::CourseClass.by_school(school_id).order('end_date ASC').first
CoursesSection::CourseClass.by_school(school_id).order('end_date DESC').first
exit
school_id = 8
CoursesSection::CourseClass.by_school(school_id).current_as_of(3.weeks.ago)
exit
date = '12/1/2015'
reservation_date = Date::strptime(date,"%m/%d/%Y")
school_id = 8
CoursesSection::CourseClass.by_school(school_id).current_as_of(reservation_date)
CoursesSection::CourseClass.by_school(school_id).current_as_of(reservation_date).count
exit
FlightTrain::Application.sprockets
FlightTrain::Application.assets
FlightTrain::Application.assets.find
FlightTrain::Application.assets.locate
associated_with FlightTrain::Application.assets
clear
SchoolInstance.all.each do |s|
  EmailSetting.create!(school_instance_id: s.id)
end
clear
[].blank?
exit
CoursesSection::CourseClass.first
cc = _
clear
error_file_path = File.join('/tmp/', "auto_schedule_errors_#{DateTime.now}.csv")
@file ||= File.open(error_file_path, 'w')
f = _
@file
@file.put 'ffs'
@file.puts 'ffs'
@file.close
@file
@flie.path
@file.path
set_school
SchoolInstance.find(school_id).reservation_request_queues
school_id = 8
SchoolInstance.find(school_id).reservation_request_queues
k = _.first
k.error_report = @file
k.error_report = @file.open
clear
@file ||= File.open(error_file_path, 'w')
@file = File.open(error_file_path, 'w')
k.error_report = @file
k.save
k.error_report
AircraftType
PlaneType.first
SchoolInstance.find(school_id).reservation_request_queues
k = _.first
k.busy = false
k.save!
clear
qu = SchoolInstance.current_school.reservation_request_queues.where(:auto_queue => true).first
set_school 8
qu = SchoolInstance.current_school.reservation_request_queues.where(:auto_queue => true).first
k = _
k.busy = false
k.save!
clear
exit
Role.where(name: 'visitor')
Reservation
Reservation.column_names.sort
Reservation.first.created_by
Reservation.last.created_by
User.find(Reservation.last.created_by)
AdminSection::SchoolRolePreference.all.each do |srp|
  SchoolInstance.current_school = SchoolInstance.find(srp.school_instance_id)
  srp.role_ids = Role.where(name: ['admin', 'pilot']).standard_roles.collect(&:id)
  srp.save!
end
AdminSection::SchoolRolePreference.where(purpose: "schedule_and_dispatch_management").delete_all
AdminSection::SchoolRolePreference.delete_all
SchoolInstance.all.each do |s|
  SchoolInstance.current_school = s
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |rt|
    AdminSection::SchoolRolePreference.create!(purpose: rt[:purpose], school_instance_id: s.id)
  end
end
Role.where(name: 'admin')
SchoolInstance.all.each do |s|
  SchoolInstance.current_school = s
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |rt|
    AdminSection::SchoolRolePreference.create!(purpose: rt[:purpose], school_instance_id: s.id, role_ids: [1])
  end
end
clear
[1] && [1, 2] && [1, 2, 3]
(([1] && [1, 2]) && [1, 2, 3])
(([1] & [1, 2]) & [1, 2, 3])
(([1] & [1, 2] & [1, 2, 3]))
clear
user_schedule_roles
n
c
user
User.find 10055
user = _
Ability.new(user)
c
a = _
reservation = Reservation.find 379838
a.can?(:schedule, reservation)
c
clear
Reservation.find 379839
r = _
Ability.new(User.find(8791))
c
exit
Ability.new(User.find(8791))
r = Reservation.find 379839
a = Ability.new(User.find(8791))
a.can?(:schedule, r)
a.can?(:schedule, Reservation)
user = User.find(8791)
user.school_instance.aircraft_schedule_management.roles.collect(&:name)
user_schedule_roles = (
  user.roles.collect(&:name) 
  & user.school_instance.aircraft_schedule_management.roles.collect(&:name)
)
user_schedule_roles = (
  user.roles.collect(&:name) & 
  user.school_instance.aircraft_schedule_management.roles.collect(&:name)
)
exit
user = User.find(8791)
a = [FAbility.new(User.find(8791))
a = Ability.new(User.find(8791))
c
r = Reservation.find 379839
a.can?(:schedule, r)
a.can?(:schedule, Reservation)
a.cannot?(:schedule, Reservation)
a.cannot?(:schedule, r)
r
r.user_id
r.pilot_id
r.instructor_id
r.visitor'id
r.visitor'id'
r.visitor_id
exit
a = Ability.new(User.find(8791))
n
c
cd a
ll
cd can
exit
k = MaintenanceInterval.new 
exit
MaintenanceInterval.new
mx = _
mx.school_instance_id = 8
mx.plane_id = Plane.first.id
mx.start_time = DateTime.new
mx.start_time = DateTime.now
mx.end_time = (DateTime.now - 3.days)
mx.save!
mx.save
mx.start_time
mx.end_time
exit
MaintenanceInterval.new(school_instance_id: 8, plane_id: 1, start_time: DateTime.now, end_time: (DateTime.now - 3.days))
mx = _
mx.validate
mx.valid
mx.valid?
mx.save!
exit
MaintenanceInterval.new(school_instance_id: 8, plane_id: 1, start_time: DateTime.now, end_time: (DateTime.now - 3.days))
mx = _
mx.valid?
mx.save
mx.save!
mx.start_time
mx.end_time
exit
MaintenanceInterval.new(school_instance_id: 8, plane_id: 1, start_time: DateTime.now, end_time: (DateTime.now - 3.days))
k = _
k.save!
exit!
mx = MaintenanceInterval.new(school_instance_id: 8, plane_id: 1, start_time: DateTime.now, end_time: (DateTime.now - 3.days))
mx.save
mx.start_time
mx.end_time
exit
mx = MaintenanceInterval.new(school_instance_id: 8, plane_id: 1, start_time: DateTime.now, end_time: (DateTime.now - 3.days))
mx.save!
(end_time.blank? || start_time >= end_time)
n
c
mx = MaintenanceInterval.last
mx.start_time
mx.start_time < mx.end_time
mx.start_time = mx.end_time - 1.day
mx.save!
c
exit
mx = MaintenanceInterval.last
mx = MaintenanceInterval.find 9180
mx.end_time < mx.start_time
mx.save!
self
self.end_time
self.start_time
c
mx.reload
mx.end_time > mx.start_time
exit
Reservation.first.is_a?(Reservation)
exit
Role.where(name: 'visitor')
Role.where(name: 'Visitor')
Role.where(name: 'Visitor').collect(&:name).collect(&:downcase)
User
Profile
User.first
associated_with User.first
Persona.first
User.first.persona
Reservation.find 379865
r = _
User.find 10482
user = _
Ability.new(user)
a = _
a.can?(:schedule, Reservation)
a.can?(:schedule, r)
r.status
clear
Reservation.find 379866
r = _
r.status
Reservation.find 379868
r = _
r.status
AdminSection::SchoolRolePreference.first
1.in?([1, 2])
[1, 2] - [2]
[1, 2, 3] - [2]
success
@admin_section_school_role_preference.mirror_role
n
c
AdminSection::SchoolRolePreference.first
srp = _
srp.mirror_role
srp.role_ids 
srp.role_ids = [1,2]
srp.role_ids = [1,45]
srp.role_ids = [1,4]
set_school(4)
srp.role_ids = [1,4]
srp.dirty?
srp.changed?
exit
set_school(4)
srp = AdminSection::SchoolRolePreference.first
srp.role_ids =
[]
exit
srp = AdminSection::SchoolRolePreference.first
srp.role_ids = [1]
exit!
srp = AdminSection::SchoolRolePreference.first
set_school(4)
srp.role_ids = [1, 6]
new_roles
role_ids
[1,2,3] - [1,2]
[1,2,3] - [4]
[1,2,3] | [4]
exit
set_school(4)
set_school(4)exit!
exit!
set_school(4)
srp = AdminSection::SchoolRolePreference.first
srp = AdminSection::SchoolRolePreference.where(school_instaince_id: 4)
AdminSection::SchoolRolePreference.where(school_instaince_id: 4)
AdminSection::SchoolRolePreference.where(school_instaince_id: 4).count
AdminSection::SchoolRolePreference.where(school_instance_id: 4).count
AdminSection::SchoolRolePreference.where(school_instance_id: 4)
AdminSection::SchoolRolePreference.find 232
srp = _
srp.role_ids
srp.mirror_role.role_ids
exit
AdminSection::SchoolRolePreference.find 232
srp =_
set_school(4)
srp.role_ids
srp.mirror_role.role_ids
srp.role_ids = [1, 4]
a = [1, 2]
b = [2, 4]
a - b
b - a
round
round.flatten
Integer("1")
added_roles
added_roles.flatten
added_roles.flatten.collect(&:to_i)
c
added_roles
(mirror_role.role_ids + added_roles.flatten.collect(&:to_i))
(mirror_role.role_ids - removed_roles.flatten.collect(&:to_i)
)
c
Reservation.find 379849
r = _
r.status
mirror_role.role_ids + added_roles.flatten.collect(&:to_i)
mirror_role.role_ids - removed_roles.flatten.collect(&:to_i)
c
[1,4] - [1]
[1,4] - []
(mirror_role.role_ids + added_roles.flatten.collect(&:to_i)).uniq - removed_roles.flatten.collect(&:to_i).uniq
(mirror_role.role_ids + added_roles.flatten.collect(&:to_i)).uniq
removed_roles.flatten.collect(&:to_i).uniq
c
roles
srp.role_ids
c
removed_roles
added_roles
srp.role_ids
roles
rolesc
c
added_roles
removed_roles
roles
n
removed_roles
added_roles
c
updated_roles
(mirror_role.role_ids + added_roles).uniq
added_roles
c
Roles.global_roles
Role.global_roles
Role.global_roles.collect(&:name)
removed_roles
mirror_role.role_ids.include?(removed_roles)
c
removed_roles
mirror_role.role_ids.include?(removed_roles)
mirror_role.role_ids
mirror_role.role_ids && (removed_roles)
c
(mirror_role.role_ids && removed_roles).empty?
(mirror_role.role_ids - removed_roles)
removed_roles
c
(mirror_role.role_ids && removed_roles).empty?
(mirror_role.role_ids - removed_roles)
mirror_role.role_ids
removed_roles
c
(mirror_role.role_ids && removed_roles).empty?
removed_roles
mirror_role.role_ids
c
exit
8791)
exit
User.find 8791
a = Ability.new(User.find(8791))
a.can?(:view_details, Reservation)
Reservation.find 379869
a.can?(:view_details, r)
r = Reservation.find 379869
a.can?(:view_details, r)
exit
Reservation.find 372699
r = _
Ability.new(User.find(8983))
a = _
a.can?(:view_details, r)
r.id
clear
[].empty?
AdminSection::SchoolRolePreference.where(purpose: 'schedule_and_dispatch_management').delete_all
SchoolInstance.all.each do |school|
  SchoolInstance.current_school = school
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |srp|
    clause = {
      school_instance_id: school.id,
      purpose: srp[:purpose]
    }
    next unless AdminSection::SchoolRolePreference.where(clause).empty?
    AdminSection::SchoolRolePreference.create(
      clause
    )
  end
end
SchoolInstance.all.each do |school|
  SchoolInstance.current_school = school
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |srp|
    clause = {
      school_instance_id: school.id,
      purpose: srp[:purpose]
    }
    next unless AdminSection::SchoolRolePreference.where(clause).empty?
    asrp = AdminSection::SchoolRolePreference.new(
      clause
    )
    asrp.role_ids = [1]
    asrp.save!
  end
end
Reservation.find 298521
Reservation.find 379870
r = _
r.status = 14
AdminSection::SchoolRolePreference.delete_all
SchoolInstance.all.each do |school|
  SchoolInstance.current_school = school
  ​
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |srp|
    clause = {
      ​
school_instance_id: school.id,
purpose: srp[:purpose]
}
​
next unless AdminSection::SchoolRolePreference.where(clause).empty?
​
asrp = AdminSection::SchoolRolePreference.new(
  clause
)
​
asrp.role_ids = [1]
​
asrp.save!
end
​
SchoolInstance.all.each do |school|
  SchoolInstance.current_school = school
  AdminSection::SchoolRolePreference::ROLE_PREFRERENCE_TYPES.each do |srp|
    clause = {
      school_instance_id: school.id,
      purpose: srp[:purpose]
    }
    next unless AdminSection::SchoolRolePreference.where(clause).empty?
    asrp = AdminSection::SchoolRolePreference.new(
      clause
    )
    asrp.role_ids = [1]
    asrp.save!
  end
end
clear
r
r.status
r.save!
r.save(validate: false)
clear
r
exit
Reservation.find 379870
r = _
Ability.new(User.find(1363))
a = _
a.can?(:dispatch, r)
[1..13]
1..13
1..13.include?(3)
(1..13).include?(3)
(1..13)
(1..13) + [15]
(1..15).reject(14)
(1..15).delete(14)
exit!
a = Ability.new(User.first)
r = Reservation.find(379870)
a.can?(:dispatch, r)
a.can?(:dispatch, Reservation.first)
a
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
a.can?(:dispatch, r)
r.status
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
a.can?(:dispatch, r)
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
a.can?(:dispatch, r)
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
a.can?(:dispatch, r)
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
user.roles
q
exit!
r = Reservation.find(379870)
a = Ability.new(User.find(1363))
a.can?(:dispatch, r)
c
a.can?(:dispatch, r)
q
exit!
User.first
Reservation.find 355537
r = _
r.status
r.master_flight_log
r.reload
r.master_flight_log
r.master_flight_log.id
r.master_flight_log
MasterFlightLog.find 355537
mfl = _
fml.reservation
mfl.reservation
r = _
r.class_sessin
r.class_session
r = Reservation.find 355539
r.ground_lesson?
r.plane
MasterFlightLog.find 355539
mfl = _
mfl.reservation.ground_lesson?
([1,2,3] & [4])
([1,2,3] - [4])
exit
a = Ability.new(User.find(1363))
n
exit!
a = Ability.new(User.find(1363))
n
non_visitor_roles
user_schedule_roles - %{visitor}
(user_schedule_roles - %{visitor})
(user_schedule_roles )
(user_schedule_roles exit)
exit!
a = Ability.new(User.find(1363))
n
non_visitor_roles
user_schedule_roles - %w{visitor}
user_schedule_roles
user_schedule_roles - %w{visitor}
user_schedule_roles - %w{pilot}
c
clear
a.can?(:schedule, Reservation.first)
a = Ability.new(User.find(3258))
c
exit
a = Ability.new(User.find(3258))
non_visitor_roles
non_pilot_roles
user.roles
user_roles
non_pilot_roles
exit!
a = Ability.new(User.find(3258))
a.can?(:schedule, Reservation.last)
exit!
a = Ability.new(User.find(3258))
user_roles
c
exit
Reservation.find 379872
r = _
r.status
date
new_date=Date.parse(params[:instructor_profile][date])
c
date
new_date=Date.parse(params[:instructor_profile][date])
params[:instructor_profile][date]
c
params[:instructor_profile][date]
new_date=Date.parse(params[:instructor_profile][date])
c
params[:instructor_profile][date].split('/').length
cc
c
PlaneSquawkStatus.all.collect{|s| [s.id, s.name]}
PlaneSquawkStatus
PlaneSquawkStatus.all.collect{|s| [s.id, s.quawk_name]}
PlaneSquawkStatus.all.collect{|s| [s.id, s.squawk_name]}
Reservation.first
r = _
r.respond_to?(:statu2)
r.respond_to?(:status)
Reservation.find 379846
r = _
r.completed?
r.class_session
r.class_session.status
r.class_session.resesrvation
r.class_session.reservation
r.class_session.reservations
Maintenance::WorkOrderItem.first
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.column_names.sort
Maintenance::WorkOrderItem.last.item
Maintenance::WorkOrderItem.last.item.part_number
part_number.empty?
self.part_number.empty?
n
self.part_umber
self.part_number
self.item
self.item.part_number
Maintenance::WorkOrder.last
Maintenance::WorkOrder.last.serviced_plane
Maintenance::WorkOrder.last.serviced_plane.owner_name
Maintenance::WorkOrder.last.serviced_plane
associated_with _
Maintenance::WorkOrder.last.serviced_plane.organization
Maintenance::WorkOrder.last.serviced_plane.organization.owner_name
Maintenance::WorkOrder.last.serviced_plane.organization
Maintenance::WorkOrder.last.serviced_plane.organization.name
Maintenance::WorkOrder.last.serviced_plane
Maintenance::ChecklistTemplate.first
Maintenance::ChecklistTemplate.first.plane_type
Maintenance::WorkOrder.last.serviced_plane.plane_type
Plane.first
Plane.column_names.sort
associated_with Plane
clear
Part
Maintenance::Part
Maintenance::Inventory
BillingSection::Item
BillingSection::Item.table_name
User.joins{:user_profiles}.where{username.like "%{name}%", "us.boliu15"}
User.joins{:user_profiles}.where{username.like ?, "us.boliu15"}
User.joins{:user_profiles}.where{username.like ?, "us.boliu15"}.first
User.joins{:user_profile}.where{username.like ?, "us.boliu15"}.first
User.joins{:user_profile}.where{username.like %?%, "us.boliu15"}.first
User.joins{:user_profile}.where{username.like "%#{?}%, "us.boliu15"}.first
User.joins{:user_profile}.where{username.like "%#{?}%", "us.boliu15"}.first
User.joins{:user_profile}.where{username.like ?, "%us.boliu15%"}.first
name = "us.boliu15"
User.joins{:user_profile}.where{
  (username.like name) |
  (user_profile.first_name.like name) |
  (user_profile.last_name.like name) |
  (user_profile.middle_name.like name)
}
_.first
exit
name = "us.boliu15"
User.joins{:user_profile}.where{
  (username.like name) |
  (user_profile.first_name.like "%#{name}") |
  (user_profile.last_name.like "%#{name}") |
  (user_profile.middle_name.like "%#name}")
}
exit
User.fuzzy_name_seaUser.fuzzy_user_search('meyer').to_sqlrch
User.fuzzy_user_search('meyer').to_sqlrch
User.fuzzy_user_search('meyer').to_sql
exit
User.fuzzy_user_search('meyer').to_sql
exit
User.where(email: '
linmang14@yahoo.com')
User.where(email: 'linmang14@yahoo.com')
User.where(email: 'linmang14@yahoo.com').first
User.where(email: 'linmang14@yahoo.com').first.first_name
params
@user = params[:user_financial] ? User.find(params[:user_financial]) : current_user
c
exit
Organization.first
set_school(7)
current_school
SchoolInstance.current_school
SchoolInstance.current_school.organizations
SchoolInstance.current_school.organizations.first
SchoolInstance.current_school.organizations.first.planes.count
SchoolInstance.current_school.organizations.first.planes.mysql
SchoolInstance.current_school.organizations.first.planes.to_sql
SchoolInstance.current_school.organizations.first.planes.first
SchoolInstance.current_school.organizations.first.planes
BillingSection::Organization.find(41).planes
Maintenance::WorkOrder.find 592
wo = _
wo.task.first
wo.tasks.first
wo.tasks.first.parts_items
wo.tasks.first.parts_items.first
k = _
k.traked_item
k.tracked_item
k.reload
k.tracked_item
k.tracked_item.item_location
k.tracked_item
k
k.tracked_item
exit
Plane.where(tail_number: 'FMX1000')
Plane.where(tail_number: 'FMX1000').school_instance
Plane.where(tail_number: 'FMX1000').first.school_instance
Plane.where(tail_number: 'FMX1000').first.description
p = Plane.where(tail_number: 'FMX1000').first
p = Plane.where(tail_number: 'FMX1000').first.school_instance
p = Plane.where(tail_number: 'FMX1000').first.active?
p = Plane.where(tail_number: 'FMX1000').first
p.same_billing_service_device
p.same_billing_service_device = true
p.save!
p.meters
associated_with p
p.measuring_devices
p.measuring_devices.first
md = _
md.purpose = 'Service and Billing'
md.save(validate: false)
p
p.same_billing_service_device
same_billing_service_device
c
p.reload
p.same_billing_service_device
p.same_billing_service_device = true
p.save(validate: false)
p.reload
p.same_billing_service_device
user_schedule_roles
non_pilot_roles
user_roles.collect(&:downcase)
_ & user.school_instance.aircraft_schedule_management.roles.collect(&:name).collect(&:downcase)
user.school_instance.aircraft_schedule_management.roles.collect(&:name).collect(&:downcase)
c
non_visitor_roles && non_pilot_roles
c
exit
Maintenance::WorkOrderItem.last
woi = _
woi.picked = true
woi.save
picked_changed?
exit!
DateTime.now
git stash
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.picked
Maintenance::WorkOrderItem.last.picked_date
Maintenance::PurchaseOrder.last
Maintenance::PurchaseOrder.last.expected_date
Maintenance::PurchaseOrder.last.expected_date.localtime
Maintenance::TrackedItem
Maintenance::WorkOrderItem
Maintenance::TrackedItem.table_name
Date.today
Maintenance::WorkOrderItem.table_name
exit!
exit
c
BillingSection::Item
BillingSection::Item.first
BillingSection::Item.column_names.sort
params
c
"true".boolean
"true".to_boolean
"true".to_bool
@search_item
params
params[:search]
c
params[:traceable].blank?
params[:traceable]
c
params[:traceable]
@items.search_traceable_items(traceable)
@items.search_traceable_items(params[:traceable])
c
@items.search_traceable_items(params[:traceable])
c
Item
Maintenance::Item
Maintenance::PurchaseOrder.first
Maintenance::PurchaseOrder.first.items
Maintenance::PurchaseOrder.first.items.first
Maintenance::PurchaseOrder.last
Maintenance::PurchaseOrder.last.items
Maintenance::PurchaseOrder.last.items.first
Maintenance::PurchaseOrder.find 43
po = _
po.items
show-source Maintenance::PurchaseOrderItem
po.items.last.item
po.items.last.item.serial_number
po.items.last.serial_number
po.items.last
show-source Maintenance::PurchaseOrderItem
Maintenance::Receipt.table_name
show-source Maintenance::PurchaseOrderItem
Maintenance::TrackedItem.column_names
Maintenance::TrackedItem.column_names.sort
Maintenance::PurchaseOrderItem.column_names
Maintenance::PurchaseOrderItem.column_names.sort
exit
Maintenance::PurchaseOrderItem.column_names.sort
Maintenance::Receipt
Maintenance::Receipt.first.item
associated_with Maintenance::Receipt.first
associated_with Maintenance::PurchaseOrder
Maintenance::PurchaseOrder.last
po z Maintenance::PurchaseOrder.last
po = Maintenance::PurchaseOrder.last
po.purchase_order_items
po.items
po.items.first
params
@items
exit!
obj
params
item
params
item
@items
exit!
item
@items
item
{k:1}.has_key?(:k)
exit!
obj
item
c
obj
item
c
item
item.has_key?(:tso)
c
BillingSection::ItemCategory.get_categories,
.
BillingSection::ItemCategory.get_categories
set_school
BillingSection::ItemCategory.get_categories
BillingSection::ItemType.get_types
BillingSection::ItemType
BillingSection::ItemType.get_types
BillingSection::ItemType.last
BillingSection::ItemType.get_types
BillingSection::ItemCategory
BillingSection::ItemCategory.get_categories
BillingSection::ItemCategory
BillingSection::ItemCategory.get_categories
exit
set_school(7)
BillingSection::ItemCategory.get_categories
exit
set_school(7)
BillingSection::ItemCategory.get_categories
BillingSection::ItemCategory.where(school_instance_id: 7)
BillingSection::ItemCategory.where(school_instance_id: 7).collect(&:description)
BillingSection::ItemCategory.where(school_instance_id: 7).collect(&:description).sort
BillingSection::ItemCategory.get_categories
BillingSection::ItemCategory.find(130)
Maintenance::WorkOrder
Maintenance::WorkOrder.column_names
Maintenance::WorkOrder.column_names.sorted
Maintenance::WorkOrder.column_names.sort
Maintenance::WorkOrder.table_name
BillingSection::Item.find 4449
k -= _
k = BillingSection::Item.find 4449
k.item_category
Maintenance::WorkOrderTask
associated_with Maintenance::WorkOrder
Maintenance::WorkOrder.tasks
Maintenance::WorkOrder.last.tasks
Maintenance::Task.table_name
Maintenance::Task
params
params[:maintenance_task]
c
Date.new "12/02/2016"
Date.parse "12/02/2016"
new_date
old_params
date
new_params[date]=new_date
new_params[date]
c
Maintenance::Task.find 1405
task = _
associated_with task
associated_with task.document
associated_with task.documents
task.documents
task.documents.first
doc = _
doc.user
doc.parent
exit
task = Maintenance::Task.find 1405
task.documents.first
task.documents.first.parent
exit
Maintenance::WorkOrder
Maintenance::WorkOrder.table_name
Maintenance::WorkOrder.find 646
k = _
k.proposed_date
k.proposed_date.to_s
params
exit!
Maintenance::PurchaseOrderItem
Maintenance::PurchaseOrderItem.lsat
Maintenance::PurchaseOrderItem.last
associated_with Maintenance::PurchaseOrderItem.last
associated_with Maintenance::PurchaseOrderItem.last.item
associated_with Maintenance::PurchaseOrderItem.last.item.receipts
Maintenance::PurchaseOrderItem.last.item.receipts.first.receipts_work_order_items
ReceiptsWorkOrderItem.first
Maintenance::ReceiptsWorkOrderItem.first
a = Maintenance::ReceiptsWorkOrderItem.first
b = _
a == b
exit
params
c
whereami
params
whereami
params.keys
params[:maintenance_task]
params[:maintenance_task][:work_order_items_attributes]
q
exit
params[:maintenance_task][:work_order_items_attributes]
params[:maintenance_task][:work_order_items_attributes][0]
params[:maintenance_task][:work_order_items_attributes]["0"]
params[:maintenance_task][:work_order_items_attributes]["0"]["picked']
params[:maintenance_task][:work_order_items_attributes]["0"]["picked"]
params[:maintenance_task][:work_order_items_attributes]["0"]["picked"] = 1
params[:maintenance_task][:work_order_items_attributes]["0"]["picked"] = 0
params[:maintenance_task][:work_order_items_attributes]["1"]["picked"] = 0
c
wheremai
whereami
woi = params[:maintenance_task][:work_order_items_attributes]
tracked_woi = woi.reject{|k| k['serial_number']}
tracked_woi = woi.reject{|k| k.has_key?("serial_number")}
tracked_woi = woi.reject{|k| tracked_woi[k].has_key?("serial_number")}
tracked_woi = woi.reject{|k| !tracked_woi[k].has_key?("serial_number")}
tracked_woi = woi.reject{|k| tracked_woi[k].has_key?("serial_number")}
tracked_woi = woi.reject{|k| woi[k].has_key?("serial_number")}
tracked_woi = woi.reject{|k| !woi[k].has_key?("serial_number")}
tracked_woi.uniq == tracked_woi$
tracked_woi.uniq == tracked_woi
tracked_woi
tracked_woi.collect{|k| tracked_woi[k]["serial_number"] }
tracked_woi.collect{|k| k["serial_number"] }
tracked_woi.collect{|k| k }
tracked_woi
tracked_woi.each do |k| 
  puts k
end
tracked_woi.each_with_key do |k| 
  puts k
end
tracked_woi.each do |k, v| 
  puts k
end
tracked_woi.each do |k, v| tracked_woi = tracked_woi.collect{|k, v| v["serial_number"]}
end
tracked_woi = tracked_woi.collect{|k, v| v["serial_number"]}
tracked_woi = tracked_woi.collect{|k, v| k["serial_number"]}
tracked_woi = tracked_woi.collect{|k, v| k}
tracked_woi = tracked_woi.collect{|k, v| tracked_woi[k]}
tracked_woi
tracked_woi = woi.collect{|k, v| tracked_woi[k]}
tracked_woi = woi.collect{|k, v| tracked_woi[v]}
tracked_woi = woi.collect{|k, v| v}
tracked_woi = woi.collect{|k, v| v["serial_number"]}
woi = params[:maintenance_task][:work_order_items_attributes]
tracked_woi = woi.reject{|k| !woi[k].has_key?("serial_number")}
tracked_woi = tracked_woi.collect{|k, v| v["serial_number"]}
tracked_woi.uniq == tracked_woi
@task.errors.add(:base, "break me")
c
whereami
woi = params[:maintenance_task][:work_order_items_attributes]
woi["0"]["picked'] = 0
woi["1"]["picked'] = 0
woi["1"]["picked"] = 0
woi["0"]["picked"] = 0
c
tracked_woi.uniq == tracked_woi
tracked_woi
tracked_woi.uniq
c
item.object
item.object.items
item.object.item
associated_with item.object
item.object.tracked_item
item.object.item.tracked_items.on_hand.reject!{|ti| ti.maintenance_receipt.used? }
[item.object.tracked_item]
c
AirworthinessDirectives.last
Maintenance::AirworthinessDirectives.last
AirworthinessDirective.last
ad = _
cd ad
ll
instance_methods
ls
show-source
clear
cd ..
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.serviceable
whereami
ti = item.object.item.tracked_items.on_hand
ti.reject!{|k| k.maintenance_receipt.used? }
ti
ti.first.maintenance_receipt
ti.first.maintenance_receipt.used?
exit!
Array([])
ti
ti = ti.reject{|k| k.maintenance_receipt }
ti = item.object.item.tracked_items.on_hand
ti.fisrt.maintenance_receipt
ti.first.maintenance_receipt
ti.reject!{|k| !k.maintenance_receipt ;2~
ti.reject!{|k| !k.maintenance_receipt }
ti
ti.reject!{|k| k.maintenance_receipt.used? }
ti
c
ti
c
BillingSection::Item.find 15232
bi = _
bi.tracked_item
bi.tracked_items
bi.tracked
bi.traceable
bi.tracked_items
bi.tracked_items.first.maintenance_receipt
show-source Maintenance::TrackedItem
bi.tracked_items.first.on_hand
bi.tracked_items.first.maintenance_recepit
bi.tracked_items.first.maintenance_receipt
bi.tracked_items.first.maintenance_receipt.picked?
bi.tracked_items.first.maintenance_receipt.picked
bi.tracked_items.first.maintenance_receipt.used
bi.tracked_items.first
bi.tracked_items.first.picked
bi.tracked_items.first
bi
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.picked?
Maintenance::WorkOrderItem.last.picked
ti
ti.first
ti.first.picked?
item
whereami
item.object.picked?
item.object
ti
item.object
item.object.serial_number
ti.first
Maintenance::Recepit
item.object
item.object.first
item.object.item.tracked_items
associated_with item.object.item.tracked_items.first
item.object.item.tracked_items.first.maintenance_receipt
item.object.item.tracked_items.first.maintenance_receipt.used
item.object.item.tracked_items.first.maintenance_receipt.serial_number
item.object.item.tracked_items.first.maintenance_receipt.picked?
c
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.picked
Maintenance::WorkOrderItem.where(picked:true)
Maintenance::WorkOrderItem.where(picked:true).last
wooi = _
woi.item
wooi.tracked_item
wooi.tracked_item.work_order_item
wooi
associated_with wooi
wooi.receipts_work_order_items
wooi
wooi.tracke_item
wooi.tracked_item
ti = _
ti.item
wooi
wooi.tracked_item
associated_with wooi.tracked_item
wooi.tracked_item.item
wooi.tracked_item
wooi
wooi.picked?
wooi.item
wooi.tracked_item
wooi
exit
Maintenance::WorkOrderItem.find 1323
woi = _
woi.tarcked_item
woi.tracked_item
associated_with woi.tracked_item
associated_with woi.tracked_item.work_order_item
woi.tracked_item.work_order_item
woi.tracked_item.work_order_item.to_sql
woi
woi.tracked_item
exit
woi = Maintenance::WorkOrderItem.find 1323
woi.tracked_item
woi.tracked_item.work_order_item
woi.tracked_item.work_order_item.to_sql
woi.tracked_item.work_order_item.explain
woi.tracked_item.work_order_item
woi.tracked_item.maintenance_receipt
woi.tracked_item.maintenance_receipt.work_order_item
woi.tracked_item.maintenance_receipt
woi.tracked_item.maintenance_receipt.used?
woi.tracked_item.maintenance_receipt.used
woi.tracked_item
woi
pp woi
woi
woi.tracked_item
exit
woi = Maintenance::WorkOrderItem.find 1323
woi.tracked_item.work_order_item
woi
woi.tracked_item
exit
woi = Maintenance::WorkOrderItem.find 1323
woi.tracked_item
woi.tracked_item.work_order_item
whereami
ti
ti.first.picked?
ti.last
ti.last.picked?
c
ti
ti.collect(&:serial_numberp
)
ti.collect(&:serial_number)
ti.collect(&:serial_number).uniq
ti = item.object.item.tracked_items.on_hand.uniq
ti.reject!{|k| k.maintenance_receipt && k.maintenance_receipt.used? }
ti.reject!{|k| k.picked? }
c
exit
BillingSection::Item.table_name
BillingSection::Item.column_names
BillingSection::Item.column_names.sort
exit
BillingSection::Item.table_name
BillingSection::Item.colum_names
BillingSection::Item.column_names
exit
Maintenance::TrackedItem.find 15232
ti = _
BillingSection::Item
BillingSection::Item.find 15232
item = _
item.traceable_items
associated_with item
item.items
item.tracked_items
item.tracked_items.first
associated_withitem.tracked_items.first
associated_with item.tracked_items.first
associated_with item.tracked_items.first.maintenance_receipt
item.tracked_items.first.maintenance_receipt.purchase_order_item
item.tracked_items.first.maintenance_receipt.purchase_order_item.item_location
item.tracked_items.first.item_location
show-source item.tracked_items.first.item_location
{"utf8"=>"✓", "authenticity_token"=>"62TEsYFSg6ouA8fHrbrTMkRiHSpMwsLLpLezRgLCoe8=", "maintenance_purchase_order"=>{"id"=>"46", "receive_mark"=>"1", "delivery_note_number"=>"1", "items_attributes"=>{"69868515774200"=>{"id"=>"152", "this_qty"=>"1", "serial_number"=>"101", "item_id"=>"15232", "tsn"=>"1", "tso"=>"2", "csn"=>"3", "cso"=>"4", "mfg_date"=>"02/22/2016", "item_location_label_id"=>"7"}, "2"=>{"condition"=>"inspected", "id"=>"152"}, "79415800"=>{"id"=>"153", "this_qty"=>"1", "serial_number"=>"101", "item_id"=>"15232", "tsn"=>"2", "tso"=>"3", "csn"=>"", "cso"=>"", "mfg_date"=>"02/29/2016", "item_location_label_id"=>"7"}, "3"=>{"condition"=>"new", "id"=>"153"}, "87451180"=>{"id"=>"154", "this_qty"=>"0", "serial_number"=>"", "item_id"=>"15232", "tsn"=>"", "tso"=>"", "csn"=>"", "cso"=>"", "mfg_date"=>"", "item_location_label_id"=>"7"}, "4"=>{"condition"=>"new", "id"=>"154"}, "104659520"=>{"id"=>"155", "this_qty"=>"0", "serial_number"=>"", "item_id"=>"15232", "tsn"=>"", "tso"=>"", "csn"=>"", "cso"=>"", "mfg_date"=>"", "item_location_label_id"=>"7"}, "5"=>{"condition"=>"new", "id"=>"155"}, "69868553355900"=>{"id"=>"156", "this_qty"=>"0", "serial_number"=>"", "item_id"=>"15232", "tsn"=>"", "tso"=>"", "csn"=>"", "cso"=>"", "mfg_date"=>"", "item_location_label_id"=>"7"}, "6"=>{"condition"=>"new", "id"=>"156"}}}, "page"=>"1", "errors"=>"0", "traceable"=>"1"}
item.tracked_items.first
whereami
item
params
whereami
n
:
params
exit
exit!
params
exit!
{"utf8"=>"✓",
  "_method"=>"put",
  "authenticity_token"=>"62TEsYFSg6ouA8fHrbrTMkRiHSpMwsLLpLezRgLCoe8=",
  "maintenance_purchase_order"=>
  {"id"=>"46",
    "receive_mark"=>"1",
    "delivery_note_number"=>"1",
    "items_attributes"=>
    {"69868348030000"=>
      {"id"=>"155",
        "this_qty"=>"1",
        "serial_number"=>"108",
        "item_id"=>"15232",
        "tsn"=>"19",
        "tso"=>"19",
        "csn"=>"6",
        "cso"=>"7",
        "mfg_date"=>"02/01/2016",
        "condition"=>"inspected",
      "item_location_label_id"=>"7"},
      "5"=>{"id"=>"155"},
      "69868381533940"=>
      {"id"=>"156",
        "this_qty"=>"0",
        "serial_number"=>"",
        "item_id"=>"15232",
        "tsn"=>"",
        "tso"=>"",
        "csn"=>"",
        "cso"=>"",
        "mfg_date"=>"",
        "condition"=>"new",
      "item_location_label_id"=>"7"},
  "6"=>{"id"=>"156"}}},
  "page"=>"1",
  "errors"=>"0",
  "traceable"=>"1",
  "action"=>"process_received_items",
"controller"=>"maintenance/receipts"}
Maintenance::ReceiptItem
Maintenance::PurchaseOrderItem.
first
item
item.has_key?(:tso)
obj = Maintenance::PurchaseOrderItem.find(item[:id])
obj.update_attributes(item) if item.has_key?(:tso)
c
item
c
item
c
item
c
Maintenance::PurchaseOrderItem.find 155
poi = _
associated_with poi
poi.item
Maintenance::TrackedItem
associated_with Maintenance::TrackedItem
associated_with Maintenance::PurchaseOrderItem.
first
BillingSection::Item.find 15323
BillingSection::Item.find 15232
item = _
item.tracked_items.first
item.tracked_items.first.maintenace_receipt
item.tracked_items.first.maintenance_receipt
item.tracked_items.first.maintenance_receipt.purchase_order_item
item.tracked_items.first.tsn
exit
item = BillingSection::Item.find 15232
item.tracked_items.first
item.tracked_items.first.tsn
item.tracked_items.first.tsn = 20
item.tracked_items.first.tsn
item.tracked_items.collect(&:tsn)
item.tracked_items.reload
item.tracked_items.collect(&:tsn)
obj
next
obj
s
obj
obj.update_attributes(item) if item.has_key?(:tso)
obj
obj.save
obj.save!
Maintenance::PurchaseOrderItem.find(156)
c
obj
obj.id
item
item.has_key?(:tso)
c
Maintenance::PurchaseOrderItem.find(156).reload
Maintenance::PurchaseOrderItem.find(156).item
Maintenance::PurchaseOrderItem.last
tracked_item
c
whereami
obj
obj.update_attributes(item) if item.has_key?(:tso)
c
tracked_item
c
obj
associated_with obj
obj.purchase_order
c
obj
item
c
obj
c
exit!
Maintenance::PurchaseOrderItem.find 159
k = _
associated_with k
k.tracked_item
k
k.reload
k.purchase_order
associated_with k.purchase_order
k
k.item
k.item.tsn
k.item.tracked_items
k.item.tracked_items.last
k.item.tracked_items.last.tsn
k.item.tracked_items.last
k
associated_with k
k
k.item
associated_with k
k.tracked_item
k
k.tracked_item
k
k.item
k
exit
Maintenance::PurchaseOrderItem.find 159
k = _
associated_with k
k.tracked_item
item = BillingSection::Item.find 15232
item.tracked_items
item.tracked_items.first
item.tracked_items.first.maintenance_receipt
associated_with item.tracked_items.first.maintenance_receipt
item.tracked_items.first.maintenance_receipt.purchase_order_item
k
k.tracked_item
k
k.table_name
k.class.table_name
obj
tracked_item
obj.update_attribute(tracked_item_id: tracked_item.id)
obj.update_attribute(:tracked_item_id, tracked_item.id)
obj.reload
obj.tracked_item
k
c
exit
Maintenance::PurchaseOrderItem
Maintenance::PurchaseOrderItem.last
poi = Maintenance::PurchaseOrderItem.last
associated_with poi
poi.tracked_item
exit
obj
Maintenance::PurchaseOrderItem.find 161
poi = _
item
tracked_item
Maintenance::TrackedItem.find 20
ti = _
ti.tso
poi
exit
c
poi = Maintenance::PurchaseOrderItem.find 161
ti = Maintenance::TrackedItem.find 20
ti.tso
ti.tsn
poi
exit
ti = Maintenance::TrackedItem.find 20
poi = Maintenance::PurchaseOrderItem.find 161
ti.tso
ti
poi
poi.tracked_item_id
poi.tracked_item
poi.tracked_item.tso
poi.tracked_item
k
poi
poi.tracked_item
k
ti = poi.tracked_item
ti.maintenance_receipt
ti.maintenance_receipt.tarcked_item
ti.maintenance_receipt
ti
ti.purchase_order_item
ti
poi
ti.maintenance_receipt
mr = _
mr.purchase_order_item
mr.tracked_item
mr.tracked_items
exit
Maintenance::TrackedItem.table_name
obj
tracked_item
item
exit!
c
Date.parse("02/17/2016")
BillingSection::Item
BillingSection::Item.table_name
k
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.work_order_item
Maintenance::TrackedItem.last
associated_with Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.maintenance_receipt
Maintenance::TrackedItem.last.maintenance_receipt.used?
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.picked?
exit
aintenance::TrackedItem.last
Maintenance::TrackedItem.last
mi = _
mi.maintenance_receipt
mi.maintenance_receipt.used
mi.maintenance_receipt.picked
mi.maintenance_receipt.picked?
mi.work_order_item
mi.work_order_item.picked?
associated_with mi
mi.picked?
mi.work_order_item
mi.work_order_item.picked
mi.work_order_item.picked?
mi.work_order_item
mi.work_order_item.tracked_item
mi.work_order_item.tracked_item.picked?
Maintenance::WorkOrderItem.find 1330
woi = _
woi.picked?
Maintenance::WorkOrderItem.find 1332
woi = _
woi.tracked_item
woi.tracked_item.maintenance_receipt
woi.tracked_item.work_order_item
woi.tracked_item.work_order_item.part_number
woi.tracked_item.work_order_item.item
woi.tracked_item
woi.tracked_item.part_number
woi.tracked_item.item_id
show-source Maintenance::TrackedItem
q
exit
BillingSection::ItemsPdf
set_school
Maintenance::TrackedItem.last.item
Maintenance::TrackedItem.last.item.tracked_items
items = _
BillingSection::ItemsPdf.new(items)
reload!
BillingSection::ItemsPdf.new(items)
clear
BillingSection::Item.first
%W{F A b
asdfg}
%w{F A b
}
%p{F A b}
%d{F A b}
%n{F A b}
%a{F A b}
$w{F A b}
$W{F A b}
table_data
c
table_data
c
pdf = Prawn::Document.new(:page_layout => :portrait,:page_size => "A4")
p = _
p.page_layout
pdf = Prawn::Document.new(:page_layout => :portrait)
pdf = Prawn::Document.new(height: 900)
pdf = Prawn::Document.new(layout: :landscape)
pdf = Prawn::Document.new(page_layout: :landscape)
clear
Plane.first
plane = _
plane.last_100hr_service_date = Date.today
plane.attributes_changed
plane.changed_attributes
plane.changed_attributes.keys
plane.changed_attributes.keys.collect do |k|
  k =~ /.*_date/
end
plane.changed_attributes.keys.collect do |k|
  k =~ /date/i
end
k.matche(/date/i)
"fuck_date".match(/date/i)
"fuck_date".match(/date/i) == true?
"fuck_date".match(/date/i) == true
("fuck_date" =~ date/i) == true?
("fuck_date" =~ /date/i) == true?
("fuck_date" =~ /date/i) == true
clear
plane.changed_attributes.keys.collect do |k|
  k.match(/date/i)
end
v = _
v.any?
['no', 'date', 'fucking_date'].keys.collect do |k|
  k.match(/date/i)
end
['no', 'date', 'fucking_date'].collect do |k|
  k.match(/date/i)
end
_.any?
_.all
_.all?
['no', 'date', 'fucking_date'].collect do |k|
  k.match(/date/i)
end
v = _
v.all?
exit
Plane.all.each do |p|
  BackgroundWorker::Planes::UpdateMFlag.perform_async(p.id)
end
clear
Plane.lsat
Plane.last
Plane.column_names.sort
Plane.first
p = _
p.dirty?
p.dirty
p.changed?
clear
exit
Plane.find 549
p = _
p.last_e_l_t_check = Date.yesterday
p.save!
exit!
Plane.find 549
p = _
p.last_e_l_t_check 
p.last_e_l_t_check = Date.today - 1.week
p.changed?
p.save
exit
set_school
p = Plane.find 549
p.last_e_l_t_check = Date.today - 2.weeks
p.changed?
p.save
changed?
changed
changed.delete("updated_at")
changed
changed.delete("updated_at").empty?
k = changed.delete("updated_at")
changed
k = changed.delete("updated_at")
l
j
k
changed
q = changed
q.delete("updated_at")
q
exit!
p = Plane.find(549)
p.last_e_l_t_check = Date.today - 29.days
p.save
set_school
p.save!
changed?
others = changed.delete("updated_at")
others
others = changed
others.delete("updated_at")
others
others.empty?
exit!
set_school
p = Plane.find 549
p.last_e_l_t_check = Date.today - 26.days
p.changed?
p.save
others = changed
others.delete("updated_at")
others.empty?
c
others = changed
others.delete("updated_at")
others.empty?
c
exit!
Plane.find 549
p = _
p.check_m_flag
p.reload
p.m_flag
p.m_flag_messages
exit
p = Plane.find 549
p.check_m_flag
collection = (check_next_dates + check_ad_fields + check_cycles_fields).compact
c
p.check_ad_fields
p.check_cycles_fields
p
p.save!
SchoolInstance.current = SchoolInstance.find 4
SchoolInstance.current_school = SchoolInstance.find 4
p.save!
p.reload
p.check_m_flag
c
p = Plane.find 551
p.check_next_dates
p.check_ad_fields
p.check_cycles_fields
p.reload
p.check_next_dates
p.check_cycles_fields
p.check_ad_fields
p.check_cycles_fields
p.check_next_dates
"A motivated remote engineer looking for a company where my DevOps and extensive experence can make a perceptable difference".count
"A motivated remote engineer looking for a company where my DevOps and extensive experence can make a perceptable difference".length
"A motivated remote engineer looking for a company where my DevOps and extensive Rails experience can make a perceptible difference.:".length
MaintenanceInterval
MaintenanceInterval.first
MaintenanceInterval.first.plane_status
Plane.first.status
Plane.first.plane_status
plane.current_maintenance_interval
Plane.first.current_maintenance_interval
Plane.first.current_maintenance_intervals
Plane.first.current_maintenance_interval
Plane.first 
p = _
p.plane_status
p.update_column('plane_status', 'Z')
p
p.reload
p.update_column('plane_status', 'A')
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
clear
exit
Plane.all.each do |plane|
  plane.update_column('plane_status', 'A') unless plane.current_maintenance_interval
  plane.check_m_flag
end
clear
plane
plane = Plane.find 1814
plane.release_date
plane.plane_release_date
git status
p.type
p.plane_type
p.aircraft_tyep
p.aircraft_type
Plane.first.aircraft_type
Plane.first.plane_type
Plane.first.category_type
"02%2F13%2F2016".gsub('%2F', '/')
@reservation
@reservation.start_time
@reservation.start_time.year, @reservation.start_time.month, @reservation.start_time.day
(@reservation.start_time.year, @reservation.start_time.month, @reservation.start_time.day)
(@reservation.start_time.year, @reservation.start_time.month, @reservation.start_time.day)params[:start_hour_index].to_i
params[:start_hour_index].to_i
exit
CoursesSection::CourseClass.first
CoursesSection::CourseClass.first.instructor_id
CoursesSection::CourseClass.first.instructor
whereami
new_params
new_params[:date_completed] = Date.parse(new_params[:date_completed])
c
SchoolInstance.first.rganizations
SchoolInstance.first.organizations
SchoolInstance.last.organizations
SchoolInstance.find(7).organizations
SchoolInstance.find(7).organizations.order(asc: 'name')
Maintenance::Inter
Maintenance::Interval
clear
Plane.find 472
plane = _
plane.plane_status
plane.plane_status = "U"
plane.save(validate: false)
clear
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!$
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
plane
plane.current_maintenance_interval
exit
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
User.find 657
u = _
claer
clear
User.pilots
set_school
User.pilots
User.pilots.active
User.only_acitve.pilots
User.only_active
User.where(active: true).pilots
User.where(active: true).pilots.count
User.pilots.count
git status
Plane.first.insurance
Plane.first.insurance_surcharge_per_hour
BillingSection::Item
BillingSection::Item.columns.sort
BillingSection::Item.column.sort
BillingSection::Item
BillingSection::Item.column_names.sort
BillingSection::ItemsHelper
associated_with BillingSection::Item
associated_with BillingSection::Item.first.receipts
associated_with Maintenance::WorkOrderItem
CourseAssocGradingType.first
LessonAssocType.first
LessonAssocType
associated_with Maintenance::WorkOrder
exit
associated_with Maintenance::WorkOrder
Maintenance::WorkOrder.first.maintenance_checklist_templates
Maintenance::WorkOrder.first.maintenance_checklist_templates.first
Maintenance::PurchaseOrder
BillingSection::Item.column_names.sort
associated_with BillingSection::Item
params[:mx]
params[:smx]
c
params[:smx]
params[:mx]
c
params
c
format
s
format.html
format.js
format
c
a =[1,4,0]
a.sort
a
whereami
params[:q]
params[:q][:s]
params[:q][:s].c
c
cioh.split(' ').last == 'asc'
cioh.split(' ').last
@items.sort{|k,z| k.current_inventory_on_hand <=> z.current_inventory_on_hand}
c
cioh.split(' ').last
c
@items.sort!{|k,z| k.current_inventory_on_hand <=> z.current_inventory_on_hand}
@items.collect(&:current_inventory_on_hand)
@items.collect(&:current_inventory_on_hand).sort
@items.sort!{|k,z| k.current_inventory_on_hand <=> z.current_inventory_on_hand}.collect(&:current_inventory_on_hand)
c
@items.collect(&:current_inventory_on_hand)
@items = @items.sort{|k,z| k.current_inventory_on_hand <=> z.current_inventory_on_hand}
@items.collect(&:current_inventory_on_hand)
c
@items = @items.sort{|k,z| z.current_inventory_on_hand <=> k.current_inventory_on_hand}
@items.paginate(10
)
@items.paginate(10)
c
Maintenance::WorkOrder
associated_with Maintenance::WorkOrder
Maintenance::WorkOrder.last
wo = _
wo.customer = nil
wo.save!
wo.save(validate: false)
associated_with Maintenance::WorkOrder
Maintenance::WorkOrder.table_name
Plane.first.plane_status
"a".in?(%w{a u})
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
exit
Plane.all.each{|p| p.save }
Plane.all.each do 
  SchoolInstance.current_school = SchoolInstance.find(p.school_instance_id)
  p.save
end
Plane.all.each do |p|
  SchoolInstance.current_school = SchoolInstance.find(p.school_instance_id)
  p.save
end
exit
Plane.last
p = _
p.save!
set_school
p.save!
params
@mx
@mx = true if params[:mx] || params[:smx]
c
BillingSection::Item.first.expire_date
params[:billing_section_item][:expire_date]
c
''.empty?
''.blank?
nil.blank?
exit
MaintenanceInterval.last.plane_status
MaintenanceInterval.last
MaintenanceInterval.last.interval_type[0].upcase
clear
r co
exit
Plane.all.each do |p|
  BackgroundWorker::Planes::UpdateMFlag.perform_async(p.id)
end
nil.blank?
[].blank?
clear
Plane.find 528
p = _
p.pending_maintenance?
p.current_maintenance_phase
exit
Plane.first
p = _
p.save
set_school
p.save
p.reload
p.update_column(:m_flag_messages, "")
p.reload
p.save
p.reload
[nil, 1, 4].compact
Plane.find 615
p = _
p.school_instance
clear
exit
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
clear
Maintenance::WorkOrder.last.serviced_plane
Maintenance::WorkOrder.last.serviced_plane.owner
associated_with Maintenance::WorkOrder.last.serviced_plane
associated_with Maintenance::WorkOrder.last.serviced_plane.organization
associated_with Maintenance::WorkOrder.last.serviced_plane
Maintenance::WorkOrder.last.serviced_plane
Maintenance::WorkOrder.last.serviced_plane.tail_number
task
c
Maintenance::WorkOrder.last.tasks
Maintenance::WorkOrder.last.tasks.first
taks = _
associated_with task
associated_with taks
woi = taks.work_order_items.first
taks.work_order_items
Maintenance::WorkOrderTask.find 1531
Maintenance::Task.find 1531
task = _
task.work_order_items
task
task.reload
task
associated_with task
task.work_order_items
task.work_order_items.first
task.work_order_items.first.parent_id
task.work_order_items.first.parent
task.work_order_items
associated_with task
task
task.description
task.item_category
task
task.work_order_items
task.work_order_items.first
task.work_order_items.first.item_category
BillingSection::ItemCategory.all.collect(&:description).uniq
clear
Maintenance::WorkOrder.first
Plane.first.tail_and_type 
Plane.first.tail_and_type
Plane.first.tail
Plane.first.tail_number
Maintenance::WorkOrderItem.find 1446
item = _
item.item_category
line
line.first
line.first.item_category
task.work_order_items
task.work_order_items.collect{|k| k.item_category.name}
task.work_order_items.collect{|k| k.item_category.description}
c
Maintenance::WorkOrderItem.first
Maintenance::WorkOrderItem.first.traceable?
Maintenance::WorkOrderItem.first.trackable?
"".blank?
nil.blank?
Maintenance::Task
Maintenance::Task.find 1533
k =_
k.description = w|As a MX User,
in Mx 
For "completed" work orders on this link:https://demo4.testing.myflighttrain.com/maintenance/work_orders  - INSTEAD of update make it say "View WO"
As a mx user, viewing page: https://csa.testing.myflighttrain.com/maintenance/work_orders , if a WO is in completed status, 
I expect to see the action/link for the completed WO read as "View WO"  http://screencast.com/t/DE0pWerMX
If the status is in closed, with an invoice date, make the "print estimate" option/link say "Final Invoice"
http://screencast.com/t/x4MryzNj5
load_factories
k.description = Faker::Lorem.paragraph(6)
k.description = Faker
load 'faker'
FFaker
k.description = FFaker::Lorem.paragraph(6)
k.description += FFaker::Lorem.paragraph
k
k.comments = k.description
k.instructions = k.descriptin
k.instructions = k.description
k.save!
Maintenance::WorkOrder.all.collect(&:last_status).uniq
Maintenance::WorkOrder.first.invoiced_date
Maintenance::WorkOrder.first
Maintenance::Task
clear
Maintenance::WorkOrder.last
wo = _
wo.tasks
Maintenance::Task.last
task = _
task.work_order
wo = _
wo.tasks
wo.tasks.first
t = _.dupe
t = _.clone
t.save!
t.reload
t
k = t.clone()
k
k = t.deep_clone
k
k.save!
k.name
k
k.title = task 2
k
k.title = "task 2"
k.save!
k = t.deep_clone
k.title = "task 3"
k.save!
clear
Maintenance::Task
cat
c
cat_items = work_order.tasks.where(cat => true)
cat
c
catigory
cat_items = work_order.tasks.where(catigory => true)
s
Maintenance::Task.last
Maintenance::Task.find 1533
stickers
stickers.collect(&:category)
c
Maintenance::ConsolidatedSticker.last
Maintenance::ConsolidatedSticker.last.work_order
xit
exit
Maintenance::ConsolidatedSticker.last.work_order
Maintenance::ConsolidatedSticker.last
Maintenance::ConsolidatedSticker.lastexit
exit
Maintenance::ConsolidatedSticker.last
associated_with Maintenance::ConsolidatedSticker.last
associated_with Maintenance::ConsolidatedSticker.last.work_order
Maintenance::ConsolidatedSticker.last.work_order
Maintenance::ConsolidatedSticker
routes
show-routes
clear
Plane.first
exit
Maintenance::ChecklistSchedule.last
clear
Maintenance::ChecklistSchedule.delete_all
Maintenance::Supplier
exit
Maintenance::Suppliers.find 561
Maintenance::Supplier.find 561
supplier = _
supplier.organization
supplier.organization.to_sql
supplier.organization
exit
Maintenance::Supplier.find 561
supplier = _
supplier.organization
supplier.organization = BillingSection::Organization
supplier.organization = BillingSection::Organization.where(school_instance_id: 43).first
supplier.save!
supplier.reload
supplier.organization
clear
exit
CircleCi.configure do |config|
  config.token = '9b38027e9a022b85420ce946746ba883e453a2b2'
end
require circleci
require 'circleci'
CircleCi.configure do |config|
  config.token = '9b38027e9a022b85420ce946746ba883e453a2b2'
end
res = CircleCi::Project.all
res.success?
res = CircleCi::User.me
res = CircleCi::Project.all
CircleCi.configure do |config|
  config.token = '4fca0ebba3e83ea9a84b4e6389382ece01c4812d'
end
res = CircleCi::Project.all
res.success?
res = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'development'
k = _
k.body['status']
res = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'development'
res.body['status']
Branch.first
exit
Branch
exit
Branch
Branch.new
b = _
b.branch = 'feature/114375385-MX_Suppliers'
b.author = 'RRM'
b.pivotal_id = 114375385
b.pivitol_id = 114375385
b.pivotal_project_id = 1510870
b.save!
b.update_circle_status!
c
b
b.reload
b.update_circle_status!
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.branch
require 'circleci'
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.branch
b.update_circle_status!
c
b.update_circle_status!
require 'circleci'
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.branch
c
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.branch
b.update_circle_status!
require 'circleci'
branch
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.split('/').last
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', development
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'development'
exit!
require 'circleci'
CircleCi.configure do |config|
  config.token = '4fca0ebba3e83ea9a84b4e6389382ece01c4812d'
end
Branch.first
b = _
b.update_circle_status!
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.split('/').last
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', development
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'development'
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', '110468084_course_pdf_tyos'
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch.split('/').last
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'feature%2F112084793-custom_weather_link'
CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', 'feature/112084793-custom_weather_link'
clear
exit
clear
b.update_pivotal_status!
b
b.reload
b.update_pivotal_status!
b
b.reload
b.branch = 'development'
b.save
b.update_circle_status!
c
b
b.reload
b.pivotal_project_id = '1510870' #/stories/114791017
b.pivitol_id = 114791017
b.save
b.update_pivotal_status!
b
b.reload
b.update_pivotal_status!
b.reload
b.update_circle_status!
c
b
b.reload
b.branch
client = TrackerApi::Client.new(token: '33dc02bfbf6e09178296f26263d4f734')
project  = client.project(b.pivotal_project_id)
project
story = project.story(b.pivitol_id)
story
story.current_status
exit
b = Branch.last
b.update_pivotal_status!
story.current_status
story
cd story
ls
story.owners
owners
current_state
exit
b.update_pivotal_status!
c
b.pivotal_status
exit
b = Branch.last
b.update_pivotal_status!
b.reload
b.update_circle_status!
b.reload
b.pivotal_project_id = 863081
b.save
b.branch
b.branch = "development"
b.save
b.reload
b.update_circle_status!
b.reload
exit
b = Branch.last
clear
b.update_circle_status!
b.reload
b.update_circle_status!
reload
reload!
b = Branch.last
b.reload
b.update_pivotal_status!
b.update_circle_status!
exit
b = Branch.last
b.update_circle_status!
exit
require 'circleci'
CircleCi.configure do |config|
  config.token = '4fca0ebba3e83ea9a84b4e6389382ece01c4812d'
end
b = Branch.last
b.update_circle_status!
client = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch
client.body['status']
client = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', branch
client.body
client.body['status']
client
clear
exit
git status
exit
Branch.last 
b = _
b.update_circle_status!
require 'circleci'
CircleCi.configure do |config|
  config.token = '4fca0ebba3e83ea9a84b4e6389382ece01c4812d'
end
client = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2',"development"
client.body['status']
client = CircleCi::Project.build_branch 'FSLMFProducts', 'MyFlightTrain-com-3.2', "feature/114528449_is_lecture_nil"
exit
clear
exit
exit!
Branch.last.update_circle_status!
client.body
client.body['status']
client.body
client.body.first
exit!
Branch.last.update_circle_status!
Branch.last
git stBranch.last
Branch.last
b = _
b.update_circle_status!
b
b.reload
b.update_pivotal_status!
b
b.reload
CircleCi.configure do |config|
  config.token = '4fca0ebba3e83ea9a84b4e6389382ece01c4812d'
end
(3969..4455).each do |n|
  CircleCi::Build.cancel 'FSLMFProducts', 'MyFlightTrain-com-3.2' "#{n}"
(3969..4455).each do |n|
  k = CircleCi::Build.cancel 'FSLMFProducts', 'MyFlightTrain-com-3.2', "#{n}"
  k.body['outcome']
end
(3969..4455).each do |n|
  k = CircleCi::Build.cancel 'FSLMFProducts', 'MyFlightTrain-com-3.2', "#{n}"
  puts  k.body['outcome']
end
clear
exit
BillingSection::Organization
BillingSection::Organization.first
BillingSection::Organization.first.organization_type
Role.where(name: 'admin'(
Role.where(name: 'admin')
Role.find_or_create(name: 'admin')
clear
exit
load_factories
SchoolInstance.find
SchoolInstance.first
SchoolInstance.first.billing_section
cd SchoolInstance.first
show-source
exit
load_factories
exit
SchoolInstance.first
exit
pwd
ls
SchoolInstance.first
exit
SchoolInstance.first
load_factories
FactoryGirl.build(:school_instance_for_test)
k = _
k.save!
k
k.persisted?
exit
plane
plane.next_50_hour
current_school.overflight_prevention.hours_before_interval
SchoolInstance.current_school.overflight_prevention.hours_before_interval
SchoolInstance.current_school.overflight_prevention.hours_before_interval.to_f
checklists = validator.checklist$
checklists = validator.checklist
c
checklists
next_100_hour = ((plane.try(:next_100hr_service_due) || 99_999) - plane.service_device_hours)
next_100_hour_passing = (next_100_hour > current_school.overflight_prevention.hours_before_interval)
next_100_hour_passing = (next_100_hour > SchoolInstance.current_school.overflight_prevention.hours_before_interval)
SchoolInstance.current_school.overflight_prevention.hours_before_interval
SchoolInstance.current_school.overflight_prevention.hours_before_interval.to_f
c
checklists
next_100_hour = ((plane.try(:next_100hr_service_due) || 99_999) - plane.service_device_hours)
SchoolInstance.current_school.overflight_prevention.hours_before_interval
SchoolInstance.current_school.overflight_prevention.hours_before_interval.to_f
c
checklists
c
checklists
ad.flight_hrs_until_check
SchoolInstance.current_school.overflight_prevention.airworthiness_directive_hours_within_margin?(ad)
SchoolInstance.current_school.overflight_prevention.hours_before_interval.to_f
c
checklists
plane.flight_hrs_ad.flight_hrs_until_check
ad.flight_hrs_until_check
@school.overflight_prevention.airworthiness_directive_date_within_margin?(ad)
ad
SchoolInstance.current_school.overflight_prevention.airworthiness_directive_date_within_margin?(ad)
SchoolInstance.current_school.overflight_prevention.airworthiness_directive_hours_within_margin?(ad)
@school.overflight_prevention.airworthiness_directive_hours_within_margin?(ad)
c
DateTime.parse "2013-02-12T21:34:01Z"
k = case 'success'
when /success/i
  'red'
else
  'fuck'
end
clear
exit
BillingSection::Organization.first
BillingSection::OrganizationType.first
BillingSection::OrganizationType.all.collect(&:name).uniq
Maintenance::Supplier
eixt
exit
Maintenance::Supplier.first
s = _
supplier = _
set_school(7)
supplier.save!
exit
Maintenance::Supplier.first
set_school(7)
suppier = Maintenance::Supplier.first
supplier.save!
supplier = Maintenance::Supplier.first
supplier.save!
exit
set_school(7)
supplier = Maintenance::Supplier.first
BillingSection::Organization.first
exit
BillingSection::Organization.first
k = _
k.save
set_school(7)
Maintenance::Supplier.first
ms = _
ms.save!
exit
Maintenance::Supplier.first
ms = _
ms.save
exit
Maintenance::Supplier.first
ms.save!
ms = Maintenance::Supplier.first
ms.save!
set_school(7)
ms.save!
self.reload
self.organization
self.organization_id
create_org
BillingSection::Organization.create(
  school_instance_id: SchoolInstance.current_school.id,
  organization_type_id: BillingSection::OrganizationType.where(
    school_instance_id: SchoolInstance.current_school.id,
name: 'External').first.id)
exit
set_school 7
ms = Maintenance::Supplier.first
ms.save!
bso
bso.valid?
bso.errors
exit
exit!
set_school 7
Maintenance::Supplier.first
ms = _
ms.save!
set_school 7
ms.save!
exit!
set_school 7
ms = Maintenance::Supplier.first
ms.save!
type = BillingSection::OrganizationType.where( school_instance_id: SchoolInstance.current_school.id,
  name: 'External'
)
exit
exit!
set_school 7
ms = Maintenance::Supplier.first
ms.save!
c
type.id
type.first.id
c
bso.valid?
bso.save!
c
self.reload
organization
self.name
c
exit
set_school 7
ms = Maintenance::Supplier.first
ms.organization
org = _
org.supplier
exit
ms = Maintenance::Supplier.first
ms.org
ms.organization
org = _
set_school 7
org.name = org.name + ' : fucker'
org.save!
org.supplier
exit
ms = Maintenance::Supplier.first
set_school 7
ms.organization
org = _
org.supplier
org.name = "Wing Aero Products"
org.save!
c
org.name = "Wing Aero Products Fucker"
org.save!
c
org.supplier
exit
Branch
Branch.first
exit
BillingSection::Organization.lsat
BillingSection::Organization.last
Maintenance::Supplier
exit
Maintenance::SerialNumberedItem.class.name
Maintenance::SerialNumberedItem.name
exit
Maintenance::SerialNumberedItem
Maintenance::SerialNumberedItem.first
Maintenance::TrackedItem.first
Maintenance::TrackedItem.count
clear
Maintenance::TrackedItem.new.picked?
Error
Exception
NotImplementedError
NotImplementedError.new
NotImplementedError.new ' Fucker "
'
Maintenance::TrackedItem
exit
clear
User.first.id
User.firs
User.first
clear
Clear
clear
exit
Maintenance::TrackedItem.on_hand
Maintenance::TrackedItem
Maintenance::TrackedItem.column_name.sort
Maintenance::TrackedItem.column_names.sort
q
clear
exit
nil.empty
nil.empty?
Maintenance::TrackedItem.first
ti = _
ti.work_order_item
Maintenance::TaskItem
Maintenance::WorkOrderItem
Maintenance::task
Maintenance::Task
Maintenance::Task.find 1533
mt = _
mt.work_order_items
mt.work_order_items.last
woi = _
woi.tracked_item
woi.serial_number
woi.item
woi.tracked_item
woi.tracked_item.to_sql
exit
BackgroundWorker::Maintenance::Checklists::CreateScheduledWorker.new.perform(54)
exit
BackgroundWorker::Maintenance::Checklists::CreateScheduledWorker.new.perform(54)
n
schedule.frequency
n
c
clear
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(54)
n
create_on
c
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(54)
c
exit
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(54)
n
h
step
c
n
schedule.should_create_for?(create_on)
n
missing
missing_plane_ids
exit
Maintenance::Checklist.delete_all
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(54)
exit
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(55)
c
n
missing
missing_plane_ids
n
missing
missing_plane_ids
whereami
n
checklist
n
checklist
checklist.due_date
checklist.due_date.today?
c
Time.zone
set_school
school = _
school.timezone
school.zone
school.time_zone
exit
SchoolInstance.first.name
SchoolInstance.first
last
User.first.time_zone
:school.in?([:school])
exit
class Klass
  include Singleton
end
k = Klass.instance
k.new
Klass.instance
class Klass
  include Singleton
  def new(a, b)
    puts a
    puts b
  end
end
Klass.instance("fuck", "off")
class Klass
  include Singleton
  def initialize(school, user, location = nil)
    puts school
    puts user
    puts location
  end
end
Klass.instance("fuck", "it")
exit
Util::TimeZoneManager
Util::TimeZoneManager.instance
k = _
k.set_variables(User.first, SchoolInstance.first)
k.school
exit
set_school
user = SchoolInstance.current_school.users.fist
user = SchoolInstance.current_school.users.first
exit
Time.zone
exit
SchoolInstance.where(school_name: 'Chicagoland Avation')
SchoolInstance.where(school_name: '%hicagoland%')
SchoolInstance.where(school_domain: 'cla')
SchoolInstance.where(domain: 'cla')
SchoolInstance.where(domain: 'cla').first
SchoolInstance
SchoolInstance.where('school_name like ?', '%land%")
SchoolInstance.where('school_name like ?', '%land%'))
SchoolInstance.where('school_name like ?', '%land%')
"
SchoolInstance.where('school_name like ?', '%land%')
SchoolInstance.where('school_name like ?', '%land%').first
set_school(30)
s = _
s.time_zone
set_school(30)
school = _
school.time_zone
User.first
User.first.time_zone
User.where('time_zone IS NOT ?', nil).fist
User.where('time_zone IS NOT ?', nil).first
User.where('time_zone IS NOT ?', "").first
User.where(username: 'csaadmin').first
User.where(username: 'admincsa')
User.where(username: 'admincsa').first 
user = _
user.time_zone
Time.zone
user.time_zone = "Mountian Time"
user.save!
user.time_zone = "-7:00"
user.save
user.time_zone = Time.zone
user.save
user.time_zone = "Mountain Time (US & Canada)"
user.save!
Time.zone
Time.zone.offset
cd Time.zone
ll
local_to_utc
utc_offset
exit
user.time_zone
Time.parse(user.time_zone)
clear
BackgroundWorker::Maintenance::Checklists::CreateScheduledWorker.new.perform(56)
BackgroundWorker::Maintenance::Checklists::ScheduleSingleDateWorker.new.perform(56)
Plane.find 823
Maintenance::Checklist.find 827
Maintenance::Checklist.find 823
exit
Util::TimeZoneManager.zone_for_school(SchoolInstance.find(30))
Time.zone.now
Time.zone
Tod::TimeOfDay("13:00")
create_on = Date.today
execute_at = create_on.at execution_time
execute_at = create_on.at Tod::TimeOfDay("13:00")
BackgroundWorker::Maintenance::Checklists::Overwatch
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.perform_at(execute_at, 4)
execute_at = create_on.at Tod::TimeOfDay("16:00")
BackgroundWorker::Maintenance::Checklists::Overwatch::AutoDownAirframeWorker.perform_at(execute_at, 4)
Time.zone
Time.zone.now
SchoolInstance.first
SchoolInstance.first.time_zone
MaintenanceInterval
Maintenance::Checklist
Maintenance::ChecklistSchedule
Maintenance::ChecklistSchedule.last
associated_with Maintenance::ChecklistSchedule.last
associated_with Maintenance::ChecklistSchedule.checklist_template
associated_with Maintenance::ChecklistSchedule.last.checklist_template
create_on
schedule
exit!
Tod::TimeOfDay("1300")
create_on
c
start_time
c
create_on
c
genesis
start_time
c
SchoolInstance.first.time_zone
SchoolInstance.first.time_zone = "fuckit"
instace.school
self.instance
self.instance.school
n
instance.school
instance.school.time_zone = 'fuck'
instance.school
instance.school.first
instance.school
c
exit!
BillingSection::Item
BillingSection::Item.table_name
exit
''.empty?
nil.empty?
nil.blank?
User.where(user_name: 'admincsa')
User.where(username: 'admincsa')
User.where(username: 'admincsa').first
user = _
user.time_zone = ''
user.save!
clear
exit
BackgroundWorker::Maintenace::Checklist::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
BackgroundWorker::Maintenance::Checklist::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
exit
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_overdue_checklists!
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.release_aircraft_from_downed_status!
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.check_for_releaseable_aircraft!
clear
exit
Maintenance::ChecklistSchedule
Maintenance::ChecklistSchedule.last
Maintenance::ChecklistSchedule.delete_all
Maintenance::Checklist.delete_all
exit
TrackedItemHistory
TrackedItemHistory.first
TrackedItemHistory.count
TrackedItemHistory.table_name
exit
BillingSection::Item.first
BillingSection::Item.column_names.sort
Maintenance::TrackedItem
Maintenance::TrackedItem.column_names
Maintenance::TrackedItem.column_names.sort
Maintenance::TrackedItem.table_name
nil.blank?
exit
l
fire
Maintenance::TrackedItem
.column_names.sort
exit
Maintenance::TrackedItem.column_names.sort
Maintenance::TrackedItem.table_name
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.table_name
clear
for i in 0..1
  puts i
end
for i in 1..1
  puts i
end
BillingSection::Item
BillingSection::Item.first
BillingSection::Item.first.batch_traceable
Maintenance::TrackedItem
Maintenance::TrackedItem.column_names
item
receipt
obj
c
n
i
qnty
c
Maintenance::TrackedItem.column_names.sort
exit
Maintenance::TrackedItem.column_names.sort
BillingSection::Item.last
BillingSection::Item.last.unit_quanity
BillingSection::Item.last.quantity
obj
obj.item
c
qnty = item[:this_qty].to_i
qnty = (obj.item.quantity * qnty) if obj.item.quantity
c
self
self.reload
self.id
self.ite
c
self
self.item
self.item.batch_traceable
self.batch_number
c
Maintenance::PurchaseOrderItem.column_names.sort
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item_location
Maintenance::TrackedItem.last.batch_number
bn = _
Maintenance::TrackedItem.where(batch_number: bn).count
Maintenance::TrackedItem.where(batch_number: bn).last
Maintenance::TrackedItem.where(batch_number: bn).last.item
Maintenance::TrackedItem.where(batch_number: bn).last.item.quantity
Maintenance::TrackedItem.where(batch_number: bn).last.item
item = _
item.tracked_items
tracked_items = item.tracked_items
tracked_items.group(['batch_number', 'item_location_id'])
tracked_items.group(['batch_number', 'item_location_id']).first
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id'])
Maintenance::TrackedItem.where(item_id: item.id, group: ['batch_number', 'item_location_id'])
Maintenance::TrackedItem.where(item_id: item.id, group: ['batch_number', 'item_location_id']).first
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id']).all
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id']).count
Maintenance::TrackedItem.all.group(['batch_number', 'item_location_id']).count
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id']).count
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id']).first
Maintenance::TrackedItem.where(item_id: item.id).group(['batch_number', 'item_location_id']).count
a = _
a.kys
a.keys
a.first
a.values
a.values.first
SchoolInstance.column_names.sort
Maintenance::WorkOrder.find 703
wo = _
wo.work_in_progress_or_after?
whereami
item
whereami
trabcked_items
tracked_items
tracked_items.first
tracked_items.first.batch_number
c
Maintenance::WorkOrderItem.table_name
Maintenance::TrackedItem
exit
Maintenance::TrackedItem.last
ti = _
ti.associated_items
ti.associated_items.first
exit
Maintenance::TrackedItem.last.associated_items
[1,2,3,4,5]
k = _
k[0..3]
Maintenance::WorkOrderItem.last
Maintenance::TrackedItem
associated_with Maintenance::TrackedItem
tracked
c
tracked
c
tracked_items
c
clear
Maintenance::WorkOrderItem.last
k = _
k.tracked
k.picked
item.object
item.object.picked?
item.object.item.tracked_items
whereami
ti = item.object.item.tracked_items.on_hand.group(['batch_number', 'item_id'])
ti.reject!{|k| k.maintenance_receipt && k.maintenance_receipt.used? }
ti
c
exit
whereami
item.object.picked?
c
item.object.item.tracked_items.on_hand.group(['batch_number', 'item_id'])
item.object.picked?
c
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.qnty
Maintenance::WorkOrderItem.last.qty
exit
tracked_items.count
picked_nr
n
tracked
n
c
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.item.
Maintenance::WorkOrderItem.last.item
Maintenance::WorkOrderItem.last.item.current_inventory_on_hand
Maintenance::WorkOrderItem.last.item.tracked_items
Maintenance::WorkOrderItem.last.item.tracked_items.count
Maintenance::WorkOrderItem.last.item.tracked_items.on_hand.count
exit
Maintenance::WorkOrderItem.last.item.tracked_items.on_hand.count
Maintenance::WorkOrderItem.last.item.current_inventory_on_hand_for_barcode('0987654321')
Maintenance::TrackedItem
Maintenance::WorkOrderItem.last.item.on_hand
Maintenance::WorkOrderItem.last.item.tracked_items.on_hand
Maintenance::WorkOrderItem.last.item.tracked_items.on_hand.count
Maintenance::WorkOrderItem.last.item.tracked_items.current_inventory_on_hand
Maintenance::WorkOrderItem.last.item.tracked_items.current_inventory
clear
self.tracked_items
c
self.tracked_items
self.tracked_items.first.on_hand
c
Maintenance::WorkOrderItem.last.tracked_items
Maintenance::WorkOrderItem.last.tracked_items.count
Maintenance::WorkOrderItem.last
woi = _
woi.update_column('picked_nr', 6)
clear
item
item.objeckt
item.object
item.object.batch_number
c
racked_items.count < picked_nr
tracked_items.count < picked_nr
n
possible_parts.count < to_pick
n
tracked
tracked.count
c
Maintenance::Receipt
associated_with Maintenance::Receipt
Maintenance::Receipt.first
mr = _
mr.bin = "1"
mr.changed
mr.bin_was
0 > nil
nil.blank?
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.first.picked_nr
Maintenance::WorkOrderItem.table_name
[1,2,3,4][-1]
[1,2,3,4][-1..3]
[1,2,3,4][-1..-4]
[1,2,3,4][0..-1]
n
to_remove
n
release_items
n
c
release_items
self.tracked_items
self.tracked_items = (self.tracked_items - release_items)
c
clear
associated_with Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.first.receipts_work_order_items
Maintenance::ReceiptsWorkOrderItem
Maintenance::ReceiptsWorkOrderItem.first
Maintenance::ReceiptsWorkOrderItem.first.receipt
Maintenance::ReceiptsWorkOrderItem.first.receipt.work_orders
Maintenance::ReceiptsWorkOrderItem.first.receipt.work_order
Maintenance::ReceiptsWorkOrderItem.first.work_order_item.work_order
Maintenance::ReceiptsWorkOrderItem.first.work_order_item
Maintenance::ReceiptsWorkOrderItem.first
Maintenance::ReceiptsWorkOrderItem.first.work_order_item
Maintenance::WorkOrderItem
associated_with Maintenance::WorkOrderItem
associated_with Maintenance::ReceiptsWorkOrderItem
associated_with Maintenance::Receipt
Maintenance::Receipt
Maintenance::Receipt.last.work_order_items
Maintenance::Receipt.first.work_order_items
Maintenance::WorkOrder.last.receipts_work_order_items
Maintenance::WorkOrderItem.last.receipts_work_order_items
Maintenance::WorkOrderItem
Maintenance::ReceiptWorkOrderItem
Maintenance::ReceiptsWorkOrderItem
Maintenance::ReceiptsWorkOrderItem.column_names
Maintenance::Receipt
Maintenance::Receipt.column_names
Maintenance::Receipt.column_names.sort
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item
item = _
item.tracked_item.count
item.tracked_items.count
item.tracked_items.on_hand
item.tracked_items.on_hand.count
item.tracked_items.on_hand.group(['batch_number', 'item_location_id'])
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).first
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).first.count
item.tracked_items.on_hand.group(['batch_number', 'item_location_id'])
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).count
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).count.to_a
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).count.to_a.first
item.tracked_items.on_hand.group(['batch_number', 'item_location_id']).count.to_a.first.last
exit
Maintenance::Receipt
receipt
item
c
picked_nr
c
picked_nr_changed
n
picked_nr_changed
self.picked_nr_changed
self.picked_nr_changed?
c
n
picked_nr_changed
c
n
c
exit
ls
Maintenance::Receipt.last
whereami
n
receipt
receipt.batch_number
c
Maintenance::Receipt.last.barcode';&+#$
Maintenance::Receipt.last.barcode_number
n
batch_number
n
batch_number
n
receipt
c
Maintenance::Receipt
receipt
c
Maintenance::Receipt.last
Maintenance::Receipt.last.reload
Maintenance::Receipt.last.reload.batch_number
Maintenance::Receipt.last.reload.purchase_order
Maintenance::PurchaseOrder
Maintenance::Receipt.table_name
exit
Maintenance::Receipt.column_names.sort
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.batch_number
Maintenance::ReceiptsWorkOrderItem
exit
self.class.name
self.id
plane_id
c
BackgroundWorker::Maintenance::Intervals::ReleasePlaneWorker.new
pw = _
pw.perform(2, "Maintenance::Checklist", 820)
plane
plane.maintenance_intervals.current_intervals
n
mx_intervals
c
clear
n
MaintenanceInterval.find 10342
mi = _
mi.end_time = DateTime.now
mi.save!
clear
c
User.first.versions.last
Plane.first.versions.last.reify
Plane.first.versions.count
Plane.last.versions.count
Plane.last.versions.last.reify
exit
Diffy
require 'diffy'
exit
Diffy
exit
MaintenanceInterval.first
MaintenanceInterval.first.release_plane_from_interval!
exit
MaintenanceInterval.first.release_plane_from_interval!
exit
MaintenanceInterval.first.release_plane_from_interval!
exit
MaintenanceInterval.first.release_plane_from_interval!
exit
MaintenanceInterval.first.release_plane_from_interval!
BackgroundWorker::Maintenance::Checklists::Overwatch::FiveMinWorker.watcher!
clear
RAILS_ENV
ENV['RAILS_ENV']
exit
@work_order
@work_order.errors
c
@work_order.errors
c
@work_order.errors
@work_order.work_order_items.collect(&:errors)
c
@work_order.work_order_items.collect(&:errors)
@work_order.work_order_items.first
woi = _
woi.valid?
woi.errors
woi.batch_number
woi.item
woi.item.valid?
woi
woi.estimate_item
c
@work_order.errors
@work_order.work_order_items.first
k = _
k.valid?
c
@work_order.errors
c
{a: 1}
k = _
k[:b]
MasterFlightLog.first
MasterFlightLog.column_names.sort
clear
MasterFlightLog.first.sync_plane_data
@master_log.http://i.kinja-img.com/gawker-media/image/upload/s--ppOnxGNQ--/c_scale,fl_progressive,q_80,w_800/xetw8q5wqkqd9773rzto.jpg
@master_log.override_device_times
@master_log.devices_times_descrepency?
c
exit
Maintenance::WorkOrderItem
Maintenance::WorkOrderTask
Maintenance::Task
Maintenance::Task.description
Maintenance::Task.last.description
Maintenance::Task.find(1533).description
Maintenance::Task.find(1533).name
Maintenance::Task.find(1533)
Maintenance::Task
Maintenance::Task.find(1533)
Maintenance::Task.table_name
@task
params
@task.update_attributes(params["maintenance_task"])
@task.reload
@task.print_c
c
Plane.fisrt
Plane.first
Plane.first.open_mx_intervals
Plane.first.open_mxintervals
Plane.first.current_intervals
Plane.first.current_maintenance_intervals
Plane.first.current_maintenance_intervals.count
Plane.first.current_squawk_intervals.count
BillingSection::Item
BillingSection::Item.last.part_number
item.part_number
item
item.part_number
c
item.part_number
item
c
item.part_number
self.part_number = item.part_number
c
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.part_number
Maintenance::WorkOrderTask.find(1533)
Maintenance::Task.find(1533)
Maintenance::Task.find(1533).name
Maintenance::Task.find(1533).title
[].empty?
nil.blank?
Plane.find 15
p = _
p.plane_status
p.plane_status = 'A'
p.save(validate: false)
p.reload
p.plane_staus
p.plane_status
Maintenance::TrackedItem
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item.tracked_items
Maintenance::TrackedItem.last.item.tracked_items.first
ti = _
ti.picked?
ct ti
cd ti
show-method picked?
work_order_item
parent
cd ..
Maintenance::WorkOrder.find(1533).tasks
Maintenance::WorkOrder.find(1533).work_order_items
Maintenance::Task.find(1533)
Maintenance::Task.find(1533).work_order_items
Maintenance::Task.find(1533).work_order_items.last.picked_no
Maintenance::WorkOrderItem.find 1451
woi = _
woi.update_column('picked', false)
woi.update_column('serial_number', nil)
woi.update_column('serial_number', nil)c
c
woi.update_column('picked', false)
picked_changed?
picked_was
c
picked
!picked_changed?
picked_changed?
n
tracked
n
c
Maintenance::WorkOrderItem.find 1451
Maintenance::WorkOrderItem.column_names.sort
Maintenance::Task.column_names.sort
rake db:migrate --trace
exit
Maintenance::Task.column_names.sort
Maintenance::Task.find(1533)
Maintenance::ConsolidatedSticker.delete_all
clear
instructions
cat_items
catigory
c
catigory
c
catigory
c
exit
Maintenance::ConsolidatedSticker.delete_all
c
catigory
c
catigory
c
catigory
c
catigory
cat_items
cat_items.first
cat_items.first.comments
instructions = cat_items.reject{|k| !k.print_comments}.collect(&:comments)
c
Maintenance::ConsolidatedSticker.last
Maintenance::ConsolidatedSticker.delete_all
instructions
c
instructions
c
instructions
instructions.join(' ')
n
c
build
c
Maintenance::ConsolidatedSticker.last
Maintenance::ConsolidatedSticker.delete_all
self.create!(build)
instructions
instructions.join
instructions.join(' ')
build
exit!
exit!
Maintenance::ConsolidatedSticker.delete_all
instructions
self.create!(build)
c
clear
x55et52pii
location_tax
location
c
location_tax
c
BillingSection::ItemType.where('description LIKE ?', '%Item sold by quantity%')
BillingSection::ItemType.where('description LIKE ?', '%Item sold by quantity%').first
exit
Plane.find 15
p = _
p.view_plane_status
p.plane_display_status
p.current_maintenance_intervals
exit
Maintenance::Task
Maintenance::Task.column_names.sort
builder.object
builder.object.bisplay_id
c
exit
Maintenance::Checklist
Maintenance::Task
Maintenance::Task.last.work_order_items
Maintenance::Task.column_names.sort
[].blank?
''.blank?
exit
Maintenance::Task.last
Maintenance::Task.last.task_type
pending?
in_progess?
c
pending?
c
workflow_state
n
pending?
self.start_task!
exit!
pending
pending?
ll
whereami
n
c
start_task!
can_inspect
can_inspect!
self.can_inspect!
self.can_submit?
self.can_start_task?
self.can_inspect?
self.can_complete?
c
events
workflow_spec.events
states.events
self.class.workflow_spec.states
self.class.workflow_spec
can_start_task?
c
exit
Maintenance::Task.find 1533
task = _
task.pending?
task.workflow
task.workflow_spec
task.can_completed?
task.can_complete?
task.can_start_task?
task.save
task.save!
exit
Maintenance::Task.find 1533
task = _
task.start_task!
task.reload
task.workflow_state.titleize
exit
Maintenance::Task.find 1533
eix
exit
Maintenance::Task.all.each{|t| t.save! }
Maintenance::Task.find 1532
task = _
task.instructions.blank?
task.workflow_state = 'in_progress'
task.save!
task.reload
task.status
task.save!
task.status
task.update_column('workflow_state', 'pending')
task.reload
task.save!
task.reload
exit
can_start_task?
can_inspect?
can_complete?
workflow_status
workflow_state
ls
clear
whereami
self.events
self.workflow
self.w_
ls
current_states
current_state
current_state.events
exit!
Maintenance::Task.first.current_state
Maintenance::Task.first.current_state.events
Maintenance::Task.first.current_state.events.keys
Maintenance::Task.new.current_state.events.keys
Maintenance::Task.last
Maintenance::Task.find 1533
task = _
task.inspect!
task.workflow_state = "pending"
Maintenance::Task.new.current_state.events
Maintenance::Task.new
task = _
task.inspect!
task
task.pending?
task.current_state.events
task.can_inspect?
exit!
Maintenance::Task.new
task = )
task = Maintenance::Task.new
task.current_state
task.current_state.events
task.can_inspect?
task.can_complete?
task.can_stat_task?
task.can_start_task?
task.complete!
clear
Maintenance::Task.workflow_spect
Maintenance::Task.workflow_spec
Maintenance::Task.workflow_spec.states
Maintenance::Task.new.inspect
Maintenance::Task.new.complete
Maintenance::Task.new.completed
exit
Maintenance::Task.new.inspection_started
exit
Maintenance::Task.new.inspection_started
Maintenance::Task.new.inspection_started!
exit
Maintenance::Task.new.inspection_started!
exit
Maintenance::Task.new.inspection_started!
Maintenance::Task.new.inspection_started
Maintenance::Task.new
Maintenance::Checklist.new
Maintenance::Checklist.new.current_state
Maintenance::Checklist.new.current_state.events
Maintenance::Checklist.new.start!
k = Maintenance::Checklist.new; k.start!
Maintenance::Checklist.create.start!
k = Maintenance::Checklist.new
k.save
k.save!
exit
Maintenance::Checklist.in_progress
Maintenance::Checklist.where(workflow_state: 'in_progress')
Maintenance::Checklist.where(workflow_state: 'in_progress').first
k = _
k.current_state
k.current_state.events
k.complete!
exit
Maintenance::Task.new
k = _
k.start_task
k.start_task!
cd k
show-source
cd ::States::Maintenance::Task
ls
q
show-source
cd ..
can_start_task?
exit
Maintenance::Task.new
exit
Maintenance::Task.new
k = _
k.transition_started?
k.instructions.blank?
k.instructions = 'FUcker
'
k.instructions.blank?
k.can_start_task?
exit
Maintenance::Task.new
k = _
k.instructions = 'duh'
k.can_start_task?
k.start_task!
Workflow::create_workflow_diagram(Maintenance::Task)
::Workflow::create_workflow_diagram(Maintenance::Task)
include 'workflow'
::Workflow::create_workflow_diagram(Maintenance::Task.to_s)
Maintenance::Task.column_names
Maintenance::Task.first.status
Maintenance::Task.all.collect(&:status).uniq
exit
Maintenance::Task.last
k = )
k =Maintenance::Task.last
k.update_column('workflow_state', 'pending')
k.reload
k.pending?
k.can_start_task?
k.instructions = 'My instructions'
k.can_start_task?
k.can_start_task
k.can_start_task!
k.start_task!
Maintenance::Task.find 1533
exit
Maintenance::Task.find 1533
exit
Maintenance::Task.find 1533
Maintenance::Task.find 1536
task = _
!task.transition_started? && task.transition_inspected? 
!task.transition_started?
task.transition_started?
instructions.blank?
task.instructions.blank?
task.work_order_items.blank? && task.transition_inspected? 
task.work_order_items.blank?
task.work_order_items
task.work_order_items.
task.reload
task.work_order_items
task.work_order_items.blank?
task.work_order_items.blank? && task.transition_inspected? 
exit
task = Maintenance::Task.find 1536
task.work_order_items.blank? && task.transition_inspected? 
task.reload
task.can_inspection_started?
task.can_complete?
pending? && can_start_task?
c
in_progress? && can_inspection_started?
inspection_started!
self.reload
self.workflow_state
c
can_complete?
transition_inspected?
c
pending? && can_start_task?
in_progress? && can_inspection_started?
can_start_task?
pending?
task.transition_started?
transition_started?
can_start_task?
task.transition_inspected? 
task.workflow_state
workflow_state
transition_started?
!task.transition_inspected?
transition_inspected?
c
cd
c
exit
Maintenance::WorkOrder.last
Maintenance::WorkOrder.last.template?
Maintenance::ChecklistTemplate.first
Maintenance::ChecklistTemplate.first.work_order_template
Maintenance::ChecklistTemplate.first.work_order_template = Maintenance::WorkOrder.last
Maintenance::ChecklistTemplate.first.
ct = Maintenance::ChecklistTemplate.first
ct.work_order_template = Maintenance::WorkOrder.last
ct.save!
ct.work_order_template
ct.work_order_template.maintenance_checklists
ct.work_order_template
ct.work_order_template.maintenance_checklist_templates
ct.work_order_template.maintenance_checklist_templates.first
exit
Maintenance::WorkOrder.last
wot = _
wot.maintenance_checklist_templates
wot.maintenance_checklist_templates.first
Maintenance::ChecklistTemplate
exit
Maintenance::WorkOrder.last
wot = _
wot.maintenance_checklist_templates.first
Maintenance::WorkOrder.find 709
wot = _
wot.maintenance_checklist_templates
Maintenance::WorkOrder.find 710
Maintenance::WorkOrder.find 708
wot = _
wot.maintenance_checklist_templates.first
wot.maintenance_checklist_templates.first.update_column('work_order_template_id: 0')
wot.maintenance_checklist_templates.first.update_column('work_order_template_id', 0)
can_back_to_start?
!work_completed? && transition_started? 
!work_completed?
work_completed?
transition_started?
work_order_items.blank?
c
can_back_to_start?
c
exit
params[:show_templates]
c
params[:show_templates] == 'true'
cc
c
params[:show_templates] == 'true'
params[:show_templates]
c
params[:show_templates]
c
Maintenance::Task.find 1533
task = _
task.work_order_items
task.work_order_items.reload
task.work_order_items.reload.last
associated_with task.work_order_items.reload.last
task.work_order_items.reload.last.item_category
task.work_order_items.reload.last
task.work_order_items.reload.last.item_category_id
task.work_order_items.reload.last.hours
task.work_order_items.reload.last.qnty
task.work_order_items.reload.last.column_names
task.work_order_items.reload.last.class.column_names
task.work_order_items.collect(&:decription)
task.work_order_items.collect(&:description)
exit
BillingSection::Invoice.find 218445
invoice = _
invoice.billing
invoice.work_order
GeneralDocument.column_names.sort
exit
MaintenanceInterval
MaintenanceInterval.column_names
MaintenanceInterval.column_names.sort
MaintenanceInterval.find(10345)
mx = _
mx.genesis_type
mx.genesis_id
show-route
show_routes
routes
show-routes
Maintenance::PurchaseOrder
Maintenance::PurchaseOrder.find 46
po = _
associated_with po
BillingSection::Invoice
associated_with BillingSection::Invoice
BillingSection::Invoice.when(invoice_number: 46)
BillingSection::Invoice.where(invoice_number: 46)
BillingSection::Invoice.where(invoice_number: 46).first
BillingSection::Invoice
BillingSection::Invoice.column_names
BillingSection::Invoice.column_names.sort
Maintenance::PurchaseOrder
Maintenance::PurchaseOrder.count
BillingSection::Invoice
BillingSection::Invoice.find 46
Maintenance::PurchaseOrder.find 46
po = _
po.invoice
associated_with po
po
po.number
1.in?([1, 2])
exit
ENV['mail_safe_email']
exit
ENV['mail_safe_email']
ENV['MAIL_SAFE_EMAIL']
n
c
n
c
exit
e
c
require 'letter_opener_web'
require 'letter_opener'
exit
require 'letter_opener_web'
include 'letter_opener_web'
include LetterOpener::Web
require 'letter_opener'
exit
nil.blank?
proc { |fu| 'or' }
k = _
k.eval
k.run
k.call
new_address = if Rails.env.in?(%w{devtest testing review})
  "#{Rails.env}@myflighttrain.com"
elsif ENV['MAIL_SAFE_EMAIL']
  ENV['MAIL_SAFE_EMAIL']
end
MailSafe::Config.replacement_address = proc { |address| new_address.blank? ? 'testing@devtest@myflightsolutions.net' : new_address }
require 'mail_safe'
{ |address| new_address.blank? ? 'testing@devtest@myflightsolutions.net' : new_address }
proc { |address| new_address.blank? ? 'testing@devtest@myflightsolutions.net' : new_address }
_.call
exit
User.first
u = -
u = User.first
u.username = 'ker'
u.username_changed
u.username_changed?
1.day.ago - DateTime.now 
DateTime.now  - 1.day.ago
DateTime.now - 1.day.ago
DateTime.now - (1.day.ago)
(DateTime.now + 1.day.ago)
(DateTime.now + 1.second)
(DateTime.now + 1.second) - (DateTime.now)
(DateTime.now + 1.second) - (DateTime.now).to_i
(DateTime.now + 1.second) - (DateTime.now)
Maintenance::TimeTrackingEvent.last
Maintenance::TimeTrackingEvent.first
Role
Role.where(name: 'director_of_maintenance')
Role.all.collect(&:name).uniq
Role.first.persisted?
c
user_roles
user_roles && mx_labor_hour_roles)
(user_roles && mx_labor_hour_roles)
c
exit
Maintenance::TimeTrackingEvent.last
reload!
c
stopped && started
c
elapsed_time
elapsed_time = ( stopped.to_i ) - ( started.to_i )
n
c
elapsed_time
c
exit
Maintenance::TimeTrackingEvent.table_name
Maintenance::TimeTrackingEvent.column_names
Maintenance::TimeTrackingEvent.column_names.sort
MaintenanceInterval
MaintenanceInterval.column_names
exit
TimeTracking::Event
TimeTracking::Event.table_name
exit
TimeTracking::Event.table_name
reload
reload!
exit
TimeTracking::Event.table_name
exit
TimeTracking::Event.table_name
TimeTracking::Event.first
TimeTracking::Event.first.last
exit
TimeTracking::Event.table_name
TimeTracking::Event.first
exit
TimeTracking::Event.first
clear
TimeTracking::Event.first
associated_with TimeTracking::Event.first
TimeTracking::Event.first.timed_event
TimeTracking::Event.first.timed_event.to_sql
TimeTracking::Event.first
Maintenance::Checklist.find 124
clear
exit
Maintenance::Checklist.find 124
TimeTracking::Event.first
TimeTracking::Event.last
TimeTracking::Event.last.timed_event
SettingsPannel
SettingsPanel
AutoschedulerSettingsPanel
AutoschedulerSettingsPanel.table_name
SettingsPanel.column_names
SettingsPanel.first
TimeTracking::Event
TimeTracking::Event.class_name
TimeTracking::Event.name
TimeTracking::Event.name.downcase
TimeTracking::Event.table_name
exit
TimeTracking::Event
TimeTracking::Event.first
TimeTracking::MaintenanceEvent.first
TimeTracking::Event.column_names
exit
TimeTracking::Event.column_names
exit
TimeTracking::Event.column_names
exit
TimeTracking::MaintenanceEvent.first
exit
TimeTracking::MaintenanceEvent.first
exit
TimeTracking::MaintenanceEvent
TimeTracking::MaintenanceEvent.first
exit
TimeTracking::MaintenanceEvent.first
exit
TimeTracking::MaintenanceEvent.first
TimeTracking::MaintenanceEvent.column_names
TimeTracking::Event
TimeTracking::MaintenanceEvent.first
TimeTracking::MaintenanceEvent.new
TimeTracking::Event.new
exit
TimeTracking::MaintenanceEvent.skip_callback(:save, :after)
event = TimeTracking::Event.first
me = TimeTracking::MaintenanceEvent.new
me = TimeTracking::MaintenanceEvent.create
me = TimeTracking::Event.new
me = TimeTracking::MaintenanceEvent.create
TimeTracking::MaintenanceEvent.column_names
TimeTracking::MaintenanceEvent.column_names.sort
exit
TimeTracking::MaintenanceEvent.column_names
TimeTracking::MaintenanceEvent.new
TimeTracking::MaintenanceEvent.build
TimeTracking::MaintenanceEvent.create
TimeTracking::MaintenanceEvent
TimeTracking::MaintenanceEvent.column_names
TimeTracking::Event
TimeTracking::Event.new
TimeTracking::MaintenanceEvent
cd _
show-method create
after_save.clear
before_save
before_save.clear
create
TimeTracking::MaintenanceEvent
TimeTracking::MaintenanceEvent.create
TimeTracking::Event
exit
TimeTracking::Event
TimeTracking::MaintenanceChecklistEvent
exit
TimeTracking::MaintenanceChecklistEvent
exit
TimeTracking::MaintenanceChecklistEvent
TimeTracking::MaintenanceChecklistEvent.new
TimeTracking::Event
exit
TimeTracking::MaintenanceChecklistEvent.new
exit
TimeTracking::MaintenanceChecklistEvent
TimeTracking::MaintenanceChecklistEvent.new
k = _
k.school_instance_id
clear
exit
me
me.valid?
me.save!
me.school_instance_id
tte.school_instance_id
me
exit!
me
me.school_instance_id = tte.school_instance_id
me
me.school_instance_id
exit!
me
me.valid?
me.save!
TimeTracking::MaintenanceChecklistEvent.first
TimeTracking::MaintenanceChecklistEvent.first.maintenance_checklist
exit!
TimeTracking::MaintenanceChecklistEvent.delete_all
exit
TimeTracking::MaintenanceChecklistEvent
TimeTracking::MaintenanceChecklistEvent.last
TimeTracking::MaintenanceChecklistEvent.last.maintenance_checklist
exit
Rails.env = ENV['RAILS_ENV'] = 'test'
Rake::Task['db:drop'].invoke
Rake::Task['db:create'].invoke
result = capture_stdout { Rake::Task['db:schema:load'].invoke }
File.open(File.join(ENV['CC_BUILD_ARTIFACTS'] || 'log', 'schema-load.log'), 'w') { |f| f.write(result) }
Rake::Task['db:seed:load'].invoke
ActiveRecord::Base.establish_connection
Rake::Task['db:migrate'].invoke
Rake::Task['db:migrate'].invokeexit
exit
TimeTracking::MaintenanceChecklistEvent
TimeTracking::MaintenanceChecklistEvent.column_name
TimeTracking::MaintenanceChecklistEvent.column_names
TimeTracking::MaintenanceChecklistEvent.count
exit
TimeTrackingEvent
TimeTracking::Event
TimeTracking::Event.table_name
TimeTracking::Event.column_names
clear
exit
TimeTracking::Event
TimeTracking::Event.first
TimeTracking::Event.first.spcific
TimeTracking::Event.first
TimeTracking::MaintenanceChecklistEvent.first
TimeTracking::MaintenanceChecklistEvent.where(user_id: 1)
TimeTracking::MaintenanceChecklistEvent.where(user_id: 1).first
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 1).first
exit
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 1).first
TimeTracking::MaintenanceChecklistEvent.where('user_id = ? AND started = ?, 1, nil).first
TimeTracking::MaintenanceChecklistEvent.where('user_id = ? AND started = ?', 1, nil).first
TimeTracking::MaintenanceChecklistEvent.where('user_id = ? AND started = ?', TimeTracking::Event.first.user_id, nil)
TimeTracking::MaintenanceChecklistEvent.first
TimeTracking::MaintenanceChecklistEvent.first.user_id
TimeTracking::MaintenanceChecklistEvent.all.collect(&:user_id)
TimeTracking::MaintenanceChecklistEvent.all.collect(&:user_id).uniq
TimeTracking::MaintenanceChecklistEvent.where('user_id = ? AND started = ?', 57, nil)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ? AND started = ?', 657, nil)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 657)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 657).where('started != ?', nil)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 657).where('started = ?', nil)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 657)
TimeTracking::MaintenanceChecklistEvent.where('user_id = ?', 657).collect(&:started)
TimeTracking::MaintenanceChecklistEvent.where('stopped IS NULL')
clear
TimeTracking::MaintenanceEvent
TimeTracking::MaintenanceEvent.column_names
TimeTracking::MaintenanceChecklistEvent.column_names
clear
exit
TimeTracking::Maintenanec::ChecklistEvent
TimeTracking::Maintenance::ChecklistEvent.table_name
exit
TimeTracking::Maintenance::ChecklistEvent.table_name
TimeTracking::Maintenance::ChecklistEvent.first
exit
TimeTracking::Maintenance::ChecklistEvent.first
TimeTracking::Maintenance::ChecklistEvent.table_name
TimeTracking::Maintenance::ChecklistEvent.column_names
exit
module TimeTracking
  module Other
    def self.table_name_prefix
      table_name_prefix + 'other_'
    end
  end
end
TimeTracking::Other.table_name
module TimeTracking
  class Other < ActiveRecord::Base
    def self.table_name_prefix
      table_name_prefix + 'other_'
    end
  end
end
Maintenance::Task.table_name
TimeTracking::Other.table_name
exit
TimeTracking::Maintenance::ChecklistEvent.table_name
exit
TimeTracking::Maintenance::ChecklistEvent.table_name
TimeTracking::Maintenance::ChecklistEvent.column_names
exit
Maintenance::WorkOrder.last
wo = _
wo.time_tracking_events
exit
wo = Maintenance::WorkOrder.last
wo.time_tracking_events
wo.time_tracking_events.first
exit
wo = Maintenance::WorkOrder.last
wo.time_tracking_events.first
wo.time_tracking_events
exit
TimeTracking::Maintenance::WorkOrderTaskEvent
TimeTracking::Maintenance::WorkOrderTaskEvent.first
params
c
TimeTracking::Maintenance::WorkOrderTaskEvent.first\
TimeTracking::Maintenance::WorkOrderTaskEvent.first
TimeTracking::Maintenance::WorkOrderTaskEvent.delete_all
TimeTracking::Maintenance::WorkOrderTaskEvent.count
TimeTracking::Maintenance::WorkOrderTaskEvent.delete_all
TimeTracking::Maintenance::WorkOrderTaskEvent.count
TimeTracking::Maintenance::WorkOrderTaskEvent.first
TimeTracking::Maintenance::WorkOrderTaskEvent.first.stopped
Ctask.time_tracking_events.where('stopped IS NULL').where('user_id = ?', current_user.id).first
task.time_tracking_events.where('stopped IS NULL').where('user_id = ?', current_user.id).first
task.time_tracking_events.where('stopped IS NULL')
task.time_tracking_events
task
TimeTracking::Maintenance::WorkOrderTaskEvent.first
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task
c
TimeTracking::Maintenance::WorkOrderTaskEvent.delete_all
@task
n
@maintenance_time_tracking_event
@maintenance_time_tracking_event.work_order_task_id
@maintenance_time_tracking_event.work_order_task_id =@task.id
@maintenance_time_tracking_event
c
@maintenance_time_tracking_event
_.valid?
c
TimeTracking::Maintenance::WorkOrderTaskEvent.first.stopped
TimeTracking::Maintenance::WorkOrderTaskEvent.first
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task.time_tracking_events
task.time_tracking_events.where('stopped IS NULL')
task.time_tracking_events.where('stopped IS NULL').where('user_id = ?', current_user.id)
task.time_tracking_events.where('stopped IS NULL').first.user_id
TimeTracking::Maintenance::WorkOrderTaskEvent.delete_all
c
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task.time_tracking_events
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task.time_tracking_events.user_id
TimeTracking::Maintenance::WorkOrderTaskEvent.first.work_order_task.time_tracking_events.first.user_id
TimeTracking::Maintenance::WorkOrderTaskEvent.delete_all
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.last
Maintenance::Task.find(1532)
task = _
task.work_order_items
task.work_order_items.first.amount.to_f
BillingSection::Item
BillingSection::Item.last
BillingSection::Item.last.description
task.work_order_items.first.item
BillingSection::Item.find_for_service_labor_by_hour
set_school
BillingSection::Item.find_for_service_labor_by_hour
BillingSection::Item.by_school(7)
BillingSection::Item.column_names.sort
BillingSection::Item.first.item_type
Maintenance::Task.last
task = _
task.labor_items
BillingSection::ItemCategory.by_school(SchoolInstance.current_school.id).labor_category
exit
BillingSection::ItemCategory.by_school(SchoolInstance.current_school.id).labor_category
set_school
BillingSection::ItemCategory.by_school(SchoolInstance.current_school.id).labor_category
exit
set_school
BillingSection::ItemCategory.by_school(SchoolInstance.current_school.id).default_labor_category
BillingSection::ItemCategory.default_labor_category
BillingSection::ItemCategory
cd _
show-source
where(description: 'Labor').first 
where(description: 'Labor', is_mx: true)
where(description: 'Labor', is_mx: true).count
where(description: 'Labor', is_mx: true).by_school(SchoolInstance.current_school.id)
where(description: 'Labor', is_mx: true).by_school(SchoolInstance.current_school.id)exit
exit
clear
exit
BillingSection::ItemCategory.default_labor_categories
set_school
BillingSection::ItemCategory.default_labor_categories
k = _.first
k.items
set_school(7)
BillingSection::ItemCategory.default_labor_categories.first
k = _
k.items
k.items.first
Maintenance::Task.last
task = _
task.work_order_items
Maintenance::Task.find 1532
task = _
task.work_order_items
task.work_order_items.first
exit
woi
woi.valid?
woi.qty
event.elapsed_time
event.started
event.ended
event.stopped
(event.elapsed_time / (60 * 60) ).to_f
(event.elapsed_time / 60)
(event.elapsed_time / (60 * 60)) 
(event.elapsed_time.to_f / (60 * 60)).to_f
((event.elapsed_time.to_f / (60 * 60)).to_f)
(event.elapsed_time.to_f / (60 * 60) ).to_f.round(2)
c
whereami
woi.valid?
woi.save!
c
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.work_order_id
TimeTracking::Maintenance::WorkOrderTaskEvent.last
t = _
t.work_order_task
t.work_order_task.work_order
woi
woi.work_order
woi.task
c
clear
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.table_name
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.new
k = _ 
k.qty
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.type
Maintenance::WorkOrderItem.last.item
Maintenance::WorkOrderItem.last.item.item_category
Maintenance::WorkOrderItem.last.item.item_category.description
whereami
new_params
@task.update_attributes(new_params)
@task.errors
c
self
self.estimate_item
self.hours
c
hours
c
hours
c
hours
self
self.labor_item
self.labor_item/
self.labor_item/?
self.labor_item?
self.persisted
self.persisted?
params
c
new_params
c
hours
c
hours
c
hours
c
hours
hours = 1
c
clear
TimeTracking::Maintenance::WorkOrderEvent.last
TimeTracking::Maintenance::WorkOrderEvent.last.elapsed_time
TimeTracking::Maintenance::WorkOrderTask
TimeTracking::Maintenance::WorkOrderEvent.last
TimeTracking::Maintenance::WorkOrderEvent.last.user
TimeTracking::Maintenance::WorkOrderTaskEvent.last.user
TimeTracking::Maintenance::WorkOrderTaskEvent.last.item
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_item
associated_with TimeTracking::Maintenance::WorkOrderTaskEvent.last
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.name
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.column_names.sort
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.class.column_names.sort
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task
cd _
show-method name
exit
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.fisrst
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.fisrst.name
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.fisrst.user
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.fisrst.user_id
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user.name
TimeTracking::Maintenance::WorkOrderTaskEvent.last
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_item
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.
first
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user.display_name
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user.first_last
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user.full_name
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.rst
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items.first.user_id
TimeTracking::Maintenance::WorkOrderTaskEvent.last.work_order_task.work_order_items
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.user_id
Maintenance::WorkOrderItem.last.user
Maintenance::WorkOrderItem.last.name
Maintenance::WorkOrderItem.last
cd _
show-method name
exit
User.first
User.first.last
"".blank?
clear
exit
Maintenance::WorkOrderItem
Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.estimate?
woi = Maintenance::WorkOrderItem.last
wio.estimate
wio.column_names.sort
wio.class.column_names.sort
woi.column_names.sort
woi.class.column_names.sort
woi.column_names.invoiceable_item
woi.invoiceable_item
exi
exit
woi = Maintenance::WorkOrderItem.last
woi.estimate_labor_item?
woi.estimate_item
woi.labor_item?
woi.estimate_item?
mx_users
current_user
mx_users.uniq.conut
mx_users.uniq.count
mx_users.last
mx_users.last.full_name_reversed
mx_users.sort
task.usre
task.user
c
exit!
z = [nil, 0.2, 0.2]
z.reject!{ |k| k? }
z.delete_if!{ |k| k? }
z.delete_if { |k| k? }
z.delete_if { |k| k.blank? }
z
Maintenance::WorkOrderItem
associated_with Maintenance::WorkOrderItem.last
Maintenance::WorkOrderItem.last.tracked_items
exit
end_time
n
start_time >= end_time
n
errors
c
MaintenanceInterval.find 10341
mx = _
mx.end_time >= mx.start_time
mx.valid?
mx.errors
exit
clear
Maintenance::WorkOrderItem.find 1468
woi = _
woi.estimate'*>#+
woi.estimate_item
clear
exit
Document.last
Document.last.type
Document.last.parent_type
Document.last.parent
Document.where(parent_type: 'task')
Document
Documentexit
exit
Document.last
Document.last.tagged_with(['jac'])
Document.last.tags
params
params[:mx][:document]
d = Document.last
d.tags
d.tags << '337'
d.tag_list
d.tag_list << '337'
d.tags
d.save!
d
d.tags
d.tag_list
d.save
d.reload
d.tags
c
params[:mx][:document]
c
Document.last
Document.last.parent
Document.last.parent_type
Maintenance::WorkOrder.find(179)
wo = _
wo.documents.count
wo.documents
Documents.where(parent_type: 'Maintenance::WorkOrder', parent_id: 179)
Document.where(parent_type: 'Maintenance::WorkOrder', parent_id: 179)
Document.where(parent_type: 'Maintenance::WorkOrder', parent_id: 179).count
Document.last
Document.where(parent_type: 'Maintenance::WorkOrder', parent_id: 179).collect(&:id)
@document
@document.parent
@document.parent_type
@document.parent_id
@document.valid?
@document.save
@document.id
@document
params[:mx]
@document.mx_post_process!(params[:mx][:document]) 
@document
@document.reload.tags
c
Maintenance::Task.find(265)
mt = _
mt.documents
mt.documents.tagged_with
mt.documents.tagged_with("337")
mt.tasks.collect(&:documents).tagged_with('337')
Maintenance::WorkOrder.last.tasks.collect(&:documents).tagged_with('337')
Maintenance::WorkOrder.last.tasks.collect(&:documents)
Maintenance::WorkOrder.last.tasks.collect(&:documents).flatten
Maintenance::WorkOrder.last.tasks.collect(&:documents).flatten.tagged_woith
Maintenance::WorkOrder.last.tasks.collect(&:documents).flatten.tagged_with
exit
Maintenance::WorkOrder.find 179
wo = _
wo.all_337_documents
wo.all_8130_documents
Maintenance::WorkOrder.find 179
wo = _
wo.all_337_documents
wo.all_8130_documents
wo.all_8130_documents.first.attachment
wo.all_8130_documents.first.attachment.file_type
wo.all_8130_documents.first.attachment.instance
wo.all_8130_documents.first.attachment.instance.content_type
wo.all_8130_documents.first.attachment.instance.attachment_content_type
wo.all_8130_documents.first.attachment.instance.attachment_content_type ~=/pdf/i
wo.all_8130_documents.first.attachment.instance.attachment_content_type =~ /pdf/i
wo.all_8130_documents.first.attachment.instance.attachment_content_type
wo.all_8130_documents.first.attachment.instance.attachment_content_type =~ /pfd/i
task
task.documents
task.documents.tagged_with('8130')
c
task.documents.tagged_with('8130')
c
exit
Maintenance::WorkOrder.find 179
wo = _
wo.all_8130_documents
c
wo.all_337_documents
wo.all_337_documents.each do |k|
  puts k.attachment_file_name
end
doc
doc.task.documents.tagged_with('8130')
doc.tagged_with('8130')
c
doc
doc.tagged_with('8130')
c
whereami
doc.tagged_with('8130')
d8130
d8130 << doc.tagged_with('8130')
c
d8130 += task.documents.tagged_with('8130')
c
d8130 += task.documents.tagged_with('8130')
d8130
n
c
doc
c
whereami
d8130.attachment
CombinePDF.parse(d8130.attachment)
CombinePDF.parse(d8130.attachment.to_f)
CombinePDF.parse(d8130.attachment.to_s)
d8130.attachment.to_s
CombinePDF.parse(d8130.attachment.to_s)
CombinePDF.load(d8130.attachment.to_s)
CombinePDF.load(d8130.attachment)
CombinePDF.load(d8130.attachment.raw)
CombinePDF.load(d8130.attachment.copy_to_local_file.read)
d8130.attachment.copy_to_local_file.read
Paperclip.io_adapters.for(d8130.attachment.file).read
Paperclip.io_adapters.for(d8130.attachment).read
c
pdf.to_pdf
c
clear
exit
Maintenance::Task.column_names
UserProfiles
UserProfile
UserProfile.reload
exit
UserProfile
whereami
params
whereami
n
@signer
n
@type
n
Maintenance::WorkOrder.find(params[:id])
n
c
Maintenance::WorkOrder
Maintenance::Task.find 1539
task = _
task.signed
task.save
task.reload
task.status
task.statusexit
exit
Maintenance::Task.find 1539
task.signed?
self.signed?
n
c
exit
Maintenance::Task.find 1539
t = _
t.save
t.reload
exit
t = Maintenance::Task.find 1539
t.reload
t.save
t.reload
exit
t.workflow_state = 'pending'
t = Maintenance::Task.find 1539
task.signed?
self.task
c
exit
t = Maintenance::Task.find 1539
wo_task
exit
t = Maintenance::Task.find 1539
t.status
t.workflow_state = 'pending'
t.save
t.reload
exit
t = Maintenance::Task.find 1539
t.workflow_state = 'pending'
t.save
t.reload
exit
UserProfile
UserProfile.last
UserProfile.where("inspection_stamp_file_name IS NOT ?", ?).first
UserProfile.where("inspection_stamp_file_name IS NOT ?", ?)
UserProfile.where("inspection_stamp_file_name IS NOT ?", nil)
_.first
user = _
user.inspection_stamp
user.inspection_stamp.instance
user.inspection_stamp.instance.height
user.inspection_stamp.original
user.inspection_stamp.instance.original
user.inspection_stamp.instance
exit
pin
n
pin
exit
params
params[:sining][:validation][:pin]
c
params
c
pin
n
pin
params
n
pin
c
SchoolInstance.first
SchoolInstance.first.name
SchoolInstance.first
exit
SchoolInstance.all.each do |school_instance| 
  school_instance.build_setting_container
end
current_school
current_school.mx_shop_enabled?
current_school.mx_shop_enabled
SchoolInstance.find 7
SchoolInstance.find(7).mx_shop_enabeld?
SchoolInstance.find(7).mx_shop_enabeld
SchoolInstance.find(7).mx_shop_enabled
SchoolInstance.find(7).mx_shop_enabled = false
c
si = SchoolInstance.find(7)
si.mx_shop_enabled = false
si.save!
clear
si.school_setting_container
SchoolInstance.all.each do |si|
  si.school_setting_container
end
clear
si
TimeTracking::MaintenanceCheckListEvent
TimeTracking::MaintenanceChecklistEvent
si = SchoolInstance.find(7)
si.mx_shop_enabled = true
si.purchasing_enabled = true
si.aircraft_management_enabled = true
si.save!
clar
clear
exit
Maintenance::Item
Item
BillingSection::Item
BillingSection::Item.count
exit
clear
BillingSection::Item
BillingSection::Item.column_names.sort
BillingSection::Item.last.current_inventory
BillingSection::Item.last.quantity
BillingSection::Item.find.2826
BillingSection::Item.find 2826
i = _
i.category
associated_with i
i.item_category
clear
BillingSection::Item.column_names.sort
BillingSection::Item.last.airport_tax
Maintenance::WorkOrder
associated_with Maintenance::WorkOrder
associated_with Maintenance::WorkOrder.last.measuring_device_histories
Maintenance::WorkOrder.last.measuring_device_histories
BillingSection::Item.last.traceable
BillingSection::Item.last.batch_traceable
BillingSection::Item.where(traceable: true).last
BillingSection::Item.where(traceable: true).last.items
Location
TaxRateLocation
BillingSection::TaxRateLocation
BillingSection::Item
BillingSection::Item.column_names.sort
BillingSection::Item.last
BillingSection::Item.last.item_type
BillingSection::Item.last.item_category
:fucker
:fucker.class_name
:fucker.class
:fucker.is_a?(Symbol)
BillingSection::Item.last
cd _
self.send('item_category')
self.send('item_category.description')
self.send('item_category')
self.send('item_category').send('description')
'item_category.description'.split('.').collect{|k| "send('#{k}') }
'item_category.description'.split('.').collect{|k| "send('#{k}'"}
'item_category.description'.split('.').collect{|k| "send('#{k}'"}.join('.')
'item_category.description'.split('.').collect{|k| "send('#{k}')"}.join('.')
self.send('item_category.description'.split('.').collect{|k| "send('#{k}')"}.join('.'))
self.eval('item_category.description'.split('.').collect{|k| "send('#{k}')"}.join('.'))
clear
"Test".instance_eval{chop!.chop!}
clear
eval('item_category.description'.chop!.chop!)
eval('item_category.description'.split('.'))
instance_eval('item_category')
instance_eval('item_category.description')
nil.is_a?(Symbol)
field_name
c
exit!
nil.is_nil?
nil.nil?
exit
BillingSection::Item.where(traceable: true)
params
c
params
BillingSection::Item.for_current_school.ransack(params[:q])
BillingSection::Item.for_current_school.ransack(params[:q]).rescult
BillingSection::Item.for_current_school.ransack(params[:q]).result
BillingSection::Item.for_current_school.ransack(params[:q])
BillingSection::Item.for_current_school.ransack(params[:q]).to_sql
BillingSection::Item.for_current_school.ransack(params[:q]).instance_methods
BillingSection::Item.for_current_school.ransack(params[:q]).methods
BillingSection::Item.for_current_school.ransack(params[:q]).search
BillingSection::Item.for_current_school.ransack(params[:q])
cd _
ls
build
translate
to_param
base
exit
BillingSection::Item.for_current_school.ransack(params[:q])
BillingSection::Item.for_current_school.ransack(params[:q]).inspect
BillingSection::Item.for_current_school.ransack(params[:q]).sql
BillingSection::Item.for_current_school.ransack(params[:q]).build
BillingSection::Item.for_current_school.ransack(params[:q]).reslut.to_sql
BillingSection::Item.for_current_school.ransack(params[:q]).result.to_sql
BillingSection::Items.where(school_instance_id: 7).where(traceable: 1)
BillingSection::Item.where(school_instance_id: 7).where(traceable: 1).to_sql
BillingSection::Item.where(school_instance_id: 7).where(traceable: 1).count
BillingSection::Item.where(school_instance_id: 4).where(traceable: 1).count
BillingSection::Item.where(traceable: 1).count
BillingSection::Item.where(traceable: 1).first
BillingSection::Item.where(traceable: 1).first.school_instance_id
c
BillingSection::Item.where(traceable: true).first
BillingSection::Item.where(traceable: true).first.school_instance
BillingSection::Item.where(traceable: true).last.school_instance
BillingSection::Item.where(traceable: true).last.school_instance.tracked_items
BillingSection::Item.where(traceable: true).last.tracked_items
BillingSection::TrackedItem
TrackedItem
Maintenance::TrackedItem
Maintenance::TrackedItem.last
clear
item
item.items
c
item
item.items
c
item
item.items
item.tracked_items
c
TrackedItem
Maintenance::TrackedItem
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item
Maintenance::TrackedItem.last.item.traceable
Maintenance::TrackedItem.last.item.batch_traceable
exit
BillingSection::Item.last
BillingSection::Item
BillingSection::Item.last
BillingSection::Item.last.full_item_listing_block
BillingSection::Item.last.instance_eval('full_item_listing_block')
clear
Inventory::ItemReport.full_item_listing_header
exit
Inventory::ItemReport.full_item_listing_header
Inventory::ItemReports.full_item_listing_header
Inventory::ItemReports.class_methods
Inventory::ItemReports
cd _
ls
ll
ls -19
exit
header
self
self.send('full_item_listing_header')
ls
full_item_listing
exit
Inventory::ItemReports.full_item_listing_header
c
rows
rows.join(',')
c
exit
DateTime.now
DateTime.now.to_s
exit
params
c
params
c
Maintenance::TrackedItem
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item_location
show-source Maintenance::TrackedItem.last.item_location
Maintenance::TrackedItem.last.item_location
cd _
ls
show-source
display_name
clear
exit
clear
Maintenance::TrackedItem.last.item_location
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.serial_number
clear
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item.barcode_number
Maintenance::TrackedItem.last.item_location
cd Maintenance::TrackedItem.last.item_location
show-source
cd ..
clear
Maintenance::Interval
MaintenanceInterval
BillingSection::Item.find 13831
k = _
k.tracked
k.tracked?
k.▸ .bundle/$                    |117           :current_inventory_on_hand,$
k.current_inventory_on_hand
k.tracked_items.on_hand.count
k.tracked_items.count
k.tracked_items
BillingSection::Item.find 13839
k = _
k.current_inventory_on_hand
k.traceable?
k.trackable?
k.tracked?
k.school_instance
set_school(43)
BillingSection::Item.for_current_school.where(traceable: true)
BillingSection::Item.for_current_school.where(traceable: true).count
@!
@
@q
@q.result
@q.result.count
c
params[:q]
n
@q
c
params[:q]
c
BillingSection::Item.column_names.sort
exit
Maintenance::TrackedItem
Maintenance::TrackedItem.last
Maintenance::TrackedItem.last.item_location
cd Maintenance::TrackedItem.last.item_location
show-source
display_name
exit
MaintenanceInterval.last
mi = _
exit!
mi = MaintenanceInterval.last
mi.end_time
mi.start_time 
mi.update_column("start_time", mi.end_time + 20.hours)
mi.start_time
mi.reload.start_time
mi.reload
mi.reload.start_time
mi.end_time
exit
Maintenance::WorkOrder.column_names
Maintenance::WorkOrder.column_names.sort
exit
work_order
c
whereami
work_order
work_order.serviced_plane
work_order.serviced_plane.tail_or_short_desc$
work_order.serviced_plane.tail_or_short_desc
checklist
self.serviced_plane
whereami
associated_with
plane
planetail_or_short_desc$
plane.tail_or_short_desc
c
work_order.serviced_plane
c
associated_with Maintenance::WorkOrder
associated_with Maintenance::Checklist
exit
associated_with Maintenance::WorkOrder
Maintenance::WorkOrder.last
Maintenance::WorkOrder.last.checklist
Maintenance::WorkOrder.column_names.sort
Maintenance::Checklist.column_names.sort
exit
Maintenance::WorkOrder.last.checklists
exit
Maintenance::WorkOrder
Maintenance::WorkOrder.last
Maintenance::WorkOrder.aircraft_details
Maintenance::WorkOrder.last.aircraft_details
Maintenance::WorkOrder.last.serviced_plane.tail_number
BillingSection::Item
BillingSection::Item.all.collect(&:uom).uniq
exit
[nil, 1].compact
clear
exit
[[1,2], nil].compact
exit
WorkOrder.first
Maintenance::WorkOrder.first
Maintenance::WorkOrder.first.status
Maintenance::WorkOrder.first.last_status
Maintenance::WorkOrder.first.work_orderexexit
exit
CSV.generate do |csv|
  csv << [["fuck"], ["upou" , 
  "bitch"]]
end
CSV.generate do |csv|
  csv << 'fucker', "fuck"
end
CSV.generate do |csv|
  csv << 'fucker', "fuck"
CSV.generate do |csv|
  csv << ['fucker', "fuck"]
end
Maintenance::WorkOrder.last.tasks
Maintenance::WorkOrder.first.tasks
Maintenance::WorkOrderTask.first
associated_with Maintenance::WorkOrder
show_source Maintenance::WorkOrder
show-source Maintenance::WorkOrder
Maintenance::Task.first.work_order
wo = _
wo.tasks
wo.tasks.first
task = _
associated_with task
task.work_order_items.estimate
task.work_order_items
[1,1,3]
_ += [2,3,4,5]
clear
task
associated_with task
associated_with task.time_tracking_events
task.time_tracking_event.first
task.time_tracking_events.first
show-source Maintenance::Task
clear
show-source Maintenance::Task
TimeTracking::Maintenance::WorkOrderTaskEvent.first
tte = _
wo = tte.work_order_task.work_order
task = tte.work_order_task
clear
associated_with tte
tte
tte.user
tte.user.full_name
tte.created_at
tte.hours
tte.elapsed_time
tte.elapsed_time / 60
tte.elapsed_time / 60 / 60
tte.elapsed_time / 60.0 / 60.0
60*60
event
task
associated_with task
task.work_order_items
task.work_order_items.estimate
task.work_order_items.labor
wo
tte
tte.work_ordert_task
tte.work_order_task
associated_with tte.work_order_task
tte
item
task
task.work_order_items
item = _.first
item.user
item
associated_with item
tte
Maintenance::WorkOrderItem.table_name
tte
exit
Maintenance::WorkOrderItem.find 1441
woi = _
woi.work_order
wo = _
woi
woi.task
task = _
woi
woi.time_tracking_event = TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
tte = _
woi
woi.time_tracking_event_id = tte.id
woi.save
exit
TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
tte = _
task = _.task
task = tte.work_order_task
woi
task.work_order_items
reload!
exit
TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
tte = _
tte.work_order_item
woi = Maintenance::WorkOrderItem.find 1441
woi.update_column('time_tracking_event_id', 9)
tte.work_order_item
tte.work_order_item.to_sql
woi
woi.time_tracking_event
exit
TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
tte = _
tte.work_order_item
exit
tte = TimeTracking::Maintenance::WorkOrderTaskEvent.find 9
tte.work_order_item
woi
tte.work_order_item
woi = _
woi.amount
woi
woi.hours
[[1,1,1],[2,2,2]]
k = _
k.sum{|i| i[1] }
task
woi
woi.work_order_task
woi.taslk
woi.task
woi.task.work_order_items
woi.task.work_order_items.estimates
woi.task.work_order_items.estimate
Maintenance::WorkOrderItem.estimate.first
Maintenance::WorkOrderItem.estimate.first.labor_item?
Maintenance::WorkOrderItem.estimate.first.hours
Maintenance::WorkOrderItem.estimate.sum(&:hours)
Maintenance::WorkOrderItem.estimate.sum{|e| e.hours.nil? ? 0 : e.hours }
Maintenance::WorkOrderItem.estimate.sum{|e| e.hours.nil? ? 0 : e.hours }.round(1)
clear
WorkOrder.last.items
Maintenance::WorkOrder.last.items
Maintenance::WorkOrder.last.work_order_items
Maintenance::WorkOrder.last.work_order_items.first
Maintenance::WorkOrder.last.work_order_items.first.task
Maintenance::WorkOrder.find(38).work_order_items.last
Maintenance::WorkOrder.find(38).work_order_items.last.task
Maintenance::WorkOrder.find(38).work_order_items.task
Maintenance::WorkOrder.find(38).work_order_items.lsat.task
Maintenance::WorkOrder.find(38).work_order_items.last.task
Maintenance::WorkOrder.find(38).work_order_items.last.task.display_id
Maintenance::WorkOrderItem.find 1475
woi = _
woi.amount.to_f
exit
clear
rows
rows[0]
rows.first
rows.first.first
rows.first
rows.flatten
rows
rows
[[1]] + [[2]]
c
rows
row.first[0]
rows.first[0]
k = []
k[0] == 
"Fuck You "
k[0].nil?
k[1] = f
k[1] = r
k[1] = 4
k
row
rows.first
rows.reject{|i| i[0] != 'Subtotal'}
_.first.lenght
rows.first
rows.first.length
rows
rows.collect{&:length}
rows.collect(&:length)
rows.first
c
clear
exit
exiot
exit
which ruby
ls
ll
User
ll
User
User.frist
exit
Transaction
Interactive
exit
Transaction.column_names
exit
User
clear
exit
User
user
User
exit
User
exit
User
ls
clear
exit
ls
ll
User
exit
User
exit
clear
User
exit
User
exit
User
exit
User
exit
User
exit
User
exit
User
clear
reset
clear
`reset`
exit
cls
User
exit
User
cls
ll
User
exit
clear
User
cls
clear
Transaction
Transaction.column_names
CreditCard.column_names
reload!
cd CreditCard
ls
show-source
new(number: '4444-3333-2222-1111')
valid?
cd ..
cd CreditCard.new
number = '4444-3333-2222-1111'
valid?
exit
cd CreditCard.new
number = '4444-3333-2222-1111'
valid?
number
luhn_val = LuhnValidation.new
luhn_val.valid?(self.number.gsub(/\D/,''))
luhn_val.valid?(number.gsub(/\D/,''))
number = '4444-3333-2222-1881'
luhn_val.valid?(number.gsub(/\D/,''))
cler
exit
cd CreditCard.new
number = 
'4444-3333-2222-1111'
valid?
show-source
exit
cd CreditCard.new
number = '4444-3333-2222-1111'
valid?
show-source
exit
reload!
show-source
clear
card = CreditCard.new(number: '4444-3333-2222-1111')
card.valid?
number
exit!
card = CreditCard.new(number: '4444-3333-2222-1111')
card.valid?
number
self.number
luhn_val.valid?(self.number)
c
continue
clear
exit
PryByebug
exit
PryByebug
clear
cls
card = CreditCard.new(number: '4444-3333-2222-1111')
card.number
card.valid?
c
card.save!
c
exit
User.new
u = _
u.name = 'asdf*!@#'
u.valid?
'asdf*123' ~= /\w/
'asdf*123' =~ /\w/
'asdf*123' =~ /\W/
'asdf*123' =~ /\w|-/
('asdf-123' =~ /\w|-/)
('asdf-123' =~ /\W/)
('asdf*123' =~ /\W/)
('asdf123' =~ /\W/)
('asdf*123' =~ /\W|-/)
('asdf-123' =~ /\W|-/)
('asdf-123' =~ /(\W|-)/)
('asdf-123' =~ /(\w|-)/)
('asdf-123' =~ /(\w)/)
exit
u = User.new
u.name = 'asdf*!@#'
u.valid?
exit
show-source User
cd User
show-source
ll
exit
show-source USer
show-source User
user
User
User.first
User.new(name: 'Fucker)*!@#')
u = _
u.valid?
u.errors
User.new(name: 'Fucker-1234').valid?
User.new(name: 'Fucker-1234').errors
User.new(name: 'Fucker-1234')
u = User.new(name: 'Fucker-1234')
u.valid?
u.errors
exit
user = User.new(name:'Fucker1234')
exit
user = User.new(name:'Fucker1234')
user.valid?
user.errors
user = User.new(name:'Fucker*(1234')
user.valid?
exit
user = User.new(name:'Fucker1234')
user.valid?
user = User.new(name:'Fucker*1234')
user.valid?
exit
user = User.new(name:'Fucker1234')
user.valid?
user = User.new(name:'*(#$')
user.valid?
exot
exit
user = User.new(name:'*(#$')
user.valid?
user = User.new(name:'Fucker1234')
user.valid?
exit
user = User.new(name:'Fucker-1234')
user.valid?
user = User.new(name:'Fucker1234').valid?
User.new(name:'Fucker1234').valid?
'Fucker-1' ~= /(\W|-)/i
'Fucker-1' =~ /(\W|-)/i
'Fucker-1' =~ /(\W|\-)/i
'Fucker-1' ~ /(^\|^-)/i
'Fucker-1' ~ /(^\W|^-)/i
'Fucker-1' !~ /(^\W|^-)/i
'Fucker#1' !~ /(^\W|^-)/i
exit
User.new(name:'Fucker1234').valid?
User.new(name:'Fucker#1234').valid?
exit
User.new(name:'Fucker#1234').valid?
exit
User.new(name:'Fucker#1234').valid?
User.new(name:'Fucker-1234').valid?
exit
User.new(name:'Fucker#1234').valid?
User.new(name:'Fucker-1234').valid?
exit
show-source User
User
show-source User
User.new(name:'Fucker-1234').valid?
User.new(name:'Fucker*1234').valid?
CreditCard
User.new(name: "1"*16)
u = _
u.save!
user
def user
  puts "fuck off"
end
user
def pay(args*)
def pay(*args)
  args.each do |p|
    puts p.inspect
  end
end
pay James
exit
Interactive.venmo
exit
Interactive.venmo
exit
Interactive.venmo
exit
Interactive.venmo
exit
Interactive.venmo
line
exit
Interactive.venmo
line
line == 'exit'
line
line ~= /exit/i
line =~ /exit/i
exit
Interactive.venmo
line
c
line
c
line
clear
exit
User.first
exit
User.first
User.destroy
User.destory(1)
User.first.destory
User.first.delete
clear
cls
Trasnactions
Trasnaction
Transaction
exit
Venmo
Venmo.interactive
exit
Venmo.interactive
clear
exit
Venmo.interactive
clear
Venmo.interactive
exit
user magicJ
Venmo.interactive
User.new(name: 'MagicJ')
k = _
k.vaild?
exit
User.new(name: "magic").valid?
User.new(name: "magic")
u = _
u.errors
u.errors.collect(&:messages)
User.new(name: "magic**")
u = _
u.valid?
u.errors
u.errors.collect(&:messages)
u.messages
u.save!
u.valid?
u.errors
u.errors.messages
u.full_messages
u.errors.full_messages
exit
Venmo.interactive
User.new(name: 'FuckerHead')
User.new(name: 'FuckerHead').valid?
exit
Venmo.interactive
name
name.flatten
exit
Venmo.interactive
exit
Venmo.interactive
exit
Venmo.interactive
exit
Venmo.interactive
exit!
Venmo.interactive
exit!
Venmo.interactive
user
card_number
exit
clear
exit
Venmo.interactive
exit
Venmo.interactive
User.new(name: "fuckHead34132***")
u = _
u.pretty_save!
self
self.valid?
c
exit
Venmo.interactive
c
User.first
exit
User.new(name: 'Fuck1291***#$")
u = _
u.pretty_save!
User.new(name: 'Fuck1291***\#$")
"
)
User.new(name: 'Fuck1200$(91")
User.new(name: 'Fuck1200(91")
User.new(name: 'Fuck1200(91')
u = _
u.prety_save!
u.pretty_save!
name
self.valid?
self.save
c
clear
exit
Venmo.interactive
exit!
Venmo.interactive
exit!
Venmo.interactive
exit
Venmo.interactive
exit
Venmo.interactive
exit!
Venmo.interactive
exit!
Venmo.interactive
CreditCard
CreditCard.count
exit
Venmo.interactive
CreditCard.new(number: '12345'
)
cc = _
cc.valid?
exit
CreditCard.new(number: '12345')
cc = _
cc.valid?
cc.pretty_save!
exit
cc = CreditCard.new(number: '12345')
cc.pretty_save!
exit
cc.pretty_save!
cc = CreditCard.new(number: '12345')
cc.pretty_save!
exit
Venmo.interactive
exit
Venmo.interactive
CreditCard.first
CreditCard.first.valid_card_number?
exit
CreditCard.first
CreditCard.first.valid_card_number?
Venmo.interactive
CreditCard.new
cc = _
cc.user = User.first
cc.card_number = 
123455
cc.number = 
123455
cc.number = '123455'
cc.valid?
cc.save
cc.errors
cc.full_errors
cc.errors.full_messages
cc.save!
cc.message
cc.messages
cc.excpetion.messages
cc.save.excpetion.messages
begin 
  cc.save
rescue ActiveRecord::RecordNotUnique => 3
begin 
  cc.save
rescue ActiveRecord::RecordNotUnique => e
  puts e
end
exit
CreditCard.new
cc = _
cc.user = User.first
cc.card_number = 
'123455'
cc.number = 
'123455'
cc.pretty_save!
exit
cc = CreditCard.new(number: '123455', user_id: User.first.id)
cc.pretty_save!
e
e.class
e.message
exit
clear
exit
cc = CreditCard.new(number: '123455', user_id: User.first.id)
exit
\cc = CreditCard.new(number: '123455', user_id: User.first.id)
cc = CreditCard.new(number: '123455', user_id: User.first.id)
cc.pretty_save!
Venmo.interactive
exit
Venmo.interactive
Logger::INFO
Venmo.interactive
Logger::WARN
Logger::ERROR
Venmo.interactiv
Venmo.interactive
CreditCard.count
Venmo.interactive
exit
Venmo.interactive
c
exit
Venmo.interactive
c
[].empty?
exit
Venmo.interactive
exit
Venmo.interactive
exit
Venmo.interactive
exit
Venmo.interactive
args
exit
Transaction
['mj', 'jm', 1]
k = _
User.where(name: k.shift)
k
clear
Venmo.interactive
clear
exit
'$12.49'.gsub('$','').to_f
clear
cls
user
User
User.column_names
Transaction.all.collect(&:amount)
Transaction.all.sum(&:amount)
[1,2,3].sum
Transaction
Transaction.all
Transaction.all.collect(&:amount).sum
Transaction.all.collect(&:amount).sum.round(20
)
Transaction.all.collect(&:amount).sum.round(2)
clear
cls
exit
Money.new(100000)
Money.new(100000).to_s
Money.new(100000).format
Money.new("$1000")
Money.new("$1000")Transaction
Transaction
t = _.new
t.amount = Money.new(10000)
reload!
t = Transaction.new
t.amount = Money.new(10000)
t.amount
t.format
t
Money.new(1000)
Money.new(1000).to)_i
Money.new(1000).to_i
Money.new(1000.04)
Money.new("1000.04")
Money.new("1000").cents
exit
Venmo.interactive
User.first
User.credit_card
exit
Venmo.interactive
CreditCard
CreditCard.first
CreditCard.first.user
exit
Venmo.interactive
sender
sender.credit_card
c
Transaction
exit
Venmo.interactive
clear
exit
Venmo.interactive
Transaction.all
_.first.display_summary
_.first.display_summary(User.first)
User.first.sum
User.first.balance
Money.new(nil)
User.first
User.first.transactions
reload!
User.first.transactions
exit
users(:user1)
users(:one)
User.new(name: 'UserOne').valid?
User.new(name: 'UserOne').pretty_save!
u = User.new(name: users(:one).name)
exit
User.first
exit
User.first
User.new(name: 'One')
u = _
u.save!
user2 = u.clone
user2.valid?
user2.save!
User.count
User.new(name: 'One')
user2 = _
user2.valid?
user2.full_messages
user2.errors.full_messages
exit
exit!
user.valid?
expected
c
user.valid?
expected
c
user.valid?
c
user.valid?
c
user.valid?
expected
c
user.valid?
name.length
exit!
c
user.valid?
user.errors
c
exit!
CreditCard
CreditCard.column_names
CreditCard.connection
CreditCard.new
CreditCard.new.number.class
CreditCard
exit!
CreditCard.new(number: 123455)
CreditCard.new(number: '123455')
k = _
k.valid?
k.valid_card_number?
card
card.user
user(:one)
users(:one)
exit
exti!
exit!
card
card.user
exit
card.errors.full_messages
exit!
clear
Integer.new(4111111111111111)
Integer(4111111111111111)
k = _
exit
user
user.balance
c
user
n
c
exit
Venmo.interactive
exit
Venmo.interactive
clear
exit
User.count
exit!
User.count
User.last
Venmo.add(username, '123455')
User.last
User.last.credit_card
exit!
Venmo.add(username, '5105105105105100')
exit!
c
sender
args
exit!
sender
args
*args
amount
note
users(:one)
users(:one)exit!
exit!
users
exit!
BillingSection::Item
BillingSection::Item.where('min_reorder >= ?', 4).count
BillingSection::Item.where('min_reorder >= ?', 4)
BillingSection::Item.where('min_reorder >= ?', 4).count
BillingSection::Item.where('min_reorder >= ? AND active = ?', 4, true).count
exit
p['Birth Date Time']
p['Birth Date Time'])
DateTime.parse(p['Birth Date Time'])
p['Birth Date Time'])
p['Birth Date Time']
p['Birth Date Time'].split(\d)
p['Birth Date Time'].split(/\d/)
p['Birth Date Time'].split(/\D/)
exit!
n
exit
DateTime.new(dt[2], dt[1], dt[0], dt[3], dt[4], dt[5])
DateTime.new(dt[2], dt[1], dt[0], dt[3], dt[4], dt[5].to_s)
DateTime.new(dt[2], dt[1], dt[0], dt[3], dt[4], dt[5])
String.to_convert('00')
String.try_convert('00')
Integer.try_convert('00')
Integer.new('00')
Integer('00')
Integer('00')exit
exit!
c
continue
exit
date_format
DateTime.new _
DateTime.new(*date_format)
exit
exit!
birth_dt
exit!
json_person
pp json_person
JSON.parse(json_person)
JSON.parse(json_person).to_s
pp json_person
json_person.inspect
c
n
next
exit
exit!
